mads 2.1.7 build 35 (15 Jan 25)
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\BASE78.asm
     1 				*****************************************************************
     2 				*								*
     3 				*		7800 Base Unit Rom Code				*
     4 				*	Modified Asteroids with a bit of O.asm			*
     5 				*			16-May-88				*
     6 				*								*
     7 				*		Dave Staugas, programmer			*
     8 				*****************************************************************
     9 				;
    10
    11 					opt f+h-m+
    12 				*
    13 					icl	"RASTDEF.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\RASTDEF.asm
     1 				*         1544    030784
     2 				** * ** * ** * ** * ** * ** * ** * ** * **
     3 				**                                      **
     4 				**     Asteroids for the Atari 3600     **
     5 				**                                      **
     6 				** * ** * ** * ** * ** * ** * ** * ** * **
     7
     8 				*
     9 				*
    10 				** RASTDEF.S **
    11 				** ASTEROIDS FOR THE ATARI 3600 **
    12 				** THIS FILE CONTAINS MEMORY STORAGE **
    13 				**  AND GENERAL EQUATES. **
    14 				**
    15 				** MODIFIED FOR MARIA 2 **
    16 				*
    17 					icl	"maria.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\maria.asm
     1 				;	.6502
     2 				;	.SUBTTL	"MARIA EQUATES -- ATARI CONFIDENTIAL"
     3 				*************************************************************************
     4 				*	THIS DOCUMENT CONTAINS CONFIDENTIAL PROPRIETARY INFORMATION	*
     5 				*	OF ATARI WHICH MAY NOT BE COPIED, DISCLOSED, OR USED EXCEPT	*
     6 				*	AS EXPRESSLY AUTHORIZED IN WRITING BY ATARI.               	*
     7 				*************************************************************************
     8 				*
     9 				*	MEMORY MAP USAGE OF THE 7800
    10 				*
    11 				*	00-1F		TIA REGISTERS
    12 				*	20-3F		MARIA REGISTERS
    13 				*	40-FF		ZERO PAGE RAM
    14 				*	100-13F		SHADOW OF TIA AND MARIA REGISTERS -- USED FOR 
    15 				*			PUSHING ACCUMULATOR ONTO REGISTERS
    16 				*	140-1FF		RAM (STACK)
    17 				*	200-27F		NOT USED
    18 				*	280-2FF		PIA PORTS AND TIMERS
    19 				*	300-17FF	NOT USED
    20 				*	1800-203F	RAM
    21 				*	2040-20FF	SHADOW OF ZERO PAGE RAM
    22 				*	2100-213F	RAM
    23 				*	2140-21FF	SHADOW OF STACK RAM
    24 				*	2200-27FF	RAM
    25 				*	2800-3FFF	DUPLICATION OF ADDRESS SPACE 2000-27FF
    26 				*	4000-FF7F	UNUSED ADDRESS SPACE
    27 				*	FF80-FFF9	RESERVED FOR ENCRYPTION
    28 				*	FFFA-FFFF	6502 VECTORS
    29 				*
    30 					org	0
    31 = 0000			TIA:	.ds	1	;BASE ADDRESS FOR TIA CHIP
    32
    33 = 0001			PTCTRL:	.ds	1	;INPUT PORT CONTROL ("VBLANK" IN TIA )
    34 = 0002				.ds	6
    35 				*
    36 				*   AFTER INITIALIZING SWCHB AS FOLLOWS:
    37 				*
    38 				*	LDA  #$14
    39 				*	STA  CTLSWB
    40 				*	LDA  #0
    41 				*	STA  SWCHB
    42 				*
    43 				*   ...LEFT AND RIGHT FIRE BUTTONS CAN BE READ FROM THE FOLLOWING 4 LOCATIONS:
    44 				*
    45 				*			   THESE ARE ALSO USED FOR PADDLE INPUT
    46 = 0008			INPT4B:	.ds	1	;PLAYER 0, RIGHT FIRE BUTTON (D7=1 WHEN PUSHED)
    47 = 0009			INPT4A:	.ds	1	;PLAYER 0, LEFT FIRE BUTTON  (D7=1 WHEN PUSHED)
    48 = 000A			INPT5B:	.ds	1	;PLAYER 1, RIGHT FIRE BUTTON (D7=1 WHEN PUSHED)
    49 = 000B			INPT5A:	.ds	1	;PLAYER 1, LEFT FIRE BUTTON  (D7=1 WHEN PUSHED)
    50 				*
    51 				*   LEFT OR RIGHT FIRE BUTTONS READ FROM THESE LOCATIONS:
    52 				*
    53 = 000C			INPT4:	.ds	1	;PLAYER 0 FIRE BUTTON INPUT (D7=0 WHEN PUSHED)
    54 = 000D			INPT5:	.ds	1	;PLAYER 1 FIRE BUTTON INPUT (D7=0 WHEN PUSHED)
    55 = 000E				.ds	7
    56 				*
    57 = 0015			AUDC0:	.ds	1	;AUDIO CONTROL CHANNEL 0
    58 = 0016			AUDC1:	.ds	1	;AUDIO CONTROL CHANNEL 1
    59 = 0017			AUDF0:	.ds	1	;AUDIO FREQUENCY CHANNEL 0
    60 = 0018			AUDF1:	.ds	1	;AUDIO FREQUENCY CHANNEL 1
    61 = 0019			AUDV0:	.ds	1	;AUDIO VOLUME CHANNEL 0
    62 = 001A			AUDV1:	.ds	1	;AUDIO VOLUME CHANNEL 1
    63 				;
    64 				;******************************************************************************
    65 				;
    66 					org	$20
    67 				*
    68 				MARIA:				;BASE ADDRESS FOR MARIA CHIP
    69
    70 				BKGRND:				;BACKGROUND COLOR
    71 = 0020			BACKGRND:	.ds	1	;synonym used by GCC
    72 = 0021			P0C1:		.ds	1	;PALETTE 0 - COLOR 1
    73 = 0022			P0C2:		.ds	1	;          - COLOR 2
    74 = 0023			P0C3:		.ds	1	;          - COLOR 3
    75 = 0024			WSYNC:		.ds	1	;WAIT FOR SYNC
    76 = 0025			P1C1:		.ds	1	;PALETTE 1 - COLOR 1
    77 = 0026			P1C2:		.ds	1	;          - COLOR 2
    78 = 0027			P1C3:		.ds	1	;          - COLOR 3
    79 = 0028			MSTAT:		.ds	1	;MARIA STATUS
    80 = 0029			P2C1:		.ds	1	;PALETTE 2 - COLOR 1
    81 = 002A			P2C2:		.ds	1	;          - COLOR 2
    82 = 002B			P2C3:		.ds	1	;          - COLOR 3
    83 = 002C			DPPH:		.ds	1	;DISPLAY LIST LIST POINT HIGH BYTE
    84 = 002D			P3C1:		.ds	1	;PALETTE 3 - COLOR 1
    85 = 002E			P3C2:		.ds	1	;          - COLOR 2
    86 = 002F			P3C3:		.ds	1	;          - COLOR 3
    87 = 0030			DPPL:		.ds	1	;DISPLAY LIST LIST POINT LOW BYTE
    88 = 0031			P4C1:		.ds	1	;PALETTE 4 - COLOR 1
    89 = 0032			P4C2:		.ds	1	;          - COLOR 2
    90 = 0033			P4C3:		.ds	1	;          - COLOR 3
    91 = 0034			CHARBASE:	.ds	1	;CHARACTER BASE ADDRESS
    92 = 0035			P5C1:		.ds	1	;PALETTE 5 - COLOR 1
    93 = 0036			P5C2:		.ds	1	;          - COLOR 2
    94 = 0037			P5C3:		.ds	1	;          - COLOR 3
    95 = 0038			OFFSET:		.ds	1	;FOR FUTURE EXPANSION HERE - STORE ZER0 HERE
    96 = 0039			P6C1:		.ds	1	;PALETTE 6 - COLOR 1
    97 = 003A			P6C2:		.ds	1	;          - COLOR 2
    98 = 003B			P6C3:		.ds	1	;          - COLOR 3
    99 = 003C			CTRL:		.ds	1	;MARIA CONTROL REGISTER
   100 = 003D			P7C1:		.ds	1	;PALETTE 7 - COLOR 1
   101 = 003E			P7C2:		.ds	1	;          - COLOR 2
   102 = 003F			P7C3:		.ds	1	;          - COLOR 3
   103 				*
   104 					ORG     $40
   105 				RANDPTR0:
   106 = 0040				.ds		1
   107 				RANDPTR1:
   108 = 0041				.ds		1
   109
   110 				HISCORE:
   111 = 0042				.ds		4		;HIGH SCORE
   112
   113 				SCORE:
   114 = 0046				.ds		4		;PLAYER ONE SCORE DEC. MODE
   115 				SCORE2:
   116 = 004A				.ds		4		;PLAYER TWO SCORE DEC. MODE
   117 				COMBSCOR:
   118 = 004E				.ds		4		;COMBINED SCORE DEC. MODE
   119
   120 				MENLEFT:
   121 = 0052				.ds		1		;PLAYER1 NUMBER OF MEN LEFT
   122 				MENLEFT2:
   123 = 0053				.ds		1		;PLAYER2 NUMBER OF MEN LEFT
   124 				MENLEFTC:
   125 = 0054				.ds		1		;POOL OF LIVES FOR TEAM PLAY
   126
   127 				TEMP:
   128 = 0055				.ds		16		;GAMEPLAY TEMP
   129 				TEMPI:
   130 = 0065				.ds		5		;LOADER TEMP
   131
   132 				FREE:
   133 = 006A				.ds		12		;FREE POINTERS, NOT FREE SPACE
   134
   135
   136 				FRMCNT:
   137 = 0076				.ds		1
   138 				LASTFRMC:
   139 = 0077				.ds		1
   140
   141 				NMICTRL:
   142 = 0078				.ds		1		;VALUE OF CTRL FOR HSC SPECIAL NMIHNDL
   143
   144 				PLAYER:
   145 = 0079				.ds		1		;WHICH PLAYER
   146 				SCORER:
   147 = 007A				.ds		1		;WHICH PLAYER IS CURRENTLY SCORING
   148 				GAMSTATE:
   149 = 007B				.ds		1		;STATE FOR DRIVER.
   150 				DTIMER:
   151 = 007C				.ds		2		;TIMER FOR DRIVER - TWO BYTES ACCURACY
   152 				STATE:
   153 = 007E				.ds		2		;STATE FOR FSM, ONE FOR EACH PLAYER
   154 				TIMER:
   155 = 0080				.ds		2		;TIMER FOR FSM, ONE FOR EACH PLAYER
   156 				MODE:
   157 = 0082				.ds		1		;GAME MODE: FF = 1PL, 0=2PL, 1=TP, 2=CP
   158 				DIFF:
   159 = 0083				.ds		1		;GAME DIFFICULTY LEVEL
   160 				MAXLVL:
   161 = 0084				.ds		1		;MAXIMIUM LEVEL AT THIS DIFF SETTING
   162 				LVLINC:
   163 = 0085				.ds		4		;INCREMENTS TO LEVEL
   164 				LEVEL:
   165 = 0089				.ds		2
   166 				OFFPLAY2:
   167 = 008B				.ds		1		;OFFSET FOR PLAYER2 DATA SET
   168
   169 				STATUS:
   170 = 008C				.ds		32		;OBJECT STATUS FOR PLAYER1 GAME
   171 				SH2STAT:
   172 = 00AC				.ds		1		;SHIP STATUS FOR 2 PLAYER GAME
   173 				MSGICONS:
   174 = 00AD				.ds		3		;STATUS FOR MESSAGE ICONS
   175 				PARTSTAT:
   176 = 00B0				.ds		8		;STATUS FOR SHIP'S PARTS FOR COLLISIONS
   177
   178 				FIREBUT1:
   179 = 00B8				.ds		1		;SOFT REGISTERS
   180 				FIREBUT2:
   181 = 00B9				.ds		1
   182 				HYPBUT1:
   183 = 00BA				.ds		1
   184 				HYPBUT2:
   185 = 00BB				.ds		1
   186 				STARTBUT:
   187 = 00BC				.ds		1		;FIREBUT1 EXCEPT DURING AUTOST
   188 				SWCHAVAL:
   189 = 00BD				.ds		1
   190 				SWCHBVAL:
   191 = 00BE				.ds		1
   192 				SWCHBITS:
   193 = 00BF				.ds		1
   194 				ONEBUT:
   195 = 00C0				.ds		1		;PLAYER HAS 1 BUTTON JOYSTICK:
   196 									; BIT 4 = P0, BIT 3 = P1
   197
   198 				SHIPDIR:
   199 = 00C1				.ds		1		;PLAYER1 SHIP DIRECTION
   200 				SHIPDIR2:
   201 = 00C2				.ds		1		;PLAYER2 SHIP DIRECTION
   202 				RACKNUM:
   203 = 00C3				.ds		1		;PLAYER1 RACK NUMBER
   204 				RACKNUM2:
   205 = 00C4				.ds		1		;PLAYER2 RACK NUMBER
   206 				ROCKTOT:
   207 = 00C5				.ds		1		;PLAYER1 ROCK TOTAL
   208 				ROCKTOT2:
   209 = 00C6				.ds		1		;PLAYER2 ROCK TOTAL
   210 				STARTNUM:
   211 = 00C7				.ds		2		;STARTING NUMBER OF ROCKS FOR EACH
   212
   213 				BCOUNTER:
   214 = 00C9				.ds		1		;BEAT COUNTER FOR BACKGROUND TUNE
   215 				BEATVAL:
   216 = 00CA				.ds		1		;BEAT VALUE FOR COUNTER, DECREASES
   217 				BEATRATE:
   218 = 00CB				.ds		1		;BEAT RATE, FOR CHANGE OF BEATVAL
   219 				WHICHBT:
   220 = 00CC				.ds		1		;BEAT NUMBER, TOGGLES BETWEEN 0 AND 1
   221 				TUNNUM:
   222 = 00CD				.ds		2		;NUMBER OF TUNE IN EACH CHANNEL
   223 				TINDEX:
   224 = 00CF				.ds		6		;INDEX INTO TUNE TABLE
   225 				TDURCNT:
   226 = 00D5				.ds		6		;TUNE DURATION COUNTERS
   227 = 0065			TTEMP     EQU     TEMPI		;THIS IS PROBABLY SAFE, SINCE TUNER
   228 								; AND LOADER NEVER INTERRUPT EACH OTHER
   229
   230 				FIRESTAT:
   231 = 00DB				.ds		2
   232 				SHOTCNT:
   233 = 00DD				.ds		6		;TIMER FOR ALL SHOTS
   234 				USHOTCNT:
   235 = 00E3				.ds		1		;COUNTDOWN TIMER FOR UFO SHOTS
   236 				RTIMER:
   237 = 00E4				.ds		1		;TIMER FOR UFO ENTRY
   238 				SDELAY:
   239 = 00E5				.ds		1		;PERCENTAGE OF LARGE
   240 				EDELAY:
   241 = 00E6				.ds		1		;COUNTDOWN TIL NEXT
   242 				UFOACC:
   243 = 00E7				.ds		1		;THRESHOLD OF UFO ACCURACY
   244 				SOFTCOLR:
   245 = 00E8				.ds		16		;SOFT COPY OF FIRST 4 PALETTES.
   246
   247 				CLAMP:
   248 = 00F8				.ds		1		;CLAMP, USED BY DAMPING SYSTEM TO
   249 									; STOP DRIFT
   250 				LOADFLAG:
   251 = 00F9				.ds		1		;FLAG CLEARED AT END OF LOADER.
   252
   253 				SELCNT:
   254 = 00FA				.ds		1		;DEBOUNCER/COUNTER FOR MENU SELECT
   255 				RACKDLY:
   256 = 00FB				.ds		1		;TIMER FOR NEW RACK START
   257 				COMPFLAG:
   258 = 00FC				.ds		1		;FLAG FOR COMP PLAY TERMINATION
   259 				RUBFLAG:
   260 = 00FD				.ds		1		;RUBBER SHIP BOUNCE FLAG.
   261 				TURKEY:
   262 = 00FE				.ds		1
   263 				CHICKEN:
   264 = 00FF				.ds		1
   265
   266 				*	PIA AND TIMER (6532) LOCATIONS
   267 				*
   268 					ORG	$280
   269 				*
   270 = 0280			SWCHA:	.ds	1	;LEFT & RIGHT JOYSTICKS
   271 				*
   272 				*	LEFT RITE
   273 				*	7654 3210	;BIT POSITION (=0 IF SWITCH IS CLOSED)
   274 				*	---- ----
   275 				*	RLDU RLDU	;RIGHT/LEFT/DOWN/UP
   276 				*
   277 = 0281			CTLSWA:	.ds	1	;SWCHA DATA DIRECTION (0=INPUT)
   278 				*
   279 = 0282			SWCHB:	.ds	1	;CONSOLE SWITCHES
   280 				*
   281 				*	D7-RITE DIFFICULTY
   282 				*	D6-LEFT DIFFICULTY
   283 				*	D5/D4 NOT USED
   284 				*	D3-PAUSE
   285 				*	D2-NOT USED
   286 				*	D1-GAME SELECT
   287 				*	D0-GAME RESET
   288 				*
   289 = 0283			CTLSWB:	.ds	1	;SWCHB DATA DIRECTION (0=INPUT)
   290 				*
   291 = 0284			INTIM:	.ds	1	;INTERVAL TIMER READ
   292 = 0285				.ds	15
   293 = 0294			TIM1T:	.ds	1	;SET 1    CLK INTERVAL (838   NSEC/INTERVAL)
   294 = 0295			TIM8T:	.ds	1	;SET 8    CLK INTERVAL (6.7   USEC/INTERVAL)
   295 = 0296			TIM64T:	.ds	1	;SET 64   CLK INTERVAL (53.6  USEC/INTERVAL)
   296 = 0297			T1024T:	.ds	1	;SET 1024 CLK INTERVAL (858.2 USEC/INTERVAL)
   297 = 0298				.ds	6
   298 				TIM64TI:
   299 = 029E				.ds	1	;INTERRUPT TIMER 64T
   300 				*
   301 				*
   302 				*
   303 				*
   304 = 0001			RESET	=	1	;bits for consle switches
   305 = 0002			SELECT	=	2
   306 = 0008			PAUSE	=	8
   307
   308 = 1800			RAM1	=	$1800	;FIRST SEGMENT OF MEMORY MINUS THE ZP,STACK, AND CHIPS
   309 = 2100			RAM2	=	$2100	;FIRST SEGMENT OF MEMORY MINUS THE ZP,STACK, AND CHIPS
   310 = 2200			RAM3	=	$2200	;FIRST SEGMENT OF MEMORY MINUS THE ZP,STACK, AND CHIPS
   311 = 0840			R1SIZE	=	($2040-RAM1)	;SIZE OF THE RAM1 BLOCK
   312 = 0040			R2SIZE	=	($2140-RAM2)	;SIZE OF THE RAM2 BLOCK
   313 = 0600			R3SIZE	=	($2800-RAM3)	;SIZE OF THE RAM3 BLOCK
   314
   315 				;	.subttl	"system macros 7800"
   316 				*********************************************************
   317 				*	MARIA MACROS FOR EASIER GRAPHICS CONSTRUCTION	*
   318 				*********************************************************
   319 				*
   320 				*
   321 				*this macro constructs a 4 byte header for display lists
   322 				*
   323 					.macro	header	address,palette,width,hpos
   324 					dc.b	\address & $ff
   325 					dc.b	(\palette*$20) | ($1f & -\width)
   326 					dc.b	\address >> 8
   327 					dc.b	\hpos
   328 					.endm
   329 				;
   330 				;this macro constructs a 5 byte header for display lists
   331 				;
   332 					.macro	xheader	address,palette,width,hpos,wm,ind
   333 				
   334 					dc.b	\address & $ff
   335 					dc.b	((\wm*$80) | $40 | (\ind*$20))
   336 					dc.b	\address >> 8
   337 					dc.b	((\palette*$20) | ($1F & -\width))
   338 					dc.b	\hpos
   339 					.endm
   340
   341 				;
   342 				;this macro constructs a end-of-display-list header
   343 				;
   344 					.macro	nullhdr
   345 				
   346 					dc.b	0,0
   347 					.endm
   348
   349 				;
   350 				;this macro constructs a display list entry for the display list list
   351 				;
   352 					.macro	display	dli,h16,h8,offset,address
   353 				
   354 					dc.b	((\dli*$80) | (\h16*$40) | (\h8*$20) | \offset)
   355 					dc.b	\address >> 8
   356 					dc.b	\address & $ff
   357 					.endm
   358
   359 				;
   360 				;this macro loads a palette register with a color
   361 				;
   362 					.macro	paint	palnum,colornum,color,lum
   363 				
   364 					lda	#(\color*$10) | \lum
   365 					sta	\bkgrnd | ((\palnum*4) | (\colornum))
   366 					.endm
   367
   368 				;
   369 				;this macro writes to the crtl register
   370 				;
   371 = 0000			ckoff	=	$0	;normal color
   372 = 0001			ckon	=	$1	;kill the color
   373
   374 = 0003			dmaoff	=	$3	;turn off dma
   375 = 0002			dmaon	=	$2	;normal dma
   376
   377 = 0000			char1b	=	$0	;one byte character definition
   378 = 0001			char2b	=	$1	;two byte character definition
   379
   380 = 0000			bcoff	=	$0	;black border
   381 = 0001			bcback	=	$1	;background colored border
   382
   383 = 0000			kangoff	=	$0	;transparency
   384 = 0001			kangon	=	$1	;"kangaroo" mode : no transparency!
   385
   386 = 0000			mode1	=	$0	;160x2 or 160x4 modes
   387 = 0002			modebd	=	$2	;320b or 320d modes
   388 = 0003			modeac	=	$3	;320a or 320c modes
   389
   390 					.macro	screen	ck,dma,cw,bc,km,mode
   391 					lda	#((\ck*$80) | (\dma*$20) | (\cw*$10) | (\bc*8) | (\km*4)|\mode)
   392 					sta	CTRL
   393 					.endm
   394
   395 					.macro	dppload	adr
   396 					lda	#\adr & $ff
   397 					sta	DPPL
   398 					sta	sdppl
   399 					lda	#\adr >> 8
   400 					sta	DPPH
   401 					sta	sdpph
   402 					.endm
   403
   404 				;********************************************************
   405 				;	end of the system macros definitions		*
   406 				;********************************************************
   407
    18 				*
    19 				*
    20 				** HSC INTERFACE
    21 = 1E00			HSCRAM    EQU     $1E00
    22 = 3FEB			HSCSETRS  EQU     $3FEB
    23 = 3FF7			HSCSTAT   EQU     $3FF7
    24 = 3FFA			HSCATRCT  EQU     $3FFA
    25 = 3FFD			HSCENTER  EQU     $3FFD
    26
    27 				** IMMEDIATES
    28 = 0007			ICON      EQU     $07
    29 = 0010			SMALL     EQU     $10
    30 = 0021			MEDIUM    EQU     $21
    31 = 0032			LARGE     EQU     $32
    32 = 0023			SHIP      EQU     $23
    33 = 0014			SMALLUFO  EQU     $14
    34 = 0025			LARGEUFO  EQU     $25
    35 = 0006			SHOT      EQU     $06
    36 = 00FF			OPENSHIP  EQU     $FF
    37
    38 = 0000			XPOSMIN   EQU       0
    39 = 009F			XPOSMAX   EQU     159
    40 = 0000			YPOSMIN   EQU       0
    41 = 00BF			YPOSMAX   EQU     191
    42
    43 = 003C			NOVICED   EQU      60
    44 = 005A			TOUGHD    EQU      90
    45 = 006E			EXPERTD   EQU     110
    46
    47 = 0020			MAXVEL    EQU     $20
    48
    49 = 0000			MINDIFF   EQU     $00
    50 = 0003			MAXDIFF   EQU     $03
    51 = 00FF			MINMODE   EQU     $FF
    52 = 0002			MAXMODE   EQU     $02
    53
    54 = 0010			SELDLY    EQU     $10
    55 = 0025			RACKDLYC  EQU     $25
    56
    57 				* EQUATES FOR DRIVER STATE MACHINE.
    58 = 0001			TITLEST   EQU     1
    59 = 0002			MENUST    EQU     2
    60 = 0003			AUTOST    EQU     3
    61 = 0004			HSCST     EQU     4
    62 = 0005			PLAYST    EQU     5
    63 = 0006			PAUZST    EQU     6
    64
    65 = 0000			TITLEONT  EQU     0
    66 = 0002			TITLEOFT  EQU     TITLEONT+$02		;2 * 8.3 = 17 SECONDS
    67
    68 = 0004			AUTOOFFT  EQU     $04
    69
    70 = 0007			MENUOFFT  EQU     $07
    71
    72 				* EQUATES FOR FINITE STATE MACHINE - FSM
    73 = 00FF			DEAD      EQU     $FF
    74 = 0000			OK        EQU     0
    75 = 0001			BIRTH     EQU     1
    76 = 0002			HYPER     EQU     2
    77 = 0003			DEATH     EQU     3
    78 = 0004			COMPOVER  EQU     4
    79
    80 = 0001			ENTERT    EQU     1
    81 = 0029			RESINT    EQU     ENTERT+$28
    82 = 0051			PMSGOFFT  EQU     RESINT+$28
    83 = 0079			PMSGT     EQU     PMSGOFFT+$28
    84
    85 = 0001			HYPENDT   EQU     1
    86 = 0029			HYPERT    EQU     HYPENDT+$28
    87
    88 = 0001			NEWGAMET  EQU     1
    89 = 0061			GOVERT    EQU     NEWGAMET+$60
    90 = 0071			POMSGOFT  EQU     GOVERT+$10
    91 = 00A1			POMSGT    EQU     POMSGOFT+$30
    92 = 00A6			SWITCHT   EQU     POMSGT+$5
    93 = 00B6			DIET      EQU     SWITCHT+$10
    94
    95 				* 6116 RAM WHICH IS >ON< ZERO PAGE:
    96
    97 				/*
    98
    99 					ORG     $40
   100 				RANDPTR0:
   101 					.ds		1
   102 				RANDPTR1:
   103 					.ds		1
   104
   105 				HISCORE:
   106 					.ds		4		;HIGH SCORE
   107
   108 				SCORE:
   109 					.ds		4		;PLAYER ONE SCORE DEC. MODE
   110 				SCORE2:
   111 					.ds		4		;PLAYER TWO SCORE DEC. MODE
   112 				COMBSCOR:
   113 					.ds		4		;COMBINED SCORE DEC. MODE
   114
   115 				MENLEFT:
   116 					.ds		1		;PLAYER1 NUMBER OF MEN LEFT
   117 				MENLEFT2:
   118 					.ds		1		;PLAYER2 NUMBER OF MEN LEFT
   119 				MENLEFTC:
   120 					.ds		1		;POOL OF LIVES FOR TEAM PLAY
   121
   122 				TEMP:
   123 					.ds		16		;GAMEPLAY TEMP
   124 				TEMPI:
   125 					.ds		5		;LOADER TEMP
   126
   127 				FREE:
   128 					.ds		12		;FREE POINTERS, NOT FREE SPACE
   129
   130
   131 				FRMCNT:
   132 					.ds		1
   133 				LASTFRMC:
   134 					.ds		1
   135
   136 				NMICTRL:
   137 					.ds		1		;VALUE OF CTRL FOR HSC SPECIAL NMIHNDL
   138
   139 				PLAYER:
   140 					.ds		1		;WHICH PLAYER
   141 				SCORER:
   142 					.ds		1		;WHICH PLAYER IS CURRENTLY SCORING
   143 				GAMSTATE:
   144 					.ds		1		;STATE FOR DRIVER.
   145 				DTIMER:
   146 					.ds		2		;TIMER FOR DRIVER - TWO BYTES ACCURACY
   147 				STATE:
   148 					.ds		2		;STATE FOR FSM, ONE FOR EACH PLAYER
   149 				TIMER:
   150 					.ds		2		;TIMER FOR FSM, ONE FOR EACH PLAYER
   151 				MODE:
   152 					.ds		1		;GAME MODE: FF = 1PL, 0=2PL, 1=TP, 2=CP
   153 				DIFF:
   154 					.ds		1		;GAME DIFFICULTY LEVEL
   155 				MAXLVL:
   156 					.ds		1		;MAXIMIUM LEVEL AT THIS DIFF SETTING
   157 				LVLINC:
   158 					.ds		4		;INCREMENTS TO LEVEL
   159 				LEVEL:
   160 					.ds		2
   161 				OFFPLAY2:
   162 					.ds		1		;OFFSET FOR PLAYER2 DATA SET
   163
   164 				STATUS:
   165 					.ds		32		;OBJECT STATUS FOR PLAYER1 GAME
   166 				SH2STAT:
   167 					.ds		1		;SHIP STATUS FOR 2 PLAYER GAME
   168 				MSGICONS:
   169 					.ds		3		;STATUS FOR MESSAGE ICONS
   170 				PARTSTAT:
   171 					.ds		8		;STATUS FOR SHIP'S PARTS FOR COLLISIONS
   172
   173 				FIREBUT1:
   174 					.ds		1		;SOFT REGISTERS
   175 				FIREBUT2:
   176 					.ds		1
   177 				HYPBUT1:
   178 					.ds		1
   179 				HYPBUT2:
   180 					.ds		1
   181 				STARTBUT:
   182 					.ds		1		;FIREBUT1 EXCEPT DURING AUTOST
   183 				SWCHAVAL:
   184 					.ds		1
   185 				SWCHBVAL:
   186 					.ds		1
   187 				SWCHBITS:
   188 					.ds		1
   189 				ONEBUT:
   190 					.ds		1		;PLAYER HAS 1 BUTTON JOYSTICK:
   191 									; BIT 4 = P0, BIT 3 = P1
   192
   193 				SHIPDIR:
   194 					.ds		1		;PLAYER1 SHIP DIRECTION
   195 				SHIPDIR2:
   196 					.ds		1		;PLAYER2 SHIP DIRECTION
   197 				RACKNUM:
   198 					.ds		1		;PLAYER1 RACK NUMBER
   199 				RACKNUM2:
   200 					.ds		1		;PLAYER2 RACK NUMBER
   201 				ROCKTOT:
   202 					.ds		1		;PLAYER1 ROCK TOTAL
   203 				ROCKTOT2:
   204 					.ds		1		;PLAYER2 ROCK TOTAL
   205 				STARTNUM:
   206 					.ds		2		;STARTING NUMBER OF ROCKS FOR EACH
   207
   208 				BCOUNTER:
   209 					.ds		1		;BEAT COUNTER FOR BACKGROUND TUNE
   210 				BEATVAL:
   211 					.ds		1		;BEAT VALUE FOR COUNTER, DECREASES
   212 				BEATRATE:
   213 					.ds		1		;BEAT RATE, FOR CHANGE OF BEATVAL
   214 				WHICHBT:
   215 					.ds		1		;BEAT NUMBER, TOGGLES BETWEEN 0 AND 1
   216 				TUNNUM:
   217 					.ds		2		;NUMBER OF TUNE IN EACH CHANNEL
   218 				TINDEX:
   219 					.ds		6		;INDEX INTO TUNE TABLE
   220 				TDURCNT:
   221 					.ds		6		;TUNE DURATION COUNTERS
   222 				TTEMP     EQU     TEMPI		;THIS IS PROBABLY SAFE, SINCE TUNER
   223 								; AND LOADER NEVER INTERRUPT EACH OTHER
   224
   225 				FIRESTAT:
   226 					.ds		2
   227 				SHOTCNT:
   228 					.ds		6		;TIMER FOR ALL SHOTS
   229 				USHOTCNT:
   230 					.ds		1		;COUNTDOWN TIMER FOR UFO SHOTS
   231 				RTIMER:
   232 					.ds		1		;TIMER FOR UFO ENTRY
   233 				SDELAY:
   234 					.ds		1		;PERCENTAGE OF LARGE
   235 				EDELAY:
   236 					.ds		1		;COUNTDOWN TIL NEXT
   237 				UFOACC:
   238 					.ds		1		;THRESHOLD OF UFO ACCURACY
   239 				SOFTCOLR:
   240 					.ds		16		;SOFT COPY OF FIRST 4 PALETTES.
   241
   242 				CLAMP:
   243 					.ds		1		;CLAMP, USED BY DAMPING SYSTEM TO
   244 									; STOP DRIFT
   245 				LOADFLAG:
   246 					.ds		1		;FLAG CLEARED AT END OF LOADER.
   247
   248 				SELCNT:
   249 					.ds		1		;DEBOUNCER/COUNTER FOR MENU SELECT
   250 				RACKDLY:
   251 					.ds		1		;TIMER FOR NEW RACK START
   252 				COMPFLAG:
   253 					.ds		1		;FLAG FOR COMP PLAY TERMINATION
   254 				RUBFLAG:
   255 					.ds		1		;RUBBER SHIP BOUNCE FLAG.
   256 				TURKEY:
   257 					.ds		1
   258 				CHICKEN:
   259 					.ds		1
   260
   261 				*/
   261
   262
   263
   264 				* 6116 RAM WHICH IS >NOT< ON ZERO PAGE:
   265 					org     $1800
   266 				STATUS2:
   267 = 1800				.ds		32		;OBJECT STATUS FOR TWOPLAYER GAME
   268 				**			;$20 LONG ARRAYS FOR STATE VARIABLES
   269 				**			;OF EACH OBJECT
   270
   271 				XVELL:
   272 = 1820				.ds		$20		;LOW BYTE X VELOCITY
   273 				XVELLP2:
   274 = 1840				.ds		1		;SECOND PLAYER FOR TEAM PLAY
   275
   276 				XVELH:
   277 = 1841				.ds		$20		;HIGH BYTE X VELOCITY
   278 				XVELHP2:
   279 = 1861				.ds		1
   280
   281 				YVELL:
   282 = 1862				.ds		$20		;LOW BYTE Y VELOCITY
   283 				YVELLP2:
   284 = 1882				.ds		1
   285
   286 				YVELH:
   287 = 1883				.ds		$20		;HIGH BYTE Y VELOCITY
   288 				YVELHP2:
   289 = 18A3				.ds		1
   290
   291 				XPOSH:
   292 = 18A4				.ds		$20		;HIGH BYTE X POSITION
   293 				XPOSHP2:
   294 = 18C4				.ds		1
   295 = 18C5				.ds		3
   296
   297 				YPOSH:
   298 = 18C8				.ds		$20		;HIGH BYTE Y POSITION
   299 				YPOSHP2:
   300 = 18E8				.ds		1
   301 = 18E9				.ds		3
   302
   303 				XPOSL:
   304 = 18EC				.ds		$20		;LOW BYTE X POSITION
   305 				XPOSLP2:
   306 = 190C				.ds		1
   307
   308 				YPOSL:
   309 = 190D				.ds		$20		;LOW BYTE Y POSITION
   310 				YPOSLP2:
   311 = 192D				.ds		1
   312
   313 				ACYC:
   314 = 192E				.ds		$20		;LOW BYTE STAMP ADDR
   315 				ACYCP2:
   316 = 194E				.ds		1
   317 = 194F				.ds		3
   318 = 1946			ANIMAT	EQU		ACYC+24
   319 				ACYC2:
   320 = 1952				.ds		$20
   321 				COLXPOSH:
   322 = 1972				.ds		$20
   323 				COLXP2:
   324 = 1992				.ds		1
   325 = 1993				.ds		3
   326 				PARTPOSX:
   327 = 1996				.ds		8
   328 				COLYPOSH:
   329 = 199E				.ds		$20
   330 				COLYP2:
   331 = 19BE				.ds		1
   332 = 19BF				.ds		3
   333 				PARTPOSY:
   334 = 19C2				.ds		8
   335
   336 				XVELH2:
   337 = 19CA				.ds		$20
   338 				YVELH2:
   339 = 19EA				.ds		$20
   340 				XPOSH2:
   341 = 1A0A				.ds		$20
   342 				YPOSH2:
   343 = 1A2A				.ds		$20
   344 				XVELL2:
   345 = 1A4A				.ds		$20
   346 				YVELL2:
   347 = 1A6A				.ds		$20
   348
   349 				TDURTAB:
   350 = 1A8A				.ds		6		;TUNE DURATIONS
   351
   352 				MINXVEL:
   353 = 1A90				.ds		1		;MINIMUM ROCK VELOCITIES
   354 				MINYVEL:
   355 = 1A91				.ds		1		; INCREASE AS DIFFICULTY
   356 				XVELLL:
   357 = 1A92				.ds		1		;LOW,LOW BYTE OF VELOCITY
   358 				XVELLL2:
   359 = 1A93				.ds		1		; USED BY DAMPING SYSTEM TO
   360 				YVELLL:
   361 = 1A94				.ds		1		; MAINTAIN SMOOTH, EXPONENTIAL
   362 				YVELLL2:
   363 = 1A95				.ds		1		; DECELLERATION AT LOW VELOCITIES.
   364
   365 				BLANKDL:
   366 = 1A96				.ds		2		;DUMMY DISPLAY LIST: GETS ZEROED
   367 				DLL:
   368 = 1A98				.ds		$33		;DISPLAY LIST LIST: COPY OF DLLTAB
   369 				PALS:
   370 = 1ACB				.ds		33		;SOFTWARE COPY OF PALETTE/WIDTH INFO
   371 = 1AEC				.ds		3
   372 				PALS2:
   373 = 1AEF				.ds		23		;TEMP COPY
   374
   375 				FLASH:
   376 = 1B06				.ds		1		;KLUDGE FLAG FOR OUT REZZING
   377 				GOATMILK:
   378 = 1B07				.ds		1		;WHAT ELSE A FLAG
   379
   380 				CHARMAPS:
   381 = 1B08				.ds		0
   382 				SCORMAP1:
   383 = 1B08				.ds		16		;CHARACTER MAP FOR PLAYER1 SCORE
   384 				SCORMAP2:
   385 = 1B18				.ds		16		;CHARACTER MAP FOR PLAYER2 SCORE
   386 				SCORECMC:
   387 = 1B28				.ds		16		;CHARACTER MAP FOR COMBO SCORE
   388 				SCORCMHS:
   389 = 1B38				.ds		8		;CHARACTER MAP FOR HIGH SCORE
   390
   391 				* RANDOM NUMBER ARRAY (NOT CLEARED EVER)
   392 					org     $2100
   393 				RAND:
   394 = 2100				.ds		55
   395
   396 				* DISPLAY LISTS:
   397 					org     $2200
   398 				DISPLIST:
   399 = 2200				.ds		0
   400 				GAMEDL12:
   401 = 2200				.ds		$80		;START OF DISPLAY LISTS, 12 TOTAL
   402 				GAMEDL11:
   403 = 2280				.ds		$80
   404 				GAMEDL10:
   405 = 2300				.ds		$80
   406 				GAMEDL09:
   407 = 2380				.ds		$80
   408 				GAMEDL08:
   409 = 2400				.ds		$80
   410 				GAMEDL07:
   411 = 2480				.ds		$80
   412 				GAMEDL06:
   413 = 2500				.ds		$80
   414 				GAMEDL05:
   415 = 2580				.ds		$80
   416 				GAMEDL04:
   417 = 2600				.ds		$80
   418 				GAMEDL03:
   419 = 2680				.ds		$80
   420 				GAMEDL02:
   421 = 2700				.ds		$80
   422 				GAMEDL01:
   423 = 2780				.ds		$80
   424 				ENDLIST:
   425 = 2800				.ds		$0
   426
   427 = 189B			YVELH24   EQU     YVELH+24
   428 = 187A			YVELL24   EQU     YVELL+24
   429 = 1859			XVELH24   EQU     XVELH+24
   430 = 1838			XVELL24   EQU     XVELL+24
   431 = 18E0			YPOSH24   EQU     YPOSH+24
   432 = 1925			YPOSL24   EQU     YPOSL+24
   433 = 18BC			XPOSH24   EQU     XPOSH+24
   434 = 1904			XPOSL24   EQU     XPOSL+24
   435
    14
    15 					org $C000-128
    16 BF80 04			        .byte    4  			; 0   Header version     - 1 byte
    17 BF81 41 54 41 52 49 37 +         .by    "ATARI7800       "	; 1..16  "ATARI7800   "  - 16 bytes
    18 BF91 20 4D 61 64 73 20 +         .by    " Mads Asteroid  "	; 17..48 Cart title      - 32 bytes
    19 BFA1 20 20 32 30 32 35 +         .by    "  2025 EAGLE    "	; 2 line
    20 BFB1 00 00 40 00		        DTA r	($4000)				; 49..52 data length      - 4 bytes (Big-endian format)
    21 BFB5 00 00		        .byte    $00,$00 			; 53..54 cart type      - 2 bytes
    22 BFB7 01			        .byte     1  ; 55   controller 1 type  - 1 byte
    23 BFB8 01			        .byte     1  ; 56   controller 2 type  - 1 byte
    24 BFB9 00			        .byte    0  ; 57 0 = NTSC 1 = PAL
    25 BFBA 00			        .byte    0  ; 58   Save data peripheral - 1 byte (version 2)
    26 BFBB 00 00 00 00		        .byte 0,0,0,0	;ORG     HEADER+63
    27 BFBF 00			        .byte    0  ; 63   Expansion module
    28 BFC0 00 00 00 00 00 00 +  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    29 BFD2 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    30 BFE4 41 43 54 55 41 4C +         .by    "ACTUAL CART DATA STARTS HERE"
    31
    32 C000				icl	"STAMPS.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\STAMPS.asm
     1 				*         2010    201283
     2 				*
     3 				** STAMPS.S **
     4 				** ASTEROIDS FOR THE ATARI 3600 **
     5 				** UNCONVERTED GRAPHICS DATA. **
     6 				** SWITCHED NOW FOR MARIA2. **
     7
     8
     9 				* START OF GRAPHICS DATA *
    10 C000				ORG	$C000
    11 = C000			GRAPHICS  EQU	*
    12
    13 = B000			STAMPS    EQU     GRAPHICS-$1000	;ODD 4K PAGE BOUNDARY FOR HOLY DMA
    14
    15 								;1
    16 				********************************************************************************
    17 C000 03 FC 00			.byte	$03,$FC,$00	;ROCK1L
    18 C003 03 FC 00			.byte	$03,$FC,$00
    19 C006 03 FC 00			.byte	$03,$FC,$00
    20 C009 03 FC 00			.byte	$03,$FC,$00
    21 C00C 03 FC 00			.byte	$03,$FC,$00
    22 C00F 03 FC 00			.byte	$03,$FC,$00
    23 C012 03 FC 00			.byte	$03,$FC,$00
    24 C015 03 FC 00			.byte	$03,$FC,$00
    25 C018 03 FC 00			.byte	$03,$FC,$00
    26 C01B 03 FC 00			.byte	$03,$FC,$00
    27 C01E 03 FC 00			.byte	$03,$FC,$00
    28 C021 03 FC 00			.byte	$03,$FC,$00
    29 C024 03 FC 00			.byte	$03,$FC,$00	;ROCK2L
    30 C027 03 FC 00			.byte	$03,$FC,$00
    31 C02A 03 FC 00			.byte	$03,$FC,$00
    32 C02D 03 FC 00			.byte	$03,$FC,$00
    33 C030 03 FC 00			.byte	$03,$FC,$00
    34 C033 03 FC 00			.byte	$03,$FC,$00
    35 C036 03 FC 00			.byte	$03,$FC,$00
    36 C039 03 FC 00			.byte	$03,$FC,$00
    37 C03C 03 FC 00			.byte	$03,$FC,$00
    38 C03F 03 FC 00			.byte	$03,$FC,$00
    39 C042 03 FC 00			.byte	$03,$FC,$00
    40 C045 03 FC 00			.byte	$03,$FC,$00
    41 C048 00 F0 00			.byte	$00,$F0,$00	;ROCK3L
    42 C04B 00 F0 00			.byte	$00,$F0,$00
    43 C04E 00 F0 00			.byte	$00,$F0,$00
    44 C051 00 F0 00			.byte	$00,$F0,$00
    45 C054 00 F0 00			.byte	$00,$F0,$00
    46 C057 00 F0 00			.byte	$00,$F0,$00
    47 C05A 00 F0 00			.byte	$00,$F0,$00
    48 C05D 00 F0 00			.byte	$00,$F0,$00
    49 C060 00 F0 00			.byte	$00,$F0,$00
    50 C063 00 F0 00			.byte	$00,$F0,$00
    51 C066 00 F0 00			.byte	$00,$F0,$00
    52 C069 00 F0 00			.byte	$00,$F0,$00
    53 C06C 00 00 00			.byte	$00,$00,$00	;ROCKEL
    54 C06F 00 23 00			.byte	$00,$23,$00
    55 C072 00 10 00			.byte	$00,$10,$00
    56 C075 00 08 00			.byte	$00,$08,$00
    57 C078 00 20 00			.byte	$00,$20,$00
    58 C07B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK1M
    59 C08B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK2M
    60 C09B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK3M
    61 C0AB 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0		;ROCKEM
    62 C0B5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;SHIP
    63 C0C5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    64 C0D5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;SHIPE
    65 C0E1 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;UFO
    66 C0ED 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    67
    68 C100				ORG     GRAPHICS+$100			;2
    69 				********************************************************************************
    70 C100 0F AA 00			.byte	$0F,$AA,$00	;ROCK1L
    71 C103 0F AA 00			.byte	$0F,$AA,$00
    72 C106 0F AA 00			.byte	$0F,$AA,$00
    73 C109 0F AB 00			.byte	$0F,$AB,$00
    74 C10C 0F AF 00			.byte	$0F,$AF,$00
    75 C10F 0F B6 00			.byte	$0F,$B6,$00
    76 C112 0F AA 00			.byte	$0F,$AA,$00
    77 C115 0F 6A 00			.byte	$0F,$6A,$00
    78 C118 0F AB 00			.byte	$0F,$AB,$00
    79 C11B 0F AD 00			.byte	$0F,$AD,$00
    80 C11E 0F AD 00			.byte	$0F,$AD,$00
    81 C121 0F B5 00			.byte	$0F,$B5,$00
    82 C124 0F EA 00			.byte	$0F,$EA,$00	;ROCK2L
    83 C127 0F DA 00			.byte	$0F,$DA,$00
    84 C12A 0F E9 00			.byte	$0F,$E9,$00
    85 C12D 0F E9 00			.byte	$0F,$E9,$00
    86 C130 0F EA 00			.byte	$0F,$EA,$00
    87 C133 0F F5 00			.byte	$0F,$F5,$00
    88 C136 0F B9 00			.byte	$0F,$B9,$00
    89 C139 0F EB 00			.byte	$0F,$EB,$00
    90 C13C 0F FA 00			.byte	$0F,$FA,$00
    91 C13F 0F E9 00			.byte	$0F,$E9,$00
    92 C142 0F E9 00			.byte	$0F,$E9,$00
    93 C145 0F EA 00			.byte	$0F,$EA,$00
    94 C148 0F FF 00			.byte	$0F,$FF,$00	;ROCK3L
    95 C14B 0F FF 00			.byte	$0F,$FF,$00
    96 C14E 0F FF 00			.byte	$0F,$FF,$00
    97 C151 0F FF 00			.byte	$0F,$FF,$00
    98 C154 0F FF 00			.byte	$0F,$FF,$00
    99 C157 0F FE 00			.byte	$0F,$FE,$00
   100 C15A 0F BF 00			.byte	$0F,$BF,$00
   101 C15D 0F FF 00			.byte	$0F,$FF,$00
   102 C160 0F FF 00			.byte	$0F,$FF,$00
   103 C163 0F FF 00			.byte	$0F,$FF,$00
   104 C166 0F FF 00			.byte	$0F,$FF,$00
   105 C169 0F FF 00			.byte	$0F,$FF,$00
   106 C16C 00 00 00			.byte	$00,$00,$00	;ROCKEL
   107 C16F 00 10 00			.byte	$00,$10,$00
   108 C172 00 08 00			.byte	$00,$08,$00
   109 C175 08 10 40			.byte	$08,$10,$40
   110 C178 23 04 00			.byte	$23,$04,$00
   111 C17B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK1M
   112 C18B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK2M
   113 C19B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK3M
   114 C1AB 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0		;ROCKEM
   115 C1B5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;SHIP
   116 C1C5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   117 C1D5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;SHIPE
   118 C1E1 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;UFO
   119 C1ED 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   120
   121 C200				ORG     GRAPHICS+$200			;3
   122 				********************************************************************************
   123 C200 0F F6 00			.byte	$0F,$F6,$00	;ROCK1L
   124 C203 0F A5 00			.byte	$0F,$A5,$00
   125 C206 0F A5 00			.byte	$0F,$A5,$00
   126 C209 0F A5 00			.byte	$0F,$A5,$00
   127 C20C 0F AF 00			.byte	$0F,$AF,$00
   128 C20F 0F BF 00			.byte	$0F,$BF,$00
   129 C212 0F D5 00			.byte	$0F,$D5,$00
   130 C215 0D A5 00			.byte	$0D,$A5,$00
   131 C218 0F 99 00			.byte	$0F,$99,$00
   132 C21B 0E 9D 00			.byte	$0E,$9D,$00
   133 C21E 0F B5 00			.byte	$0F,$B5,$00
   134 C221 0F B7 00			.byte	$0F,$B7,$00
   135 C224 0F A5 00			.byte	$0F,$A5,$00	;ROCK2L
   136 C227 0F A5 00			.byte	$0F,$A5,$00
   137 C22A 0F A9 00			.byte	$0F,$A9,$00
   138 C22D 0F A9 00			.byte	$0F,$A9,$00
   139 C230 0F A5 00			.byte	$0F,$A5,$00
   140 C233 0F B9 00			.byte	$0F,$B9,$00
   141 C236 0F AD 00			.byte	$0F,$AD,$00
   142 C239 0F A5 00			.byte	$0F,$A5,$00
   143 C23C 0F A9 00			.byte	$0F,$A9,$00
   144 C23F 0F A6 00			.byte	$0F,$A6,$00
   145 C242 0F AA 00			.byte	$0F,$AA,$00
   146 C245 0F 95 00			.byte	$0F,$95,$00
   147 C248 0F AA 00			.byte	$0F,$AA,$00	;ROCK3L
   148 C24B 0F AA 00			.byte	$0F,$AA,$00
   149 C24E 0F AA 00			.byte	$0F,$AA,$00
   150 C251 0F AA 00			.byte	$0F,$AA,$00
   151 C254 0F AA 00			.byte	$0F,$AA,$00
   152 C257 0F A6 C0			.byte	$0F,$A6,$C0
   153 C25A 0F DE 00			.byte	$0F,$DE,$00
   154 C25D 0F BA 00			.byte	$0F,$BA,$00
   155 C260 0E AA 00			.byte	$0E,$AA,$00
   156 C263 0F AA 00			.byte	$0F,$AA,$00
   157 C266 0F AA 00			.byte	$0F,$AA,$00
   158 C269 0F AA 00			.byte	$0F,$AA,$00
   159 C26C 00 01 00			.byte	$00,$01,$00	;ROCKEL
   160 C26F 00 10 90			.byte	$00,$10,$90
   161 C272 00 20 08			.byte	$00,$20,$08
   162 C275 08 10 40			.byte	$08,$10,$40
   163 C278 00 00 00			.byte	$00,$00,$00
   164 C27B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK1M
   165 C28B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK2M
   166 C29B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK3M
   167 C2AB 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0		;ROCKEM
   168 C2B5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;SHIP
   169 C2C5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   170 C2D5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;SHIPE
   171 C2E1 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;UFO
   172 C2ED 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   173
   174 C300				ORG     GRAPHICS+$300			;4
   175 				********************************************************************************
   176 C300 3F 55 80			.byte	$3F,$55,$80	;ROCK1L
   177 C303 3E 95 40			.byte	$3E,$95,$40
   178 C306 3E 95 80			.byte	$3E,$95,$80
   179 C309 3E 95 40			.byte	$3E,$95,$40
   180 C30C 3E A5 40			.byte	$3E,$A5,$40
   181 C30F 3E BD 40			.byte	$3E,$BD,$40
   182 C312 3E FD 40			.byte	$3E,$FD,$40
   183 C315 3F 56 40			.byte	$3F,$56,$40
   184 C318 3E 95 40			.byte	$3E,$95,$40
   185 C31B 3E A5 C0			.byte	$3E,$A5,$C0
   186 C31E 3E B5 40			.byte	$3E,$B5,$40
   187 C321 3E D6 80			.byte	$3E,$D6,$80
   188 C324 3F 99 40			.byte	$3F,$99,$40	;ROCK2L
   189 C327 3F 69 40			.byte	$3F,$69,$40
   190 C32A 3E A5 40			.byte	$3E,$A5,$40
   191 C32D 3E 95 40			.byte	$3E,$95,$40
   192 C330 3E 95 40			.byte	$3E,$95,$40
   193 C333 3E A5 40			.byte	$3E,$A5,$40
   194 C336 3E ED 40			.byte	$3E,$ED,$40
   195 C339 3E 95 C0			.byte	$3E,$95,$C0
   196 C33C 3E A5 40			.byte	$3E,$A5,$40
   197 C33F 3F A5 40			.byte	$3F,$A5,$40
   198 C342 3E A5 40			.byte	$3E,$A5,$40
   199 C345 3E 95 40			.byte	$3E,$95,$40
   200 C348 3E 96 80			.byte	$3E,$96,$80	;ROCK3L
   201 C34B 3E 96 80			.byte	$3E,$96,$80
   202 C34E 3E 96 80			.byte	$3E,$96,$80
   203 C351 3E 96 80			.byte	$3E,$96,$80
   204 C354 3E 95 C0			.byte	$3E,$95,$C0
   205 C357 3E 9F C0			.byte	$3E,$9F,$C0
   206 C35A 3E 75 80			.byte	$3E,$75,$80
   207 C35D 3F D6 80			.byte	$3F,$D6,$80
   208 C360 3B 96 80			.byte	$3B,$96,$80
   209 C363 3E 96 80			.byte	$3E,$96,$80
   210 C366 3E 96 80			.byte	$3E,$96,$80
   211 C369 3E 96 80			.byte	$3E,$96,$80
   212 C36C 00 20 00			.byte	$00,$20,$00	;ROCKEL
   213 C36F 04 14 40			.byte	$04,$14,$40
   214 C372 01 29 10			.byte	$01,$29,$10
   215 C375 01 04 48			.byte	$01,$04,$48
   216 C378 00 40 00			.byte	$00,$40,$00
   217 C37B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK1M
   218 C38B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK2M
   219 C39B 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	;ROCK3M
   220 C3AB 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0		;ROCKEM
   221 C3B5 01 00			.byte	$01,$00				;SHIP
   222 C3B7 04 00			.byte	$04,$00
   223 C3B9 00 00			.byte	$00,$00
   224 C3BB 00 00			.byte	$00,$00
   225 C3BD 00 00			.byte	$00,$00
   226 C3BF 00 00			.byte	$00,$00
   227 C3C1 00 00			.byte	$00,$00
   228 C3C3 00 00			.byte	$00,$00
   229 C3C5 00 00			.byte	$00,$00
   230 C3C7 00 00			.byte	$00,$00
   231 C3C9 00 00			.byte	$00,$00
   232 C3CB 00 00			.byte	$00,$00
   233 C3CD 00 00			.byte	$00,$00
   234 C3CF 00 00			.byte	$00,$00
   235 C3D1 00 00			.byte	$00,$00
   236 C3D3 00 40			.byte	$00,$40
   237 C3D5 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;SHIPE
   238 C3E1 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;UFO
   239 C3ED 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   240
   241 C400				ORG     GRAPHICS+$400	;5
   242 				********************************************************************************
   243 C400 3F 75 40			.byte	$3F,$75,$40	;ROCK1L
   244 C403 3F 99 40			.byte	$3F,$99,$40
   245 C406 3E 95 40			.byte	$3E,$95,$40
   246 C409 3E 65 40			.byte	$3E,$65,$40
   247 C40C 3E 95 40			.byte	$3E,$95,$40
   248 C40F 3E 55 40			.byte	$3E,$55,$40
   249 C412 3E F6 40			.byte	$3E,$F6,$40
   250 C415 3F F5 40			.byte	$3F,$F5,$40
   251 C418 3E 55 40			.byte	$3E,$55,$40
   252 C41B 3E 95 40			.byte	$3E,$95,$40
   253 C41E 3E 57 C0			.byte	$3E,$57,$C0
   254 C421 3E D6 80			.byte	$3E,$D6,$80
   255 C424 3E A5 40			.byte	$3E,$A5,$40	;ROCK2L
   256 C427 3F A5 40			.byte	$3F,$A5,$40
   257 C42A 3F 99 40			.byte	$3F,$99,$40
   258 C42D 3E 65 40			.byte	$3E,$65,$40
   259 C430 3E 55 40			.byte	$3E,$55,$40
   260 C433 3E 95 40			.byte	$3E,$95,$40
   261 C436 3E 95 80			.byte	$3E,$95,$80
   262 C439 3E 55 C0			.byte	$3E,$55,$C0
   263 C43C 3E 55 40			.byte	$3E,$55,$40
   264 C43F 3F 95 40			.byte	$3F,$95,$40
   265 C442 3E D5 40			.byte	$3E,$D5,$40
   266 C445 3E 55 40			.byte	$3E,$55,$40
   267 C448 3E 95 40			.byte	$3E,$95,$40	;ROCK3L
   268 C44B 3E 55 40			.byte	$3E,$55,$40
   269 C44E 3E 55 80			.byte	$3E,$55,$80
   270 C451 3E 55 C0			.byte	$3E,$55,$C0
   271 C454 3A 55 80			.byte	$3A,$55,$80
   272 C457 3A D7 40			.byte	$3A,$D7,$40
   273 C45A 3A 95 40			.byte	$3A,$95,$40
   274 C45D 39 D5 40			.byte	$39,$D5,$40
   275 C460 2E 55 40			.byte	$2E,$55,$40
   276 C463 3E 55 40			.byte	$3E,$55,$40
   277 C466 3E 55 40			.byte	$3E,$55,$40
   278 C469 3E 55 40			.byte	$3E,$55,$40
   279 C46C 00 38 80			.byte	$00,$38,$80	;ROCKEL
   280 C46F 10 94 80			.byte	$10,$94,$80
   281 C472 80 51 50			.byte	$80,$51,$50
   282 C475 03 49 00			.byte	$03,$49,$00
   283 C478 00 01 00			.byte	$00,$01,$00
   284 C47B 03 F0			.byte	$03,$F0		;ROCK1M
   285 C47D 00 F0			.byte	$00,$F0
   286 C47F 00 F0			.byte	$00,$F0
   287 C481 00 F0			.byte	$00,$F0
   288 C483 03 F0			.byte	$03,$F0
   289 C485 03 F0			.byte	$03,$F0
   290 C487 03 F0			.byte	$03,$F0
   291 C489 00 F0			.byte	$00,$F0
   292 C48B 0F F0			.byte	$0F,$F0		;ROCK2M
   293 C48D 0F F0			.byte	$0F,$F0
   294 C48F 0E F0			.byte	$0E,$F0
   295 C491 0F F0			.byte	$0F,$F0
   296 C493 0F F0			.byte	$0F,$F0
   297 C495 03 F0			.byte	$03,$F0
   298 C497 03 F0			.byte	$03,$F0
   299 C499 03 F0			.byte	$03,$F0
   300 C49B 0F F0			.byte	$0F,$F0		;ROCK3M
   301 C49D 0F F0			.byte	$0F,$F0
   302 C49F 0F F0			.byte	$0F,$F0
   303 C4A1 0F F0			.byte	$0F,$F0
   304 C4A3 0F F0			.byte	$0F,$F0
   305 C4A5 0F F0			.byte	$0F,$F0
   306 C4A7 0F F0			.byte	$0F,$F0
   307 C4A9 0F F0			.byte	$0F,$F0
   308 C4AB 00 00			.byte	$00,$00		;ROCKEM
   309 C4AD 00 00			.byte	$00,$00
   310 C4AF 00 00			.byte	$00,$00
   311 C4B1 00 00			.byte	$00,$00
   312 C4B3 04 20			.byte	$04,$20
   313 C4B5 01 00			.byte	$01,$00		;SHIP
   314 C4B7 04 80			.byte	$04,$80
   315 C4B9 02 00			.byte	$02,$00
   316 C4BB 00 00			.byte	$00,$00
   317 C4BD 00 00			.byte	$00,$00
   318 C4BF 00 00			.byte	$00,$00
   319 C4C1 00 00			.byte	$00,$00
   320 C4C3 00 00			.byte	$00,$00
   321 C4C5 02 00			.byte	$02,$00
   322 C4C7 00 00			.byte	$00,$00
   323 C4C9 00 00			.byte	$00,$00
   324 C4CB 00 00			.byte	$00,$00
   325 C4CD 00 00			.byte	$00,$00
   326 C4CF 00 00			.byte	$00,$00
   327 C4D1 02 00			.byte	$02,$00
   328 C4D3 08 40			.byte	$08,$40
   329 C4D5 00 00			.byte	$00,$00		;SHIPE
   330 C4D7 00 00			.byte	$00,$00
   331 C4D9 00 00			.byte	$00,$00
   332 C4DB 00 02			.byte	$00,$02
   333 C4DD 00 00			.byte	$00,$00
   334 C4DF 00 00			.byte	$00,$00
   335 C4E1 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0	;UFOL
   336 C4E9 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   337
   338 C500				ORG     GRAPHICS+$500	;6
   339 				********************************************************************************
   340 C500 FD 6D 50			.byte	$FD,$6D,$50	;ROCK1L
   341 C503 FD 55 50			.byte	$FD,$55,$50
   342 C506 FE 65 50			.byte	$FE,$65,$50
   343 C509 FE 55 50			.byte	$FE,$55,$50
   344 C50C FE 55 50			.byte	$FE,$55,$50
   345 C50F FE 95 50			.byte	$FE,$95,$50
   346 C512 FE 95 50			.byte	$FE,$95,$50
   347 C515 FB D5 50			.byte	$FB,$D5,$50
   348 C518 FF D9 D0			.byte	$FF,$D9,$D0
   349 C51B FE 55 50			.byte	$FE,$55,$50
   350 C51E FE 95 D0			.byte	$FE,$95,$D0
   351 C521 FE 9F D0			.byte	$FE,$9F,$D0
   352 C524 FE 65 50			.byte	$FE,$65,$50	;ROCK2L
   353 C527 FF 95 50			.byte	$FF,$95,$50
   354 C52A FF 95 50			.byte	$FF,$95,$50
   355 C52D FE D6 50			.byte	$FE,$D6,$50
   356 C530 FE 95 50			.byte	$FE,$95,$50
   357 C533 FA 65 50			.byte	$FA,$65,$50
   358 C536 FF 55 50			.byte	$FF,$55,$50
   359 C539 FF 5D D0			.byte	$FF,$5D,$D0
   360 C53C FE 55 70			.byte	$FE,$55,$70
   361 C53F FE A5 50			.byte	$FE,$A5,$50
   362 C542 FF D5 50			.byte	$FF,$D5,$50
   363 C545 FF 75 50			.byte	$FF,$75,$50
   364 C548 FA 65 60			.byte	$FA,$65,$60	;ROCK3L
   365 C54B FA 95 60			.byte	$FA,$95,$60
   366 C54E FA 55 60			.byte	$FA,$55,$60
   367 C551 FA 5D 70			.byte	$FA,$5D,$70
   368 C554 FA 76 F0			.byte	$FA,$76,$F0
   369 C557 FA 59 60			.byte	$FA,$59,$60
   370 C55A FE 55 60			.byte	$FE,$55,$60
   371 C55D FF 55 60			.byte	$FF,$55,$60
   372 C560 FA 55 60			.byte	$FA,$55,$60
   373 C563 FA 55 60			.byte	$FA,$55,$60
   374 C566 FA 5D 60			.byte	$FA,$5D,$60
   375 C569 F9 B5 60			.byte	$F9,$B5,$60
   376 C56C 02 25 80			.byte	$02,$25,$80	;ROCKEL
   377 C56F 05 69 04			.byte	$05,$69,$04
   378 C572 26 99 40			.byte	$26,$99,$40
   379 C575 00 62 00			.byte	$00,$62,$00
   380 C578 01 04 08			.byte	$01,$04,$08
   381 C57B 03 F0			.byte	$03,$F0		;ROCK1M
   382 C57D 0F F0			.byte	$0F,$F0
   383 C57F 0B F0			.byte	$0B,$F0
   384 C581 0E F0			.byte	$0E,$F0
   385 C583 0F B0			.byte	$0F,$B0
   386 C585 0F EC			.byte	$0F,$EC
   387 C587 0F F8			.byte	$0F,$F8
   388 C589 03 FC			.byte	$03,$FC
   389 C58B 2F FC			.byte	$2F,$FC		;ROCK2M
   390 C58D 3F FC			.byte	$3F,$FC
   391 C58F 3F FC			.byte	$3F,$FC
   392 C591 3F BC			.byte	$3F,$BC
   393 C593 0F FC			.byte	$0F,$FC
   394 C595 03 FC			.byte	$03,$FC
   395 C597 03 FC			.byte	$03,$FC
   396 C599 03 FC			.byte	$03,$FC
   397 C59B 3F FC			.byte	$3F,$FC		;ROCK3M
   398 C59D 3F FC			.byte	$3F,$FC
   399 C59F 3F FC			.byte	$3F,$FC
   400 C5A1 3F FC			.byte	$3F,$FC
   401 C5A3 3F FC			.byte	$3F,$FC
   402 C5A5 3F FC			.byte	$3F,$FC
   403 C5A7 3F FC			.byte	$3F,$FC
   404 C5A9 3F FC			.byte	$3F,$FC
   405 C5AB 00 00			.byte	$00,$00		;ROCKEM
   406 C5AD 00 00			.byte	$00,$00
   407 C5AF 05 20			.byte	$05,$20
   408 C5B1 04 08			.byte	$04,$08
   409 C5B3 00 00			.byte	$00,$00
   410 C5B5 20 20			.byte	$20,$20		;SHIP
   411 C5B7 03 80			.byte	$03,$80
   412 C5B9 42 00			.byte	$42,$00
   413 C5BB 08 00			.byte	$08,$00
   414 C5BD 00 00			.byte	$00,$00
   415 C5BF 00 00			.byte	$00,$00
   416 C5C1 00 00			.byte	$00,$00
   417 C5C3 00 80			.byte	$00,$80
   418 C5C5 02 00			.byte	$02,$00
   419 C5C7 08 00			.byte	$08,$00
   420 C5C9 00 00			.byte	$00,$00
   421 C5CB 00 00			.byte	$00,$00
   422 C5CD 00 00			.byte	$00,$00
   423 C5CF 00 80			.byte	$00,$80
   424 C5D1 02 04			.byte	$02,$04
   425 C5D3 0B 00			.byte	$0B,$00
   426 C5D5 00 00			.byte	$00,$00		;SHIPE
   427 C5D7 00 20			.byte	$00,$20
   428 C5D9 00 08			.byte	$00,$08
   429 C5DB 01 00			.byte	$01,$00
   430 C5DD 00 00			.byte	$00,$00
   431 C5DF 00 08			.byte	$00,$08
   432 C5E1 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0	;UFOL
   433 C5E9 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   434
   435 C600				ORG     GRAPHICS+$600	;7
   436 				********************************************************************************
   437 C600 FD 6D 50			.byte	$FD,$6D,$50	;ROCK1L
   438 C603 FF 55 70			.byte	$FF,$55,$70
   439 C606 FF 55 50			.byte	$FF,$55,$50
   440 C609 FA 55 50			.byte	$FA,$55,$50
   441 C60C FA 95 50			.byte	$FA,$95,$50
   442 C60F FA 55 50			.byte	$FA,$55,$50
   443 C612 FA 55 50			.byte	$FA,$55,$50
   444 C615 F9 55 50			.byte	$F9,$55,$50
   445 C618 FF 65 50			.byte	$FF,$65,$50
   446 C61B FF 95 50			.byte	$FF,$95,$50
   447 C61E F9 55 50			.byte	$F9,$55,$50
   448 C621 F9 67 50			.byte	$F9,$67,$50
   449 C624 FA D5 50			.byte	$FA,$D5,$50	;ROCK2L
   450 C627 FA 99 50			.byte	$FA,$99,$50
   451 C62A FA D5 50			.byte	$FA,$D5,$50
   452 C62D F6 E5 50			.byte	$F6,$E5,$50
   453 C630 FA 95 90			.byte	$FA,$95,$90
   454 C633 FE 96 50			.byte	$FE,$96,$50
   455 C636 FA 95 50			.byte	$FA,$95,$50
   456 C639 FB 65 D0			.byte	$FB,$65,$D0
   457 C63C F9 97 70			.byte	$F9,$97,$70
   458 C63F FA 95 50			.byte	$FA,$95,$50
   459 C642 FF 55 50			.byte	$FF,$55,$50
   460 C645 FF F5 50			.byte	$FF,$F5,$50
   461 C648 F9 D5 50			.byte	$F9,$D5,$50	;ROCK3L
   462 C64B FD 55 50			.byte	$FD,$55,$50
   463 C64E F9 55 50			.byte	$F9,$55,$50
   464 C651 F9 55 70			.byte	$F9,$55,$70
   465 C654 FA 56 D0			.byte	$FA,$56,$D0
   466 C657 F9 55 50			.byte	$F9,$55,$50
   467 C65A F9 55 50			.byte	$F9,$55,$50
   468 C65D FA 55 50			.byte	$FA,$55,$50
   469 C660 F9 55 50			.byte	$F9,$55,$50
   470 C663 F9 57 50			.byte	$F9,$57,$50
   471 C666 F9 5A 50			.byte	$F9,$5A,$50
   472 C669 FA 59 50			.byte	$FA,$59,$50
   473 C66C 0A 57 00			.byte	$0A,$57,$00	;ROCKEL
   474 C66F 02 75 80			.byte	$02,$75,$80
   475 C672 01 55 10			.byte	$01,$55,$10
   476 C675 02 02 18			.byte	$02,$02,$18
   477 C678 06 00 C2			.byte	$06,$00,$C2
   478 C67B 0F FC			.byte	$0F,$FC		;ROCK1M
   479 C67D 0F FC			.byte	$0F,$FC
   480 C67F 0F FC			.byte	$0F,$FC
   481 C681 0F F0			.byte	$0F,$F0
   482 C683 0F F8			.byte	$0F,$F8
   483 C685 0F FF			.byte	$0F,$FF
   484 C687 0F FC			.byte	$0F,$FC
   485 C689 0F FF			.byte	$0F,$FF
   486 C68B 3F D8			.byte	$3F,$D8		;ROCK2M
   487 C68D 3B D8			.byte	$3B,$D8
   488 C68F 3E A8			.byte	$3E,$A8
   489 C691 3E A8			.byte	$3E,$A8
   490 C693 3E A8			.byte	$3E,$A8
   491 C695 3E 98			.byte	$3E,$98
   492 C697 3F A8			.byte	$3F,$A8
   493 C699 3F D8			.byte	$3F,$D8
   494 C69B 3E A8			.byte	$3E,$A8		;ROCK3M
   495 C69D 3E A8			.byte	$3E,$A8
   496 C69F 3E A8			.byte	$3E,$A8
   497 C6A1 3E A8			.byte	$3E,$A8
   498 C6A3 3E A8			.byte	$3E,$A8
   499 C6A5 3E E8			.byte	$3E,$E8
   500 C6A7 3D A8			.byte	$3D,$A8
   501 C6A9 3E A8			.byte	$3E,$A8
   502 C6AB 00 00			.byte	$00,$00		;ROCKEM
   503 C6AD 00 30			.byte	$00,$30
   504 C6AF 01 40			.byte	$01,$40
   505 C6B1 09 10			.byte	$09,$10
   506 C6B3 C0 08			.byte	$C0,$08
   507 C6B5 2F E0			.byte	$2F,$E0		;SHIP
   508 C6B7 02 80			.byte	$02,$80
   509 C6B9 0E 00			.byte	$0E,$00
   510 C6BB 0A 00			.byte	$0A,$00
   511 C6BD 2C 00			.byte	$2C,$00
   512 C6BF 00 00			.byte	$00,$00
   513 C6C1 00 E0			.byte	$00,$E0
   514 C6C3 02 80			.byte	$02,$80
   515 C6C5 02 00			.byte	$02,$00
   516 C6C7 0A 00			.byte	$0A,$00
   517 C6C9 2C 00			.byte	$2C,$00
   518 C6CB 00 00			.byte	$00,$00
   519 C6CD 00 E0			.byte	$00,$E0
   520 C6CF 02 80			.byte	$02,$80
   521 C6D1 02 C0			.byte	$02,$C0
   522 C6D3 0A 00			.byte	$0A,$00
   523 C6D5 01 04			.byte	$01,$04		;SHIPE
   524 C6D7 04 10			.byte	$04,$10
   525 C6D9 00 A0			.byte	$00,$A0
   526 C6DB 02 40			.byte	$02,$40
   527 C6DD 02 80			.byte	$02,$80
   528 C6DF 02 00			.byte	$02,$00
   529 C6E1 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0	;UFOL
   530 C6E9 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   531
   532 C700				ORG     GRAPHICS+$700	;8
   533 				********************************************************************************
   534 C700 F9 5D 50			.byte	$F9,$5D,$50	;ROCK1L
   535 C703 F5 D5 50			.byte	$F5,$D5,$50
   536 C706 FD 55 D0			.byte	$FD,$55,$D0
   537 C709 F9 55 50			.byte	$F9,$55,$50
   538 C70C FA 55 50			.byte	$FA,$55,$50
   539 C70F FA 65 50			.byte	$FA,$65,$50
   540 C712 F9 65 50			.byte	$F9,$65,$50
   541 C715 F5 95 50			.byte	$F5,$95,$50
   542 C718 F9 55 50			.byte	$F9,$55,$50
   543 C71B FD 5D 50			.byte	$FD,$5D,$50
   544 C71E FD 96 50			.byte	$FD,$96,$50
   545 C721 FA 55 50			.byte	$FA,$55,$50
   546 C724 FA F7 50			.byte	$FA,$F7,$50	;ROCK2L
   547 C727 FA 95 50			.byte	$FA,$95,$50
   548 C72A F9 D6 50			.byte	$F9,$D6,$50
   549 C72D FA B5 50			.byte	$FA,$B5,$50
   550 C730 F9 9D 50			.byte	$F9,$9D,$50
   551 C733 F6 95 50			.byte	$F6,$95,$50
   552 C736 FB 95 50			.byte	$FB,$95,$50
   553 C739 FF D5 50			.byte	$FF,$D5,$50
   554 C73C F9 75 70			.byte	$F9,$75,$70
   555 C73F FA 55 D0			.byte	$FA,$55,$D0
   556 C742 FA 95 50			.byte	$FA,$95,$50
   557 C745 FB D9 50			.byte	$FB,$D9,$50
   558 C748 FD D5 50			.byte	$FD,$D5,$50	;ROCK3L
   559 C74B FF 55 50			.byte	$FF,$55,$50
   560 C74E F9 55 90			.byte	$F9,$55,$90
   561 C751 F9 65 70			.byte	$F9,$65,$70
   562 C754 F9 55 50			.byte	$F9,$55,$50
   563 C757 F9 55 50			.byte	$F9,$55,$50
   564 C75A F9 59 50			.byte	$F9,$59,$50
   565 C75D F9 65 50			.byte	$F9,$65,$50
   566 C760 FA 56 50			.byte	$FA,$56,$50
   567 C763 F9 55 90			.byte	$F9,$55,$90
   568 C766 F9 66 50			.byte	$F9,$66,$50
   569 C769 FE 6D 50			.byte	$FE,$6D,$50
   570 C76C 00 B5 80			.byte	$00,$B5,$80	;ROCKEL
   571 C76F 00 96 60			.byte	$00,$96,$60
   572 C772 00 75 60			.byte	$00,$75,$60
   573 C775 01 08 88			.byte	$01,$08,$88
   574 C778 80 00 80			.byte	$80,$00,$80
   575 C77B 0E E8			.byte	$0E,$E8		;ROCK1M
   576 C77D 3F BC			.byte	$3F,$BC
   577 C77F 3F AC			.byte	$3F,$AC
   578 C781 3E A8			.byte	$3E,$A8
   579 C783 3B A8			.byte	$3B,$A8
   580 C785 3E F4			.byte	$3E,$F4
   581 C787 0F BF			.byte	$0F,$BF
   582 C789 0F AF			.byte	$0F,$AF
   583 C78B FB FB			.byte	$FB,$FB		;ROCK2M
   584 C78D FB FB			.byte	$FB,$FB
   585 C78F FA FB			.byte	$FA,$FB
   586 C791 FA 5B			.byte	$FA,$5B
   587 C793 FA 5B			.byte	$FA,$5B
   588 C795 FA 97			.byte	$FA,$97
   589 C797 FA 9B			.byte	$FA,$9B
   590 C799 FB DB			.byte	$FB,$DB
   591 C79B FA 5B			.byte	$FA,$5B		;ROCK3M
   592 C79D FA 5B			.byte	$FA,$5B
   593 C79F F9 5B			.byte	$F9,$5B
   594 C7A1 FA 5F			.byte	$FA,$5F
   595 C7A3 FB 58			.byte	$FB,$58
   596 C7A5 FA AB			.byte	$FA,$AB
   597 C7A7 F6 9F			.byte	$F6,$9F
   598 C7A9 FA 6F			.byte	$FA,$6F
   599 C7AB 00 00			.byte	$00,$00		;ROCKEM
   600 C7AD 01 00			.byte	$01,$00
   601 C7AF 01 40			.byte	$01,$40
   602 C7B1 00 62			.byte	$00,$62
   603 C7B3 20 30			.byte	$20,$30
   604 C7B5 3A B0			.byte	$3A,$B0		;SHIP
   605 C7B7 EA 80			.byte	$EA,$80
   606 C7B9 0A C0			.byte	$0A,$C0
   607 C7BB 4A 80			.byte	$4A,$80
   608 C7BD 2A 00			.byte	$2A,$00
   609 C7BF 2A C0			.byte	$2A,$C0
   610 C7C1 02 A0			.byte	$02,$A0
   611 C7C3 0E 80			.byte	$0E,$80
   612 C7C5 0E C0			.byte	$0E,$C0
   613 C7C7 0A 00			.byte	$0A,$00
   614 C7C9 2A 00			.byte	$2A,$00
   615 C7CB 0E A0			.byte	$0E,$A0
   616 C7CD 02 A0			.byte	$02,$A0
   617 C7CF 0A 84			.byte	$0A,$84
   618 C7D1 0E 80			.byte	$0E,$80
   619 C7D3 0A AC			.byte	$0A,$AC
   620 C7D5 01 04			.byte	$01,$04		;SHIPE
   621 C7D7 0A 90			.byte	$0A,$90
   622 C7D9 02 10			.byte	$02,$10
   623 C7DB 00 A0			.byte	$00,$A0
   624 C7DD 03 88			.byte	$03,$88
   625 C7DF 00 00			.byte	$00,$00
   626 C7E1 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0	;UFOL
   627 C7E9 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   628
   629 C800				ORG     GRAPHICS+$800	;9
   630 				********************************************************************************
   631 C800 F9 75 50			.byte	$F9,$75,$50	;ROCK1L
   632 C803 F9 D5 50			.byte	$F9,$D5,$50
   633 C806 F7 55 50			.byte	$F7,$55,$50
   634 C809 F6 57 50			.byte	$F6,$57,$50
   635 C80C FA 55 50			.byte	$FA,$55,$50
   636 C80F F9 55 50			.byte	$F9,$55,$50
   637 C812 FA 55 50			.byte	$FA,$55,$50
   638 C815 F9 55 50			.byte	$F9,$55,$50
   639 C818 FA 55 50			.byte	$FA,$55,$50
   640 C81B FA 55 50			.byte	$FA,$55,$50
   641 C81E FA 55 50			.byte	$FA,$55,$50
   642 C821 FA 59 50			.byte	$FA,$59,$50
   643 C824 FA FF 50			.byte	$FA,$FF,$50	;ROCK2L
   644 C827 FE 9D 50			.byte	$FE,$9D,$50
   645 C82A FB 95 50			.byte	$FB,$95,$50
   646 C82D F9 75 90			.byte	$F9,$75,$90
   647 C830 FA 5D 50			.byte	$FA,$5D,$50
   648 C833 F9 95 60			.byte	$F9,$95,$60
   649 C836 FA 95 50			.byte	$FA,$95,$50
   650 C839 FD 95 50			.byte	$FD,$95,$50
   651 C83C FA 75 50			.byte	$FA,$75,$50
   652 C83F FA 9D 50			.byte	$FA,$9D,$50
   653 C842 FA 55 70			.byte	$FA,$55,$70
   654 C845 FA 95 50			.byte	$FA,$95,$50
   655 C848 FA E5 50			.byte	$FA,$E5,$50	;ROCK3L
   656 C84B FB 55 90			.byte	$FB,$55,$90
   657 C84E FD 55 50			.byte	$FD,$55,$50
   658 C851 F9 55 50			.byte	$F9,$55,$50
   659 C854 F9 95 50			.byte	$F9,$95,$50
   660 C857 FA 56 50			.byte	$FA,$56,$50
   661 C85A F9 56 50			.byte	$F9,$56,$50
   662 C85D F9 59 90			.byte	$F9,$59,$90
   663 C860 F9 95 D0			.byte	$F9,$95,$D0
   664 C863 FA 55 D0			.byte	$FA,$55,$D0
   665 C866 F9 67 50			.byte	$F9,$67,$50
   666 C869 F9 AD 50			.byte	$F9,$AD,$50
   667 C86C 00 64 80			.byte	$00,$64,$80	;ROCKEL
   668 C86F 04 5D 28			.byte	$04,$5D,$28
   669 C872 10 15 62			.byte	$10,$15,$62
   670 C875 20 50 00			.byte	$20,$50,$00
   671 C878 00 52 00			.byte	$00,$52,$00
   672 C87B 2F 98			.byte	$2F,$98		;ROCK1M
   673 C87D 3A BB			.byte	$3A,$BB
   674 C87F 3E AF			.byte	$3E,$AF
   675 C881 3E 97			.byte	$3E,$97
   676 C883 3F A4			.byte	$3F,$A4
   677 C885 3E D6			.byte	$3E,$D6
   678 C887 3F B6			.byte	$3F,$B6
   679 C889 3E B4			.byte	$3E,$B4
   680 C88B FA F6			.byte	$FA,$F6		;ROCK2M
   681 C88D FA FD			.byte	$FA,$FD
   682 C88F F9 FE			.byte	$F9,$FE
   683 C891 FD 7E			.byte	$FD,$7E
   684 C893 F9 96			.byte	$F9,$96
   685 C895 FE 56			.byte	$FE,$56
   686 C897 F9 56			.byte	$F9,$56
   687 C899 F9 56			.byte	$F9,$56
   688 C89B F9 56			.byte	$F9,$56		;ROCK3M
   689 C89D F9 5A			.byte	$F9,$5A
   690 C89F F9 74			.byte	$F9,$74
   691 C8A1 FD 5C			.byte	$FD,$5C
   692 C8A3 F9 54			.byte	$F9,$54
   693 C8A5 F9 76			.byte	$F9,$76
   694 C8A7 F9 7F			.byte	$F9,$7F
   695 C8A9 F9 5E			.byte	$F9,$5E
   696 C8AB 02 00			.byte	$02,$00		;ROCKEM
   697 C8AD 09 80			.byte	$09,$80
   698 C8AF 06 C8			.byte	$06,$C8
   699 C8B1 11 10			.byte	$11,$10
   700 C8B3 00 00			.byte	$00,$00
   701 C8B5 0A 80			.byte	$0A,$80		;SHIP
   702 C8B7 2A 80			.byte	$2A,$80
   703 C8B9 3A 80			.byte	$3A,$80
   704 C8BB 0E B0			.byte	$0E,$B0
   705 C8BD 0A B0			.byte	$0A,$B0
   706 C8BF 3A A8			.byte	$3A,$A8
   707 C8C1 3A B0			.byte	$3A,$B0
   708 C8C3 0A 80			.byte	$0A,$80
   709 C8C5 0A 80			.byte	$0A,$80
   710 C8C7 0A 80			.byte	$0A,$80
   711 C8C9 3A B0			.byte	$3A,$B0
   712 C8CB AA B0			.byte	$AA,$B0
   713 C8CD 3A 80			.byte	$3A,$80
   714 C8CF 3A C0			.byte	$3A,$C0
   715 C8D1 0A B0			.byte	$0A,$B0
   716 C8D3 0A A0			.byte	$0A,$A0
   717 C8D5 02 54			.byte	$02,$54	;SHIPE
   718 C8D7 09 60			.byte	$09,$60
   719 C8D9 06 10			.byte	$06,$10
   720 C8DB 0A 12			.byte	$0A,$12
   721 C8DD 00 20			.byte	$00,$20
   722 C8DF 00 80			.byte	$00,$80
   723 C8E1 00 00 00 00 00 00 + 	.byte	$0,0,0,0,0,0,0,0	;UFOL
   724 C8E9 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   725
   726 C900				ORG     GRAPHICS+$900	;10
   727 				********************************************************************************
   728 C900 FA 55 50			.byte	$FA,$55,$50	;ROCK1L
   729 C903 FF D5 70			.byte	$FF,$D5,$70
   730 C906 F7 65 70			.byte	$F7,$65,$70
   731 C909 FE 65 70			.byte	$FE,$65,$70
   732 C90C FD 5D 50			.byte	$FD,$5D,$50
   733 C90F FA 55 50			.byte	$FA,$55,$50
   734 C912 FA 95 50			.byte	$FA,$95,$50
   735 C915 FA 55 50			.byte	$FA,$55,$50
   736 C918 F9 65 50			.byte	$F9,$65,$50
   737 C91B FA 55 50			.byte	$FA,$55,$50
   738 C91E FA D5 50			.byte	$FA,$D5,$50
   739 C921 F9 55 50			.byte	$F9,$55,$50
   740 C924 FE 7D 50			.byte	$FE,$7D,$50	;ROCK2L
   741 C927 FE 5F 70			.byte	$FE,$5F,$70
   742 C92A FB 57 50			.byte	$FB,$57,$50
   743 C92D FA D5 50			.byte	$FA,$D5,$50
   744 C930 FA 9D 60			.byte	$FA,$9D,$60
   745 C933 FA 55 D0			.byte	$FA,$55,$D0
   746 C936 FA 59 50			.byte	$FA,$59,$50
   747 C939 FA 95 50			.byte	$FA,$95,$50
   748 C93C FA FD 50			.byte	$FA,$FD,$50
   749 C93F FA 5D 50			.byte	$FA,$5D,$50
   750 C942 FA 57 50			.byte	$FA,$57,$50
   751 C945 FA 55 50			.byte	$FA,$55,$50
   752 C948 FF D5 50			.byte	$FF,$D5,$50	;ROCK3L
   753 C94B FB 95 50			.byte	$FB,$95,$50
   754 C94E EE 59 50			.byte	$EE,$59,$50
   755 C951 F9 59 50			.byte	$F9,$59,$50
   756 C954 F9 55 50			.byte	$F9,$55,$50
   757 C957 F9 55 90			.byte	$F9,$55,$90
   758 C95A F9 55 50			.byte	$F9,$55,$50
   759 C95D F9 55 70			.byte	$F9,$55,$70
   760 C960 F9 56 D0			.byte	$F9,$56,$D0
   761 C963 F9 56 D0			.byte	$F9,$56,$D0
   762 C966 F9 6F 50			.byte	$F9,$6F,$50
   763 C969 F9 B6 50			.byte	$F9,$B6,$50
   764 C96C 00 44 00			.byte	$00,$44,$00	;ROCKEL
   765 C96F 00 E5 00			.byte	$00,$E5,$00
   766 C972 02 46 40			.byte	$02,$46,$40
   767 C975 00 62 C0			.byte	$00,$62,$C0
   768 C978 00 10 00			.byte	$00,$10,$00
   769 C97B 3E B4			.byte	$3E,$B4		;ROCK1M
   770 C97D FE 5C			.byte	$FE,$5C
   771 C97F FE 57			.byte	$FE,$57
   772 C981 FF 94			.byte	$FF,$94
   773 C983 3D D6			.byte	$3D,$D6
   774 C985 3E 75			.byte	$3E,$75
   775 C987 3E 9E			.byte	$3E,$9E
   776 C989 3E 94			.byte	$3E,$94
   777 C98B E9 55			.byte	$E9,$55		;ROCK2M
   778 C98D E9 7E			.byte	$E9,$7E
   779 C98F E6 7C			.byte	$E6,$7C
   780 C991 FD 7C			.byte	$FD,$7C
   781 C993 EB 5C			.byte	$EB,$5C
   782 C995 ED 96			.byte	$ED,$96
   783 C997 FB 55			.byte	$FB,$55
   784 C999 E9 56			.byte	$E9,$56
   785 C99B E9 56			.byte	$E9,$56		;ROCK3M
   786 C99D E5 DE			.byte	$E5,$DE
   787 C99F F9 7C			.byte	$F9,$7C
   788 C9A1 EA 5C			.byte	$EA,$5C
   789 C9A3 E9 D5			.byte	$E9,$D5
   790 C9A5 E9 FF			.byte	$E9,$FF
   791 C9A7 E9 76			.byte	$E9,$76
   792 C9A9 EA 56			.byte	$EA,$56
   793 C9AB 02 40			.byte	$02,$40		;ROCKEM
   794 C9AD 01 60			.byte	$01,$60
   795 C9AF 15 A0			.byte	$15,$A0
   796 C9B1 88 80			.byte	$88,$80
   797 C9B3 00 40			.byte	$00,$40
   798 C9B5 0A 80			.byte	$0A,$80		;SHIP
   799 C9B7 3A 80			.byte	$3A,$80
   800 C9B9 AA 80			.byte	$AA,$80
   801 C9BB 0A AC			.byte	$0A,$AC
   802 C9BD 4A A8			.byte	$4A,$A8
   803 C9BF 0A AC			.byte	$0A,$AC
   804 C9C1 AA 80			.byte	$AA,$80
   805 C9C3 3A 80			.byte	$3A,$80
   806 C9C5 0A 80			.byte	$0A,$80
   807 C9C7 0A B0			.byte	$0A,$B0
   808 C9C9 0A A8			.byte	$0A,$A8
   809 C9CB EA 80			.byte	$EA,$80
   810 C9CD AA 84			.byte	$AA,$84
   811 C9CF EA 80			.byte	$EA,$80
   812 C9D1 0A A8			.byte	$0A,$A8
   813 C9D3 0A B0			.byte	$0A,$B0
   814 C9D5 00 54			.byte	$00,$54		;SHIPE
   815 C9D7 01 50			.byte	$01,$50
   816 C9D9 01 98			.byte	$01,$98
   817 C9DB 04 60			.byte	$04,$60
   818 C9DD 02 08			.byte	$02,$08
   819 C9DF 00 00			.byte	$00,$00
   820 C9E1 0A A0			.byte	$0A,$A0		;UFOL
   821 C9E3 0A A0			.byte	$0A,$A0
   822 C9E5 0A A0			.byte	$0A,$A0
   823 C9E7 0A A0			.byte	$0A,$A0
   824 C9E9 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   825
   826 CA00				ORG     GRAPHICS+$A00	;11
   827 				********************************************************************************
   828 CA00 FE 95 40			.byte	$FE,$95,$40	;ROCK1L
   829 CA03 FF 55 70			.byte	$FF,$55,$70
   830 CA06 FF 55 F0			.byte	$FF,$55,$F0
   831 CA09 FE 55 F0			.byte	$FE,$55,$F0
   832 CA0C FE 95 D0			.byte	$FE,$95,$D0
   833 CA0F FD 55 70			.byte	$FD,$55,$70
   834 CA12 FE 55 50			.byte	$FE,$55,$50
   835 CA15 FE 55 50			.byte	$FE,$55,$50
   836 CA18 FE 55 70			.byte	$FE,$55,$70
   837 CA1B FD 55 50			.byte	$FD,$55,$50
   838 CA1E FD 55 50			.byte	$FD,$55,$50
   839 CA21 FF 55 50			.byte	$FF,$55,$50
   840 CA24 FE 95 70			.byte	$FE,$95,$70	;ROCK2L
   841 CA27 FE 9F F0			.byte	$FE,$9F,$F0
   842 CA2A FE 57 D0			.byte	$FE,$57,$D0
   843 CA2D FE D5 D0			.byte	$FE,$D5,$D0
   844 CA30 FA 7D 50			.byte	$FA,$7D,$50
   845 CA33 FE 55 D0			.byte	$FE,$55,$D0
   846 CA36 FE 55 70			.byte	$FE,$55,$70
   847 CA39 FA 55 90			.byte	$FA,$55,$90
   848 CA3C FE D5 50			.byte	$FE,$D5,$50
   849 CA3F FA BF 50			.byte	$FA,$BF,$50
   850 CA42 FD 97 50			.byte	$FD,$97,$50
   851 CA45 FE 95 D0			.byte	$FE,$95,$D0
   852 CA48 FF 55 60			.byte	$FF,$55,$60	;ROCK3L
   853 CA4B FB 56 60			.byte	$FB,$56,$60
   854 CA4E ED 55 60			.byte	$ED,$55,$60
   855 CA51 B9 55 60			.byte	$B9,$55,$60
   856 CA54 F9 55 50			.byte	$F9,$55,$50
   857 CA57 F9 55 50			.byte	$F9,$55,$50
   858 CA5A F9 55 50			.byte	$F9,$55,$50
   859 CA5D F9 55 B0			.byte	$F9,$55,$B0
   860 CA60 F9 57 D0			.byte	$F9,$57,$D0
   861 CA63 F9 5B 50			.byte	$F9,$5B,$50
   862 CA66 FA 6D 50			.byte	$FA,$6D,$50
   863 CA69 FE 55 50			.byte	$FE,$55,$50
   864 CA6C 01 08 00			.byte	$01,$08,$00	;ROCKEL
   865 CA6F 02 44 04			.byte	$02,$44,$04
   866 CA72 01 14 10			.byte	$01,$14,$10
   867 CA75 81 04 10			.byte	$81,$04,$10
   868 CA78 81 80 08			.byte	$81,$80,$08
   869 CA7B FE 56			.byte	$FE,$56		;ROCK1M
   870 CA7D FD 54			.byte	$FD,$54
   871 CA7F FD 55			.byte	$FD,$55
   872 CA81 FE 55			.byte	$FE,$55
   873 CA83 FB D5			.byte	$FB,$D5
   874 CA85 F9 F5			.byte	$F9,$F5
   875 CA87 FA 7D			.byte	$FA,$7D
   876 CA89 F9 5B			.byte	$F9,$5B
   877 CA8B E9 55			.byte	$E9,$55		;ROCK2M
   878 CA8D E5 56			.byte	$E5,$56
   879 CA8F A9 5C			.byte	$A9,$5C
   880 CA91 FD 5C			.byte	$FD,$5C
   881 CA93 EF 5C			.byte	$EF,$5C
   882 CA95 EA D6			.byte	$EA,$D6
   883 CA97 EF 55			.byte	$EF,$55
   884 CA99 ED D6			.byte	$ED,$D6
   885 CA9B E7 76			.byte	$E7,$76		;ROCK3M
   886 CA9D E5 FC			.byte	$E5,$FC
   887 CA9F E9 7C			.byte	$E9,$7C
   888 CAA1 E5 54			.byte	$E5,$54
   889 CAA3 EB FE			.byte	$EB,$FE
   890 CAA5 E5 D5			.byte	$E5,$D5
   891 CAA7 E9 56			.byte	$E9,$56
   892 CAA9 E9 56			.byte	$E9,$56
   893 CAAB 01 80			.byte	$01,$80		;ROCKEM
   894 CAAD 0B 40			.byte	$0B,$40
   895 CAAF 02 40			.byte	$02,$40
   896 CAB1 31 18			.byte	$31,$18
   897 CAB3 00 01			.byte	$00,$01
   898 CAB5 0A 80			.byte	$0A,$80		;SHIP
   899 CAB7 0A 80			.byte	$0A,$80
   900 CAB9 3A B0			.byte	$3A,$B0
   901 CABB 3A A8			.byte	$3A,$A8
   902 CABD 0A B0			.byte	$0A,$B0
   903 CABF 0E B0			.byte	$0E,$B0
   904 CAC1 3A 80			.byte	$3A,$80
   905 CAC3 2A 80			.byte	$2A,$80
   906 CAC5 0A 80			.byte	$0A,$80
   907 CAC7 0A A0			.byte	$0A,$A0
   908 CAC9 0A B0			.byte	$0A,$B0
   909 CACB 3A C0			.byte	$3A,$C0
   910 CACD 3A 80			.byte	$3A,$80
   911 CACF AA B0			.byte	$AA,$B0
   912 CAD1 3A B0			.byte	$3A,$B0
   913 CAD3 0A 80			.byte	$0A,$80
   914 CAD5 00 64			.byte	$00,$64		;SHIPE
   915 CAD7 03 42			.byte	$03,$42
   916 CAD9 02 50			.byte	$02,$50
   917 CADB 00 10			.byte	$00,$10
   918 CADD 00 80			.byte	$00,$80
   919 CADF 00 00			.byte	$00,$00
   920 CAE1 3A A8			.byte	$3A,$A8		;UFOL
   921 CAE3 2F A8			.byte	$2F,$A8
   922 CAE5 2A F8			.byte	$2A,$F8
   923 CAE7 2A BC			.byte	$2A,$BC
   924 CAE9 00				.byte	$00		;UFOS
   925 CAEA 00				.byte	$00
   926 CAEB 00				.byte	$00
   927 CAEC 00				.byte	$00
   928 CAED 3C				.byte	$3C		;ROCK1S
   929 CAEE 3C				.byte	$3C
   930 CAEF 3C				.byte	$3C
   931 CAF0 3C				.byte	$3C
   932 CAF1 3C				.byte	$3C		;ROCK2S
   933 CAF2 3C				.byte	$3C
   934 CAF3 3C				.byte	$3C
   935 CAF4 3C				.byte	$3C
   936 CAF5 3C				.byte	$3C		;ROCK3S
   937 CAF6 3C				.byte	$3C
   938 CAF7 3C				.byte	$3C
   939 CAF8 3C				.byte	$3C
   940 CAF9 00				.byte	$00		;ROCKES
   941 CAFA 08				.byte	$08
   942 CAFB 08				.byte	$08
   943 CAFC 08				.byte	$08
   944 CAFD 08				.byte	$08
   945 CAFE 00				.byte	$00		;SHOT
   946 CAFF 00				.byte	$00
   947
   948 CB00				ORG     GRAPHICS+$B00	;12
   949 				********************************************************************************
   950 CB00 3E 55 40			.byte	$3E,$55,$40	;ROCK1L
   951 CB03 3E 95 40			.byte	$3E,$95,$40
   952 CB06 3D 65 40			.byte	$3D,$65,$40
   953 CB09 3E 95 C0			.byte	$3E,$95,$C0
   954 CB0C 3E 57 C0			.byte	$3E,$57,$C0
   955 CB0F 3E 57 40			.byte	$3E,$57,$40
   956 CB12 3E D5 40			.byte	$3E,$D5,$40
   957 CB15 3D A5 40			.byte	$3D,$A5,$40
   958 CB18 3E 95 40			.byte	$3E,$95,$40
   959 CB1B 3E 65 40			.byte	$3E,$65,$40
   960 CB1E 3E 55 40			.byte	$3E,$55,$40
   961 CB21 3E 95 40			.byte	$3E,$95,$40
   962 CB24 3E 65 40			.byte	$3E,$65,$40	;ROCK2L
   963 CB27 3E 57 C0			.byte	$3E,$57,$C0
   964 CB2A 3E 97 C0			.byte	$3E,$97,$C0
   965 CB2D 3E D5 C0			.byte	$3E,$D5,$C0
   966 CB30 3E B5 40			.byte	$3E,$B5,$40
   967 CB33 3E 55 C0			.byte	$3E,$55,$C0
   968 CB36 3E 95 40			.byte	$3E,$95,$40
   969 CB39 3D 55 40			.byte	$3D,$55,$40
   970 CB3C 3D 5D 40			.byte	$3D,$5D,$40
   971 CB3F 3E 75 40			.byte	$3E,$75,$40
   972 CB42 3A 5F C0			.byte	$3A,$5F,$C0
   973 CB45 3E 55 C0			.byte	$3E,$55,$C0
   974 CB48 3A 95 40			.byte	$3A,$95,$40	;ROCK3L
   975 CB4B 3E 55 40			.byte	$3E,$55,$40
   976 CB4E 3E 56 40			.byte	$3E,$56,$40
   977 CB51 2E 55 40			.byte	$2E,$55,$40
   978 CB54 3A 55 D0			.byte	$3A,$55,$D0
   979 CB57 3A 55 40			.byte	$3A,$55,$40
   980 CB5A 3A 55 C0			.byte	$3A,$55,$C0
   981 CB5D 3A 55 C0			.byte	$3A,$55,$C0
   982 CB60 3A 5B 40			.byte	$3A,$5B,$40
   983 CB63 3A 55 40			.byte	$3A,$55,$40
   984 CB66 3E 55 80			.byte	$3E,$55,$80
   985 CB69 3E 55 40			.byte	$3E,$55,$40
   986 CB6C 00 08 00			.byte	$00,$08,$00	;ROCKEL
   987 CB6F 08 08 00			.byte	$08,$08,$00
   988 CB72 04 04 04			.byte	$04,$04,$04
   989 CB75 06 00 42			.byte	$06,$00,$42
   990 CB78 10 08 00			.byte	$10,$08,$00
   991 CB7B FB 55			.byte	$FB,$55		;ROCK1M
   992 CB7D 3A D5			.byte	$3A,$D5
   993 CB7F 39 75			.byte	$39,$75
   994 CB81 3E 5D			.byte	$3E,$5D
   995 CB83 EA 54			.byte	$EA,$54
   996 CB85 F9 54			.byte	$F9,$54
   997 CB87 FA 54			.byte	$FA,$54
   998 CB89 F9 55			.byte	$F9,$55
   999 CB8B EB 75			.byte	$EB,$75		;ROCK2M
  1000 CB8D E9 56			.byte	$E9,$56
  1001 CB8F E5 54			.byte	$E5,$54
  1002 CB91 EA 54			.byte	$EA,$54
  1003 CB93 EF 58			.byte	$EF,$58
  1004 CB95 EB D4			.byte	$EB,$D4
  1005 CB97 E5 74			.byte	$E5,$74
  1006 CB99 EB D6			.byte	$EB,$D6
  1007 CB9B EB FE			.byte	$EB,$FE		;ROCK3M
  1008 CB9D E5 FC			.byte	$E5,$FC
  1009 CB9F E5 5D			.byte	$E5,$5D
  1010 CBA1 ED 56			.byte	$ED,$56
  1011 CBA3 EB 56			.byte	$EB,$56
  1012 CBA5 E9 56			.byte	$E9,$56
  1013 CBA7 E9 56			.byte	$E9,$56
  1014 CBA9 ED D6			.byte	$ED,$D6
  1015 CBAB 00 80			.byte	$00,$80		;ROCKEM
  1016 CBAD 06 50			.byte	$06,$50
  1017 CBAF 05 4C			.byte	$05,$4C
  1018 CBB1 01 43			.byte	$01,$43
  1019 CBB3 81 30			.byte	$81,$30
  1020 CBB5 0E C0			.byte	$0E,$C0		;SHIP
  1021 CBB7 02 80			.byte	$02,$80
  1022 CBB9 02 A0			.byte	$02,$A0
  1023 CBBB 2A C0			.byte	$2A,$C0
  1024 CBBD 2A 00			.byte	$2A,$00
  1025 CBBF 4A 80			.byte	$4A,$80
  1026 CBC1 0A C0			.byte	$0A,$C0
  1027 CBC3 EA 80			.byte	$EA,$80
  1028 CBC5 3A B0			.byte	$3A,$B0
  1029 CBC7 0A AC			.byte	$0A,$AC
  1030 CBC9 0E 80			.byte	$0E,$80
  1031 CBCB 0A 84			.byte	$0A,$84
  1032 CBCD 02 A0			.byte	$02,$A0
  1033 CBCF 0E A0			.byte	$0E,$A0
  1034 CBD1 2A 00			.byte	$2A,$00
  1035 CBD3 0A 00			.byte	$0A,$00
  1036 CBD5 06 14			.byte	$06,$14		;SHIPE
  1037 CBD7 05 D0			.byte	$05,$D0
  1038 CBD9 24 00			.byte	$24,$00
  1039 CBDB 00 80			.byte	$00,$80
  1040 CBDD 00 00			.byte	$00,$00
  1041 CBDF 80 00			.byte	$80,$00
  1042 CBE1 AA AA			.byte	$AA,$AA		;UFOL
  1043 CBE3 AA AA			.byte	$AA,$AA
  1044 CBE5 AA AA			.byte	$AA,$AA
  1045 CBE7 AA AA			.byte	$AA,$AA
  1046 CBE9 38				.byte	$38		;UFOS
  1047 CBEA 3C				.byte	$3C
  1048 CBEB 2C				.byte	$2C
  1049 CBEC 28				.byte	$28
  1050 CBED 38				.byte	$38		;ROCK1S
  1051 CBEE 3B				.byte	$3B
  1052 CBEF 38				.byte	$38
  1053 CBF0 F8				.byte	$F8
  1054 CBF1 3B				.byte	$3B		;ROCK2S
  1055 CBF2 FB				.byte	$FB
  1056 CBF3 FB				.byte	$FB
  1057 CBF4 FB				.byte	$FB
  1058 CBF5 FB				.byte	$FB		;ROCK3S
  1059 CBF6 F7				.byte	$F7
  1060 CBF7 FF				.byte	$FF
  1061 CBF8 F7				.byte	$F7
  1062 CBF9 08				.byte	$08		;ROCKES
  1063 CBFA 10				.byte	$10
  1064 CBFB 10				.byte	$10
  1065 CBFC 00				.byte	$00
  1066 CBFD 00				.byte	$00
  1067 CBFE 00				.byte	$00		;SHOT
  1068 CBFF 00				.byte	$00
  1069
  1070 CC00				ORG     GRAPHICS+$C00	;13
  1071 				********************************************************************************
  1072 CC00 3E A5 40			.byte	$3E,$A5,$40	;ROCK1L
  1073 CC03 3E 55 40			.byte	$3E,$55,$40
  1074 CC06 3E 55 40			.byte	$3E,$55,$40
  1075 CC09 3E 97 40			.byte	$3E,$97,$40
  1076 CC0C 3E 5F 40			.byte	$3E,$5F,$40
  1077 CC0F 3E 5F 40			.byte	$3E,$5F,$40
  1078 CC12 3F 55 40			.byte	$3F,$55,$40
  1079 CC15 3F 95 40			.byte	$3F,$95,$40
  1080 CC18 3E 65 40			.byte	$3E,$65,$40
  1081 CC1B 3E 55 40			.byte	$3E,$55,$40
  1082 CC1E 3E 67 40			.byte	$3E,$67,$40
  1083 CC21 3E 55 40			.byte	$3E,$55,$40
  1084 CC24 3E 95 00			.byte	$3E,$95,$00	;ROCK2L
  1085 CC27 3E 55 40			.byte	$3E,$55,$40
  1086 CC2A 3E 55 C0			.byte	$3E,$55,$C0
  1087 CC2D 3F 65 C0			.byte	$3F,$65,$C0
  1088 CC30 3E B9 40			.byte	$3E,$B9,$40
  1089 CC33 3E A7 C0			.byte	$3E,$A7,$C0
  1090 CC36 3E 95 40			.byte	$3E,$95,$40
  1091 CC39 3E A5 40			.byte	$3E,$A5,$40
  1092 CC3C 3E 55 40			.byte	$3E,$55,$40
  1093 CC3F 3E 97 40			.byte	$3E,$97,$40
  1094 CC42 3E 5D 40			.byte	$3E,$5D,$40
  1095 CC45 3E 65 C0			.byte	$3E,$65,$C0
  1096 CC48 3E 55 80			.byte	$3E,$55,$80	;ROCK3L
  1097 CC4B 3E 56 40			.byte	$3E,$56,$40
  1098 CC4E 3E 55 40			.byte	$3E,$55,$40
  1099 CC51 3E 55 40			.byte	$3E,$55,$40
  1100 CC54 2E 55 40			.byte	$2E,$55,$40
  1101 CC57 3E 55 40			.byte	$3E,$55,$40
  1102 CC5A 3E 55 C0			.byte	$3E,$55,$C0
  1103 CC5D 3E 56 C0			.byte	$3E,$56,$C0
  1104 CC60 3E 55 40			.byte	$3E,$55,$40
  1105 CC63 3E 55 40			.byte	$3E,$55,$40
  1106 CC66 3E 55 80			.byte	$3E,$55,$80
  1107 CC69 3E 95 80			.byte	$3E,$95,$80
  1108 CC6C 00 08 00			.byte	$00,$08,$00	;ROCKEL
  1109 CC6F 00 08 00			.byte	$00,$08,$00
  1110 CC72 20 04 C0			.byte	$20,$04,$C0
  1111 CC75 00 00 00			.byte	$00,$00,$00
  1112 CC78 00 00 20			.byte	$00,$00,$20
  1113 CC7B 3A 96			.byte	$3A,$96		;ROCK1M
  1114 CC7D 39 64			.byte	$39,$64
  1115 CC7F 39 54			.byte	$39,$54
  1116 CC81 3A 54			.byte	$3A,$54
  1117 CC83 39 54			.byte	$39,$54
  1118 CC85 39 54			.byte	$39,$54
  1119 CC87 39 54			.byte	$39,$54
  1120 CC89 3A 54			.byte	$3A,$54
  1121 CC8B F5 F6			.byte	$F5,$F6		;ROCK2M
  1122 CC8D F5 DE			.byte	$F5,$DE
  1123 CC8F F5 56			.byte	$F5,$56
  1124 CC91 F9 54			.byte	$F9,$54
  1125 CC93 FD 58			.byte	$FD,$58
  1126 CC95 FB D4			.byte	$FB,$D4
  1127 CC97 F9 F4			.byte	$F9,$F4
  1128 CC99 F9 5E			.byte	$F9,$5E
  1129 CC9B F7 FE			.byte	$F7,$FE		;ROCK3M
  1130 CC9D F9 76			.byte	$F9,$76
  1131 CC9F F9 55			.byte	$F9,$55
  1132 CCA1 FF D6			.byte	$FF,$D6
  1133 CCA3 F9 56			.byte	$F9,$56
  1134 CCA5 F9 56			.byte	$F9,$56
  1135 CCA7 FB 56			.byte	$FB,$56
  1136 CCA9 FF F6			.byte	$FF,$F6
  1137 CCAB 00 00			.byte	$00,$00		;ROCKEM
  1138 CCAD 01 00			.byte	$01,$00
  1139 CCAF 04 50			.byte	$04,$50
  1140 CCB1 09 10			.byte	$09,$10
  1141 CCB3 00 00			.byte	$00,$00
  1142 CCB5 02 00			.byte	$02,$00		;SHIP
  1143 CCB7 02 80			.byte	$02,$80
  1144 CCB9 00 E0			.byte	$00,$E0
  1145 CCBB 00 00			.byte	$00,$00
  1146 CCBD 2C 00			.byte	$2C,$00
  1147 CCBF 0A 00			.byte	$0A,$00
  1148 CCC1 0E 00			.byte	$0E,$00
  1149 CCC3 02 80			.byte	$02,$80
  1150 CCC5 2F E0			.byte	$2F,$E0
  1151 CCC7 0A 00			.byte	$0A,$00
  1152 CCC9 02 C0			.byte	$02,$C0
  1153 CCCB 02 80			.byte	$02,$80
  1154 CCCD 00 E0			.byte	$00,$E0
  1155 CCCF 00 00			.byte	$00,$00
  1156 CCD1 2C 00			.byte	$2C,$00
  1157 CCD3 0A 00			.byte	$0A,$00
  1158 CCD5 05 10			.byte	$05,$10		;SHIPE
  1159 CCD7 25 04			.byte	$25,$04
  1160 CCD9 1A 22			.byte	$1A,$22
  1161 CCDB 28 00			.byte	$28,$00
  1162 CCDD 88 20			.byte	$88,$20
  1163 CCDF 20 00			.byte	$20,$00
  1164 CCE1 39 54			.byte	$39,$54		;UFOL
  1165 CCE3 39 54			.byte	$39,$54
  1166 CCE5 39 54			.byte	$39,$54
  1167 CCE7 39 54			.byte	$39,$54
  1168 CCE9 AA				.byte	$AA		;UFOS
  1169 CCEA AA				.byte	$AA
  1170 CCEB AA				.byte	$AA
  1171 CCEC AA				.byte	$AA
  1172 CCED E5				.byte	$E5		;ROCK1S
  1173 CCEE 35				.byte	$35
  1174 CCEF F5				.byte	$F5
  1175 CCF0 EC				.byte	$EC
  1176 CCF1 E5				.byte	$E5		;ROCK2S
  1177 CCF2 F5				.byte	$F5
  1178 CCF3 DD				.byte	$DD
  1179 CCF4 E5				.byte	$E5
  1180 CCF5 D4				.byte	$D4		;ROCK3S
  1181 CCF6 15				.byte	$15
  1182 CCF7 D6				.byte	$D6
  1183 CCF8 D5				.byte	$D5
  1184 CCF9 24				.byte	$24		;ROCKES
  1185 CCFA B6				.byte	$B6
  1186 CCFB 02				.byte	$02
  1187 CCFC 0C				.byte	$0C
  1188 CCFD 0C				.byte	$0C
  1189 CCFE 00				.byte	$00		;SHOT
  1190 CCFF 00				.byte	$00
  1191
  1192 CD00				ORG     GRAPHICS+$D00	;14
  1193 				********************************************************************************
  1194 CD00 0E 95 00			.byte	$0E,$95,$00	;ROCK1L
  1195 CD03 0E A5 00			.byte	$0E,$A5,$00
  1196 CD06 0E 65 00			.byte	$0E,$65,$00
  1197 CD09 0E 95 00			.byte	$0E,$95,$00
  1198 CD0C 0E 9D 00			.byte	$0E,$9D,$00
  1199 CD0F 0E BC 00			.byte	$0E,$BC,$00
  1200 CD12 0E BD 00			.byte	$0E,$BD,$00
  1201 CD15 0E 96 00			.byte	$0E,$96,$00
  1202 CD18 0E A5 00			.byte	$0E,$A5,$00
  1203 CD1B 0E 95 00			.byte	$0E,$95,$00
  1204 CD1E 0D 97 00			.byte	$0D,$97,$00
  1205 CD21 0E 9D 00			.byte	$0E,$9D,$00
  1206 CD24 0E 95 00			.byte	$0E,$95,$00	;ROCK2L
  1207 CD27 0E 95 00			.byte	$0E,$95,$00
  1208 CD2A 0E 95 00			.byte	$0E,$95,$00
  1209 CD2D 0E 55 00			.byte	$0E,$55,$00
  1210 CD30 0F 55 00			.byte	$0F,$55,$00
  1211 CD33 0E A7 00			.byte	$0E,$A7,$00
  1212 CD36 0E 95 00			.byte	$0E,$95,$00
  1213 CD39 0E 55 00			.byte	$0E,$55,$00
  1214 CD3C 0E 55 00			.byte	$0E,$55,$00
  1215 CD3F 0E 95 00			.byte	$0E,$95,$00
  1216 CD42 0E 95 00			.byte	$0E,$95,$00
  1217 CD45 0E 97 00			.byte	$0E,$97,$00
  1218 CD48 0E F5 00			.byte	$0E,$F5,$00	;ROCK3L
  1219 CD4B 0E E5 00			.byte	$0E,$E5,$00
  1220 CD4E 0E F5 00			.byte	$0E,$F5,$00
  1221 CD51 0E F5 00			.byte	$0E,$F5,$00
  1222 CD54 0E F5 00			.byte	$0E,$F5,$00
  1223 CD57 0E F7 00			.byte	$0E,$F7,$00
  1224 CD5A 0E F7 00			.byte	$0E,$F7,$00
  1225 CD5D 0E F5 00			.byte	$0E,$F5,$00
  1226 CD60 0E F5 00			.byte	$0E,$F5,$00
  1227 CD63 0E F5 00			.byte	$0E,$F5,$00
  1228 CD66 0F F5 00			.byte	$0F,$F5,$00
  1229 CD69 0F F5 00			.byte	$0F,$F5,$00
  1230 CD6C 00 00 00			.byte	$00,$00,$00	;ROCKEL
  1231 CD6F 00 08 00			.byte	$00,$08,$00
  1232 CD72 00 40 00			.byte	$00,$40,$00
  1233 CD75 08 10 00			.byte	$08,$10,$00
  1234 CD78 00 10 00			.byte	$00,$10,$00
  1235 CD7B 39 54			.byte	$39,$54	;ROCK1M
  1236 CD7D 39 54			.byte	$39,$54
  1237 CD7F 0E 54			.byte	$0E,$54
  1238 CD81 3A 94			.byte	$3A,$94
  1239 CD83 3A 50			.byte	$3A,$50
  1240 CD85 3E 90			.byte	$3E,$90
  1241 CD87 3D 60			.byte	$3D,$60
  1242 CD89 3E 58			.byte	$3E,$58
  1243 CD8B 39 54			.byte	$39,$54	;ROCK2M
  1244 CD8D 39 7C			.byte	$39,$7C
  1245 CD8F 39 74			.byte	$39,$74
  1246 CD91 39 58			.byte	$39,$58
  1247 CD93 39 58			.byte	$39,$58
  1248 CD95 3B 58			.byte	$3B,$58
  1249 CD97 39 F8			.byte	$39,$F8
  1250 CD99 39 5C			.byte	$39,$5C
  1251 CD9B 39 D4			.byte	$39,$D4	;ROCK3M
  1252 CD9D 39 54			.byte	$39,$54
  1253 CD9F 3F 54			.byte	$3F,$54
  1254 CDA1 39 54			.byte	$39,$54
  1255 CDA3 39 54			.byte	$39,$54
  1256 CDA5 3E 54			.byte	$3E,$54
  1257 CDA7 3F D8			.byte	$3F,$D8
  1258 CDA9 3F F8			.byte	$3F,$F8
  1259 CDAB 00 00			.byte	$00,$00	;ROCKEM
  1260 CDAD 00 00			.byte	$00,$00
  1261 CDAF 10 80			.byte	$10,$80
  1262 CDB1 04 08			.byte	$04,$08
  1263 CDB3 00 00			.byte	$00,$00
  1264 CDB5 02 00			.byte	$02,$00	;SHIP
  1265 CDB7 00 80			.byte	$00,$80
  1266 CDB9 00 00			.byte	$00,$00
  1267 CDBB 00 00			.byte	$00,$00
  1268 CDBD 00 00			.byte	$00,$00
  1269 CDBF 08 00			.byte	$08,$00
  1270 CDC1 42 00			.byte	$42,$00
  1271 CDC3 03 80			.byte	$03,$80
  1272 CDC5 20 20			.byte	$20,$20
  1273 CDC7 0B 00			.byte	$0B,$00
  1274 CDC9 02 04			.byte	$02,$04
  1275 CDCB 00 80			.byte	$00,$80
  1276 CDCD 00 00			.byte	$00,$00
  1277 CDCF 00 00			.byte	$00,$00
  1278 CDD1 00 00			.byte	$00,$00
  1279 CDD3 08 00			.byte	$08,$00
  1280 CDD5 06 00			.byte	$06,$00	;SHIPE
  1281 CDD7 17 00			.byte	$17,$00
  1282 CDD9 9A 00			.byte	$9A,$00
  1283 CDDB A8 20			.byte	$A8,$20
  1284 CDDD E0 00			.byte	$E0,$00
  1285 CDDF 00 08			.byte	$00,$08
  1286 CDE1 0E 50			.byte	$0E,$50	;UFOL
  1287 CDE3 0E 50			.byte	$0E,$50
  1288 CDE5 0E 50			.byte	$0E,$50
  1289 CDE7 0E 50			.byte	$0E,$50
  1290 CDE9 75				.byte	$75		;UFOS
  1291 CDEA 75				.byte	$75
  1292 CDEB 75				.byte	$75
  1293 CDEC 75				.byte	$75
  1294 CDED D5				.byte	$D5		;ROCK1S
  1295 CDEE F5				.byte	$F5
  1296 CDEF DD				.byte	$DD
  1297 CDF0 E7				.byte	$E7
  1298 CDF1 F5				.byte	$F5		;ROCK2S
  1299 CDF2 D5				.byte	$D5
  1300 CDF3 DD				.byte	$DD
  1301 CDF4 D7				.byte	$D7
  1302 CDF5 D4				.byte	$D4		;ROCK3S
  1303 CDF6 D5				.byte	$D5
  1304 CDF7 D5				.byte	$D5
  1305 CDF8 DD				.byte	$DD
  1306 CDF9 18				.byte	$18		;ROCKES
  1307 CDFA 04				.byte	$04
  1308 CDFB 88				.byte	$88
  1309 CDFC 02				.byte	$02
  1310 CDFD 02				.byte	$02
  1311 CDFE 00				.byte	$00		;SHOT
  1312 CDFF 00				.byte	$00
  1313
  1314 CE00				ORG     GRAPHICS+$E00	;15
  1315 				********************************************************************************
  1316 CE00 0F A9 00			.byte	$0F,$A9,$00	;ROCK1L
  1317 CE03 0F 95 00			.byte	$0F,$95,$00
  1318 CE06 0F 95 00			.byte	$0F,$95,$00
  1319 CE09 0F A5 00			.byte	$0F,$A5,$00
  1320 CE0C 0F A5 00			.byte	$0F,$A5,$00
  1321 CE0F 0F B5 00			.byte	$0F,$B5,$00
  1322 CE12 0F F5 00			.byte	$0F,$F5,$00
  1323 CE15 0F F5 00			.byte	$0F,$F5,$00
  1324 CE18 0F E9 00			.byte	$0F,$E9,$00
  1325 CE1B 0F A5 00			.byte	$0F,$A5,$00
  1326 CE1E 0F A5 00			.byte	$0F,$A5,$00
  1327 CE21 0F AD 00			.byte	$0F,$AD,$00
  1328 CE24 0F A5 00			.byte	$0F,$A5,$00	;ROCK2L
  1329 CE27 0F A5 00			.byte	$0F,$A5,$00
  1330 CE2A 0F A5 00			.byte	$0F,$A5,$00
  1331 CE2D 0F 95 00			.byte	$0F,$95,$00
  1332 CE30 0F A5 00			.byte	$0F,$A5,$00
  1333 CE33 0F FE 00			.byte	$0F,$FE,$00
  1334 CE36 0F E5 00			.byte	$0F,$E5,$00
  1335 CE39 0F E5 00			.byte	$0F,$E5,$00
  1336 CE3C 0F D5 00			.byte	$0F,$D5,$00
  1337 CE3F 0F D5 00			.byte	$0F,$D5,$00
  1338 CE42 0F D5 00			.byte	$0F,$D5,$00
  1339 CE45 0F D5 00			.byte	$0F,$D5,$00
  1340 CE48 0F 96 00			.byte	$0F,$96,$00	;ROCK3L
  1341 CE4B 0F 96 00			.byte	$0F,$96,$00
  1342 CE4E 0F 96 00			.byte	$0F,$96,$00
  1343 CE51 0F 96 00			.byte	$0F,$96,$00
  1344 CE54 0F 96 00			.byte	$0F,$96,$00
  1345 CE57 0F 96 00			.byte	$0F,$96,$00
  1346 CE5A 0F E6 00			.byte	$0F,$E6,$00
  1347 CE5D 0F D6 00			.byte	$0F,$D6,$00
  1348 CE60 0F D6 00			.byte	$0F,$D6,$00
  1349 CE63 0F D6 00			.byte	$0F,$D6,$00
  1350 CE66 0F 96 00			.byte	$0F,$96,$00
  1351 CE69 0F D6 00			.byte	$0F,$D6,$00
  1352 CE6C 00 00 00			.byte	$00,$00,$00	;ROCKEL
  1353 CE6F 00 00 00			.byte	$00,$00,$00
  1354 CE72 00 08 00			.byte	$00,$08,$00
  1355 CE75 00 04 30			.byte	$00,$04,$30
  1356 CE78 0C 00 00			.byte	$0C,$00,$00
  1357 CE7B 0A 50			.byte	$0A,$50	;ROCK1M
  1358 CE7D 0A 50			.byte	$0A,$50
  1359 CE7F 0D 50			.byte	$0D,$50
  1360 CE81 0D 50			.byte	$0D,$50
  1361 CE83 0E 50			.byte	$0E,$50
  1362 CE85 0E 50			.byte	$0E,$50
  1363 CE87 0F 50			.byte	$0F,$50
  1364 CE89 0D 50			.byte	$0D,$50
  1365 CE8B 3A 5C			.byte	$3A,$5C	;ROCK2M
  1366 CE8D 3A 54			.byte	$3A,$54
  1367 CE8F 3A 5C			.byte	$3A,$5C
  1368 CE91 3A 6C			.byte	$3A,$6C
  1369 CE93 3A 6C			.byte	$3A,$6C
  1370 CE95 39 5C			.byte	$39,$5C
  1371 CE97 3A E8			.byte	$3A,$E8
  1372 CE99 3A 7C			.byte	$3A,$7C
  1373 CE9B 3A 58			.byte	$3A,$58	;ROCK3M
  1374 CE9D 3E 58			.byte	$3E,$58
  1375 CE9F 3A 58			.byte	$3A,$58
  1376 CEA1 3A 58			.byte	$3A,$58
  1377 CEA3 0A 58			.byte	$0A,$58
  1378 CEA5 0F 5C			.byte	$0F,$5C
  1379 CEA7 0F DB			.byte	$0F,$DB
  1380 CEA9 3B 58			.byte	$3B,$58
  1381 CEAB 00 00			.byte	$00,$00	;ROCKEM
  1382 CEAD 00 00			.byte	$00,$00
  1383 CEAF 00 00			.byte	$00,$00
  1384 CEB1 40 80			.byte	$40,$80
  1385 CEB3 20 03			.byte	$20,$03
  1386 CEB5 02 00			.byte	$02,$00	;SHIP
  1387 CEB7 00 00			.byte	$00,$00
  1388 CEB9 00 00			.byte	$00,$00
  1389 CEBB 00 00			.byte	$00,$00
  1390 CEBD 00 00			.byte	$00,$00
  1391 CEBF 00 00			.byte	$00,$00
  1392 CEC1 02 00			.byte	$02,$00
  1393 CEC3 04 80			.byte	$04,$80
  1394 CEC5 01 00			.byte	$01,$00
  1395 CEC7 08 40			.byte	$08,$40
  1396 CEC9 02 00			.byte	$02,$00
  1397 CECB 00 00			.byte	$00,$00
  1398 CECD 00 00			.byte	$00,$00
  1399 CECF 00 00			.byte	$00,$00
  1400 CED1 00 00			.byte	$00,$00
  1401 CED3 00 00			.byte	$00,$00
  1402 CED5 07 00			.byte	$07,$00	;SHIPE
  1403 CED7 20 00			.byte	$20,$00
  1404 CED9 00 00			.byte	$00,$00
  1405 CEDB 24 80			.byte	$24,$80
  1406 CEDD 28 08			.byte	$28,$08
  1407 CEDF 00 00			.byte	$00,$00
  1408 CEE1 02 40			.byte	$02,$40	;UFOL
  1409 CEE3 02 40			.byte	$02,$40
  1410 CEE5 02 40			.byte	$02,$40
  1411 CEE7 02 40			.byte	$02,$40
  1412 CEE9 3C				.byte	$3C		;UFOS
  1413 CEEA 28				.byte	$28
  1414 CEEB 28				.byte	$28
  1415 CEEC 28				.byte	$28
  1416 CEED E6				.byte	$E6		;ROCK1S
  1417 CEEE E4				.byte	$E4
  1418 CEEF D6				.byte	$D6
  1419 CEF0 E5				.byte	$E5
  1420 CEF1 D6				.byte	$D6		;ROCK2S
  1421 CEF2 DD				.byte	$DD
  1422 CEF3 E5				.byte	$E5
  1423 CEF4 E4				.byte	$E4
  1424 CEF5 D5				.byte	$D5		;ROCK3S
  1425 CEF6 15				.byte	$15
  1426 CEF7 35				.byte	$35
  1427 CEF8 DD				.byte	$DD
  1428 CEF9 20				.byte	$20		;ROCKES
  1429 CEFA 1E				.byte	$1E
  1430 CEFB 02				.byte	$02
  1431 CEFC 00				.byte	$00
  1432 CEFD 00				.byte	$00
  1433 CEFE 00				.byte	$00		;SHOT
  1434 CEFF			STAR2:
  1435 CEFF 0C				.byte	$0C
  1436
  1437 CF00				ORG     GRAPHICS+$F00	;16
  1438 				********************************************************************************
  1439 CF00			ROCK1L1:
  1440 CF00 03 F8 00			.byte	$03,$F8,$00
  1441 CF03			ROCK1L2:
  1442 CF03 03 E8 00			.byte	$03,$E8,$00
  1443 CF06			ROCK1L3:
  1444 CF06 03 E8 00			.byte	$03,$E8,$00
  1445 CF09			ROCK1L4:
  1446 CF09 03 E8 00			.byte	$03,$E8,$00
  1447 CF0C			ROCK1L5:
  1448 CF0C 03 E8 00			.byte	$03,$E8,$00
  1449 CF0F			ROCK1L6:
  1450 CF0F 03 E8 00			.byte	$03,$E8,$00
  1451 CF12			ROCK1L7:
  1452 CF12 03 D8 00			.byte	$03,$D8,$00
  1453 CF15			ROCK1L8:
  1454 CF15 03 E8 00			.byte	$03,$E8,$00
  1455 CF18			ROCK1L9:
  1456 CF18 03 E8 00			.byte	$03,$E8,$00
  1457 CF1B			ROCK1L10:
  1458 CF1B 03 E8 00			.byte	$03,$E8,$00
  1459 CF1E			ROCK1L11:
  1460 CF1E 03 E8 00			.byte	$03,$E8,$00
  1461 CF21			ROCK1L12:
  1462 CF21 03 E8 00			.byte	$03,$E8,$00
  1463 CF24			ROCK2L1:
  1464 CF24 03 F8 00			.byte	$03,$F8,$00
  1465 CF27			ROCK2L2:
  1466 CF27 03 E8 00			.byte	$03,$E8,$00
  1467 CF2A			ROCK2L3:
  1468 CF2A 03 E8 00			.byte	$03,$E8,$00
  1469 CF2D			ROCK2L4:
  1470 CF2D 03 F8 00			.byte	$03,$F8,$00
  1471 CF30			ROCK2L5:
  1472 CF30 03 F8 00			.byte	$03,$F8,$00
  1473 CF33			ROCK2L6:
  1474 CF33 03 F8 00			.byte	$03,$F8,$00
  1475 CF36			ROCK2L7:
  1476 CF36 03 FC 00			.byte	$03,$FC,$00
  1477 CF39			ROCK2L8:
  1478 CF39 03 FC 00			.byte	$03,$FC,$00
  1479 CF3C			ROCK2L9:
  1480 CF3C 03 F8 00			.byte	$03,$F8,$00
  1481 CF3F			ROCK2L10:
  1482 CF3F 03 F8 00			.byte	$03,$F8,$00
  1483 CF42			ROCK2L11:
  1484 CF42 03 F8 00			.byte	$03,$F8,$00
  1485 CF45			ROCK2L12:
  1486 CF45 03 F8 00			.byte	$03,$F8,$00
  1487 CF48			ROCK3L1:
  1488 CF48 00 E0 00			.byte	$00,$E0,$00
  1489 CF4B			ROCK3L2:
  1490 CF4B 00 E0 00			.byte	$00,$E0,$00
  1491 CF4E			ROCK3L3:
  1492 CF4E 00 E0 00			.byte	$00,$E0,$00
  1493 CF51			ROCK3L4:
  1494 CF51 00 E0 00			.byte	$00,$E0,$00
  1495 CF54			ROCK3L5:
  1496 CF54 00 E0 00			.byte	$00,$E0,$00
  1497 CF57			ROCK3L6:
  1498 CF57 00 E0 00			.byte	$00,$E0,$00
  1499 CF5A			ROCK3L7:
  1500 CF5A 00 E0 00			.byte	$00,$E0,$00
  1501 CF5D			ROCK3L8:
  1502 CF5D 00 E0 00			.byte	$00,$E0,$00
  1503 CF60			ROCK3L9:
  1504 CF60 00 E0 00			.byte	$00,$E0,$00
  1505 CF63			ROCK3L10:
  1506 CF63 00 E0 00			.byte	$00,$E0,$00
  1507 CF66			ROCK3L11:
  1508 CF66 00 E0 00			.byte	$00,$E0,$00
  1509 CF69			ROCK3L12:
  1510 CF69 00 E0 00			.byte	$00,$E0,$00
  1511 CF6C			ROCKEL1:
  1512 CF6C 00 00 00			.byte	$00,$00,$00
  1513 CF6F			ROCKEL2:
  1514 CF6F 00 00 00			.byte	$00,$00,$00
  1515 CF72			ROCKEL3:
  1516 CF72 00 00 00			.byte	$00,$00,$00
  1517 CF75			ROCKEL4:
  1518 CF75 00 04 00			.byte	$00,$04,$00
  1519 CF78			ROCKEL5:
  1520 CF78 00 20 00			.byte	$00,$20,$00
  1521 CF7B			ROCK1M1:
  1522 CF7B 02 80			.byte	$02,$80
  1523 CF7D			ROCK1M2:
  1524 CF7D 00 80			.byte	$00,$80
  1525 CF7F			ROCK1M3:
  1526 CF7F 00 80			.byte	$00,$80
  1527 CF81			ROCK1M4:
  1528 CF81 02 80			.byte	$02,$80
  1529 CF83			ROCK1M5:
  1530 CF83 00 80			.byte	$00,$80
  1531 CF85			ROCK1M6:
  1532 CF85 02 00			.byte	$02,$00
  1533 CF87			ROCK1M7:
  1534 CF87 02 80			.byte	$02,$80
  1535 CF89			ROCK1M8:
  1536 CF89 03 40			.byte	$03,$40
  1537 CF8B			ROCK2M1:
  1538 CF8B 0E B0			.byte	$0E,$B0
  1539 CF8D			ROCK2M2:
  1540 CF8D 0E A0			.byte	$0E,$A0
  1541 CF8F			ROCK2M3:
  1542 CF8F 0D A0			.byte	$0D,$A0
  1543 CF91			ROCK2M4:
  1544 CF91 0E A0			.byte	$0E,$A0
  1545 CF93			ROCK2M5:
  1546 CF93 0E A0			.byte	$0E,$A0
  1547 CF95			ROCK2M6:
  1548 CF95 0E A0			.byte	$0E,$A0
  1549 CF97			ROCK2M7:
  1550 CF97 0E A0			.byte	$0E,$A0
  1551 CF99			ROCK2M8:
  1552 CF99 0E B0			.byte	$0E,$B0
  1553 CF9B			ROCK3M1:
  1554 CF9B 0E A0			.byte	$0E,$A0
  1555 CF9D			ROCK3M2:
  1556 CF9D 0E A0			.byte	$0E,$A0
  1557 CF9F			ROCK3M3:
  1558 CF9F 0E A0			.byte	$0E,$A0
  1559 CFA1			ROCK3M4:
  1560 CFA1 0E A0			.byte	$0E,$A0
  1561 CFA3			ROCK3M5:
  1562 CFA3 02 A0			.byte	$02,$A0
  1563 CFA5			ROCK3M6:
  1564 CFA5 00 A0			.byte	$00,$A0
  1565 CFA7			ROCK3M7:
  1566 CFA7 02 A0			.byte	$02,$A0
  1567 CFA9			ROCK3M8:
  1568 CFA9 0E A0			.byte	$0E,$A0
  1569 CFAB			ROCKEM1:
  1570 CFAB 00 00			.byte	$00,$00
  1571 CFAD			ROCKEM2:
  1572 CFAD 00 00			.byte	$00,$00
  1573 CFAF			ROCKEM3:
  1574 CFAF 00 00			.byte	$00,$00
  1575 CFB1			ROCKEM4:
  1576 CFB1 00 00			.byte	$00,$00
  1577 CFB3			ROCKEM5:
  1578 CFB3 42 00			.byte	$42,$00
  1579 CFB5			SHIP1:
  1580 CFB5 00 00			.byte	$00,$00
  1581 CFB7			SHIP2:
  1582 CFB7 00 00			.byte	$00,$00
  1583 CFB9			SHIP3:
  1584 CFB9 00 00			.byte	$00,$00
  1585 CFBB			SHIP4:
  1586 CFBB 00 00			.byte	$00,$00
  1587 CFBD			SHIP5:
  1588 CFBD 00 00			.byte	$00,$00
  1589 CFBF			SHIP6:
  1590 CFBF 00 00			.byte	$00,$00
  1591 CFC1			SHIP7:
  1592 CFC1 00 00			.byte	$00,$00
  1593 CFC3			SHIP8:
  1594 CFC3 04 00			.byte	$04,$00
  1595 CFC5			SHIP9:
  1596 CFC5 01 00			.byte	$01,$00
  1597 CFC7			SHIP10:
  1598 CFC7 00 40			.byte	$00,$40
  1599 CFC9			SHIP11:
  1600 CFC9 00 00			.byte	$00,$00
  1601 CFCB			SHIP12:
  1602 CFCB 00 00			.byte	$00,$00
  1603 CFCD			SHIP13:
  1604 CFCD 00 00			.byte	$00,$00
  1605 CFCF			SHIP14:
  1606 CFCF 00 00			.byte	$00,$00
  1607 CFD1			SHIP15:
  1608 CFD1 00 00			.byte	$00,$00
  1609 CFD3			SHIP16:
  1610 CFD3 00 00			.byte	$00,$00
  1611 CFD5			SHIPE1:
  1612 CFD5 04 00			.byte	$04,$00
  1613 CFD7			SHIPE2:
  1614 CFD7 00 00			.byte	$00,$00
  1615 CFD9			SHIPE3:
  1616 CFD9 00 00			.byte	$00,$00
  1617 CFDB			SHIPE4:
  1618 CFDB 00 00			.byte	$00,$00
  1619 CFDD			SHIPE5:
  1620 CFDD 00 20			.byte	$00,$20
  1621 CFDF			SHIPE6:
  1622 CFDF 20 00			.byte	$20,$00
  1623 CFE1			UFOL1:
  1624 CFE1 02 40			.byte	$02,$40
  1625 CFE3			UFOL2:
  1626 CFE3 02 40			.byte	$02,$40
  1627 CFE5			UFOL3:
  1628 CFE5 02 40			.byte	$02,$40
  1629 CFE7			UFOL4:
  1630 CFE7 02 40			.byte	$02,$40
  1631 CFE9			UFOS1:
  1632 CFE9 34				.byte	$34
  1633 CFEA			UFOS2:
  1634 CFEA 34				.byte	$34
  1635 CFEB			UFOS3:
  1636 CFEB 34				.byte	$34
  1637 CFEC			UFOS4:
  1638 CFEC 34				.byte	$34
  1639 CFED			ROCK1S1:
  1640 CFED 34				.byte	$34
  1641 CFEE			ROCK1S2:
  1642 CFEE 34				.byte	$34
  1643 CFEF			ROCK1S3:
  1644 CFEF 34				.byte	$34
  1645 CFF0			ROCK1S4:
  1646 CFF0 34				.byte	$34
  1647 CFF1			ROCK2S1:
  1648 CFF1 34				.byte	$34
  1649 CFF2			ROCK2S2:
  1650 CFF2 38				.byte	$38
  1651 CFF3			ROCK2S3:
  1652 CFF3 34				.byte	$34
  1653 CFF4			ROCK2S4:
  1654 CFF4 38				.byte	$38
  1655 CFF5			ROCK3S1:
  1656 CFF5 34				.byte	$34
  1657 CFF6			ROCK3S2:
  1658 CFF6 04				.byte	$04
  1659 CFF7			ROCK3S3:
  1660 CFF7 04				.byte	$04
  1661 CFF8			ROCK3S4:
  1662 CFF8 34				.byte	$34
  1663 CFF9			ROCKES1:
  1664 CFF9 00				.byte	$00
  1665 CFFA			ROCKES2:
  1666 CFFA 20				.byte	$20
  1667 CFFB			ROCKES3:
  1668 CFFB 20				.byte	$20
  1669 CFFC			ROCKES4:
  1670 CFFC 20				.byte	$20
  1671 CFFD			ROCKES5:
  1672 CFFD 20				.byte	$20
  1673 CFFE			SHOT1:
  1674 CFFE 40				.byte	$40
  1675 CFFF 00				.byte	$00
    33 D000				icl	"MAIN.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\MAIN.asm
     1 				*         2100    030784
     2 				*
     3 				*
     4 				** MAIN.S **
     5 				** ASTEROIDS FOR THE ATARI 3600 *
     6 				** THIS FILE CONTAINS THE MAIN DRIVER. **
     7 D000				ORG	$D000	        ;MUST BE ON ODD (BLANK HOLY DMA) 4K PAG
     8 D000			CODE:
     9
    10 D000			ASTEROID:
    11 D000 78				SEI		        ;AND AWAY WE GO.....
    12 D001 D8				CLD
    13
    14 D002 A9 13			LDA     #$13	        ;LOCK INTO MARIA MODE, base unit rom
    15 								; *AND* DISCHARGE PADDLE INPUT CAPS
    16 D004 85 01			STA     PTCTRL	        ;STORE TO INPTCTRL
    17
    18 D006 A2 FF			LDX     #$FF		;SET UP THE STACK POINTER
    19 D008 9A				TXS
    20
    21 D009 A2 60			LDX     #$60
    22 D00B 86 3C			STX     CTRL		;OFF DMA
    23
    24 D00D A9 14			LDA     #$14		;SET JOYSTICK DIRECTION REGISTER
    25 D00F 8D 83 02			STA     CTLSWB		;TO SELECT TWO BUTTON MODE
    26
    27 D012 A9 00			LDA     #0
    28 D014 85 20			STA     BACKGRND	;BLACK BACKGROUND
    29 D016 85 38			STA     OFFSET		;FOR FUTURE EXPANSION
    30 D018 8D 82 02			STA     SWCHB		;SELECT TWO BUTTON MODE
    31 				;
    32 D01B 20 B5 F4			JSR     ZERORAM		;ZERO OUT RAM
    33
    34 D01E AD 84 02			LDA     INTIM		;SEED RANDOM PTRS FROM TIMER
    35 D021 29 1F			AND     #31		; ROUGHLY RANGE IT (NOTE: PTR1 MAY GO
    36 D023 85 40			STA     RANDPTR0	; OUT OF RANGE HERE, BUT IT'S OK AS
    37 D025 18				CLC			; LONG AS PTR0 DOESN'T GO OUT OF RANGE)
    38 D026 69 1F			ADC     #31		;31 IS A GOOD NUMBER FOR THIS
    39 D028 85 41			STA     RANDPTR1
    40
    41 D02A A2 36			LDX     #54		;DROP SOME CODE IN TO INIT RAND ARRAY
    42 D02C			DROPCODE:
    43 D02C BD 00 D0			LDA     CODE,X		;CODE IS PRETTY RANDOM.
    44 D02F 9D 00 21			STA     RAND,X		;AT LEAST OURS IS.
    45 D032 CA				DEX
    46 D033 10 F7			BPL     DROPCODE
    47
    48 D035 A9 01			LDA     #1		;SET UP MODE/DIFF
    49 D037 85 83			STA     DIFF
    50 D039 86 82			STX     MODE
    51 				*
    52 D03B 20 B0 FF			JSR     HSCSUCK		;SUCK IN HIGH SCORE, IF POSSIBLE
    53 D03E 20 3A F4			JSR     INITSCOR	;INITIALIZE SCORES
    54 D041 20 69 FC			JSR     LOADSTAR
    55
    56 D044 A9 00			LDA     #$00		;UNLOCK DISCHARGE TRANSISTOR FROM
    57 D046 85 01			STA     $0001		; PADDLE INPUT CAPS.
    58
    59
    60 D048 A9 01			LDA     #TITLEST	;INITIALIZE GAME STATE
    61 								;FALL THROUGH INTO....
    62 				* PROGRAM DRIVER STATE CHANGER: JMP HERE WITH NEW GAME STATE IN AC.
    63 D04A			NEWDRVR:
    64 D04A 85 7B			STA	GAMSTATE
    65 D04C A2 FF			LDX	#$FF		;MASH OUT THE STACK POINTER
    66 D04E 9A				TXS
    67 D04F E8				INX			;INITIALIZE DTIMER
    68 				;
    69 				;	LDX     #0
    70 				;
    71 D050 86 7C			STX     DTIMER
    72 D052 86 7D			STX     DTIMER+1
    73 D054 20 D0 F4			JSR     INITPALS	;PUT UP STANDARD COLORS
    74 D057 20 A6 F1			JSR     CLEARTUN	;CLEAR OUT ALL TUNES
    75 D05A 20 DB F4			JSR     NULLOBJS	;NULL OUT ALL OBJECTS.
    76 D05D 20 A9 FA			JSR     WAITLOAD	;WAIT FOR LOADER TO UPDATE
    77 D060 20 E8 F4			JSR     INITDMA		;BUILD DLLS FOR MARIA2
    78 								; AND STARTS DMA DURING VBLANK
    79 								;FALL THROUGH INTO....
    80 				* PROGRAM DRIVER: NEEDED TO HANDLE THE VARIOUS PROGRAM STATES.
    81 D063			DRIVER:
    82 D063 A5 76			LDA     FRMCNT		;INSURE THAT FRMCNT IS EVEN HERE
    83 D065 29 FE			AND     #$FE
    84 D067 85 76			STA     FRMCNT
    85
    86 D069 A5 7B			LDA     GAMSTATE	; FRAME COUNT AIN'T INC'ED DURING HSC
    87 D06B C9 04			CMP     #HSCST
    88 D06D F0 0D			BEQ     PASTINCF
    89
    90 D06F			FRAMSYNC:
    91 D06F A5 76			LDA     FRMCNT		;MAKE SURE AT LEAST ONE FRAME HAS
    92 D071 38				SEC			; GONE BY SINCE LAST FRAME SYNCH.
    93 D072 E5 77			SBC     LASTFRMC
    94 D074 C9 02			CMP     #2
    95 D076 90 F7			BCC     FRAMSYNC
    96 D078 A5 76			LDA     FRMCNT
    97 D07A 85 77			STA     LASTFRMC	;UPDATE LAST FRAME COUNT
    98
    99 D07C			PASTINCF:
   100 D07C E6 7D			INC     DTIMER+1	;INCREMENT THE TWO BYTE TIMER
   101 D07E D0 02			BNE     ZZNOINC9
   102 D080 E6 7C			INC     DTIMER
   103 D082			ZZNOINC9:
   104 D082 20 2D D6			JSR     CKJOY		;GET FRESH JOYSTICK INPUTS.
   105 D085 20 D1 D1			JSR     CKBUTS		;GET FRESH BUTTON INPUTS (DEBOUNCED).
   106 D088 20 0B FA			JSR     TWINKLE		;TWINKLE STARS ETC.
   107
   108 D08B A5 7B			LDA     GAMSTATE	;CHECK GAME STATE
   109 D08D C9 05			CMP     #PLAYST		;GAMEPLAY STATE
   110 D08F F0 76			BEQ     PLAYD
   111 D091 C9 03			CMP     #AUTOST		;AUTO PLAY STATE
   112 D093 F0 48			BEQ     AUTOD
   113 D095 C9 02			CMP     #MENUST		;MENU STATE
   114 D097 F0 7A			BEQ     MENUD
   115 D099 C9 01			CMP     #TITLEST	;TITLE STATE
   116 D09B F0 06			BEQ     TITLED
   117 D09D C9 04			CMP     #HSCST		;HIGH SCORE CART STATE
   118 D09F F0 4E			BEQ     HSCD
   119
   120 D0A1 D0 C0			BNE     DRIVER		;SAFETY TO PREVENT GOING ASTRAY
   121 								;NOT NEEDED IF WORKS PROPERLY SINCE
   122 								;MUST BE IN ONE OF THE ABOVE STATES.
   123
   124 				** DRIVER DISPACHER ROUTINES. **
   125
   126 				** TITLE PAGE STATE DISPACHER - HANDLES TIMING DURING TITLE PAGE. **
   127 D0A3			TITLED:
   128 D0A3 A5 B9			LDA     FIREBUT2
   129 D0A5 30 07			BMI     HESDEAD
   130 D0A7 A2 FF			LDX     #$FF
   131 D0A9 86 FE			STX     TURKEY
   132 D0AB CA				DEX
   133 D0AC 86 FF			STX     CHICKEN
   134 D0AE			HESDEAD:
   135 D0AE A5 BF			LDA     SWCHBITS
   136 D0B0 29 08			AND     #$08
   137 D0B2 F0 13			BEQ     JIM
   138 D0B4 AD 80 02			LDA     SWCHA
   139 D0B7 05 FF			ORA     CHICKEN
   140 D0B9 25 FE			AND     TURKEY
   141 D0BB 85 FE			STA     TURKEY
   142 D0BD 38				SEC
   143 D0BE 26 FF			ROL     CHICKEN
   144 D0C0 C9 F0			CMP     #$F0
   145 D0C2 D0 03			BNE     JIM
   146 D0C4 4C B5 D2			JMP     GO4IT
   147 D0C7			JIM:
   148
   149 D0C7 A5 7C			LDA     DTIMER	       ;CHECK TIMER
   150 				;
   151 				;	CMP     #TITLEONT	    ;TIME TO TURN TITLE ON?
   152 				;
   153 D0C9 D0 0B			BNE     ZCKTOFF
   154 D0CB 20 6D D1			JSR     ONTITLE	      ;YES
   155 D0CE 20 F3 F9			JSR     CLSCORE	      ;TAKE OFF THE SCORES
   156 D0D1			ZSEEJOY:
   157 D0D1 20 DE D1			JSR     SEEJOY
   158 D0D4 90 8D			BCC     DRIVER	       ;BCC = JMP
   159
   160 D0D6			ZCKTOFF:
   161 D0D6 C9 02			CMP     #TITLEOFT
   162 D0D8 D0 F7			BNE     ZSEEJOY
   163 D0DA 4C F4 D1			JMP     DOHSC	        ;FROM TITLE TO HSC
   164
   165 				** AUTO STATE DISPACHER. **
   166 D0DD			AUTOD:
   167 D0DD A5 7C			LDA     DTIMER
   168 D0DF C9 04			CMP     #AUTOOFFT	    ;DONE WITH AUTO PLAY YET?
   169 D0E1 D0 03			BNE     AUTOGO
   170 D0E3			MENUTOUT:
   171 D0E3 4C 1C D2			JMP     DOTITLE	      ;COME HERE AFTER AUTO OR MENU TIME OUT
   172 D0E6			AUTOGO:
   173 D0E6 20 F7 F7			JSR     GAMELOOP
   174 D0E9 20 DE D1			JSR     SEEJOY
   175 D0EC 4C 63 D0			JMP     DRIVER
   176
   177
   178 				** HIGH SCORE CART DISPATCHER.
   179 D0EF			HSCD:
   180 D0EF 20 C0 FF			JSR     HSCSHOW		;PUT UP ONE TABLE
   181 D0F2 A6 55			LDX     TEMP	        ;ADVANCE TO NEXT ENTRY
   182 D0F4 E8				INX
   183 D0F5 E0 0C			CPX     #12		;12 ENTRIES
   184 D0F7 B0 0B			BCS     OVERHSC
   185 D0F9 86 55			STX     TEMP
   186 D0FB AA				TAX		        ;TEST AC BITS:
   187 D0FC D0 F1			BNE     HSCD	         ; IF AC NON-ZERO, THEN TRY AGAIN
   188 D0FE 20 DE D1			JSR     SEEJOY	       ;CHECK FOR USER ACTIONS.
   189 D101 4C 63 D0			JMP     DRIVER
   190
   191 D104			OVERHSC:
   192 D104 4C 21 D2			JMP     DOAUTO	       ;FROM HSC TO AUTOPLAY
   193
   194
   195 				** PLAY STATE DISPATCHER. **
   196
   197 D107			PLAYD:
   198 D107 20 F7 F7			JSR     GAMELOOP	     ;DO ONE TIME THRU GAME PLAY
   199
   200 D10A 20 81 D1			JSR     SEEPAUZ	      ;CHANGE TO PAUSE IF PAUSE BUT. HIT
   201 D10D 20 EB D1			JSR     SEEBUTS
   202 D110 4C 63 D0			JMP     DRIVER
   203
   204
   205 				** MENU STATE DISPATCHER. **
   206 D113			MENUD:
   207 D113 A5 7C			LDA     DTIMER
   208 D115 C9 07			CMP     #MENUOFFT
   209 D117 F0 CA			BEQ     MENUTOUT	     ;MENU TIMED OUT
   210
   211 D119 20 34 D2			JSR     SELCHK	       ;READ SELECT INPUT, SET MODES
   212
   213 D11C 20 6D D1			JSR     ONTITLE	      ;PUT UP THE LOGO
   214
   215 					;PUT UP DIFFICULTY LEVEL ICON
   216 D11F A2 0A			LDX     #10
   217 D121 8A				TXA
   218 D122 18				CLC
   219 D123 65 83			ADC     DIFF
   220 D125 A8				TAY
   221 D126 20 3B FA			JSR     DOICON
   222
   223 					;PUT UP MODE ICON
   224 D129 A2 0B			LDX     #11
   225 D12B A9 0F			LDA     #15
   226 D12D 18				CLC
   227 D12E 65 82			ADC     MODE
   228 D130 A8				TAY
   229 D131 20 3B FA			JSR     DOICON
   230
   231 					;PUT UP SCORES
   232 D134 20 B5 F9			JSR     DOSCORE
   233
   234 					;NULL OUT BOTH SHIP ICONS
   235 D137 A9 FF			LDA     #$FF
   236 D139 85 98			STA     STATUS+12
   237 D13B 85 99			STA     STATUS+13
   238 					;PUT UP SHIP ICONS
   239 D13D A2 0C			LDX     #12
   240 D13F A0 16			LDY     #22
   241 D141 A5 82			LDA     MODE
   242 D143 30 12			BMI     MENU1PL	      ;ONE PLAYER
   243 D145 C8				INY
   244 D146 A5 82			LDA     MODE
   245 D148 F0 08			BEQ     MENU2PL	      ;TWO PLAYER INDIVIDUAL
   246 D14A C9 02			CMP     #2
   247 D14C D0 02			BNE     MENUTEAM
   248 D14E			MENUCOMP:
   249 D14E C8				INY		        ;TWO PLAYER COMPETITION
   250 D14F C8				INY
   251 D150			MENUTEAM:
   252 D150 C8				INY		        ;TWO PLAYER TEAM PLAY
   253 D151 C8				INY
   254 D152			MENU2PL:
   255 D152 20 3B FA			JSR     DOICON
   256 D155 C8				INY
   257 D156 E8				INX
   258 D157			MENU1PL:
   259 D157 20 3B FA			JSR     DOICON
   260
   261 					;CHECK FOR START GAME BUTTONS
   262 					;CAN'T USE SEEJOY HERE; DON'T WANT TO DO DOMENU, ETC.
   263 D15A A5 0C			LDA     INPT4
   264 D15C 10 0C			BPL     ZDOPLAYS	     ;JOYSTICK BUTTON HIT
   265 D15E A5 09			LDA     INPT4A
   266 D160 30 08			BMI     ZDOPLAYS
   267 D162 A5 BF			LDA     SWCHBITS
   268 D164 4A				LSR
   269 D165 B0 03			BCS     ZDOPLAYS	     ;RESET  BUTTON HIT
   270 D167 4C 63 D0			JMP     DRIVER	       ;NOTHING HIT: CONTINUE
   271 D16A			ZDOPLAYS:
   272 D16A 4C 0E D2			JMP     DOPLAY
   273
   274
   275 				***************************************
   276 				** ROUTINES USED BY THE DISPATCHERS. **
   277 				***************************************
   278
   279 				* ROUTINE TO PUT TITLE ON
   280 D16D			ONTITLE:
   281 D16D A2 09			LDX     #9		 ;PUT UP THE FIRST 10 ICONS
   282 D16F A0 09			LDY     #9
   283 D171			TITLELOP:
   284 D171 20 3B FA			JSR     DOICON	       ;PUT UP ICON Y IN SLOT X
   285 D174 88				DEY
   286 D175 CA				DEX
   287 D176 10 F9			BPL     TITLELOP
   288
   289 D178 A9 0E			LDA     #$0E	         ;CHANGE COLOR FOR NAME
   290 D17A 85 F1			STA     SOFTCOLR+9
   291 D17C A9 07			LDA     #$07
   292 D17E 85 F3			STA     SOFTCOLR+11
   293 				;         LDA     #$75	         ;BACKGROUND BARS WILL BE CYCLED
   294 				;         STA     SOFTCOLR+10
   295
   296 D180 60				RTS
   297
   298 				** MENU SELECT ROUTINES **
   299
   300 				* CHECK THE PAUSE BUTTON: HANG OUT HERE IF PRESSED, AND PERFORM PAUSE STUFF
   301 D181			SEEPAUZ:
   302 D181 A5 BF			LDA     SWCHBITS	     ;CHECK PAUSE BUTTON
   303 D183 29 08			AND     #$08
   304 D185 F0 2D			BEQ     PAUZRTS
   305
   306 					;WE NOW PAUSE FOR STATION IDENTIFICATION...
   307 D187			DOPAUZ:
   308 D187 A9 06			LDA     #PAUZST	      ;SHUT OFF TUNER ETC.
   309 D189 85 7B			STA     GAMSTATE
   310 D18B A9 00			LDA     #0
   311 D18D 85 19			STA     AUDV0
   312 D18F 85 1A			STA     AUDV1
   313 D191 85 7C			STA     DTIMER	       ;RESET TIMER FOR VIDEO OUT
   314 D193 85 7D			STA     DTIMER+1
   315
   316 D195			PAUZLOOP:
   317 D195 24 28			BIT     MSTAT	        ;SYNCH
   318 D197 30 FC			BMI     PAUZLOOP	     ; WAIT 'TILL ON SCREEN
   319 				;         BIT     MSTAT	        ; PROTECT AGAINST FLAKEY MSTAT
   320 				;         BMI     PAUZLOOP
   321 D199			ZPOSLOOP:
   322 D199 24 28			BIT     MSTAT
   323 D19B 10 FC			BPL     ZPOSLOOP	     ; WAIT 'TILL OFF SCREEN (IN VBLANK)
   324 				;         BIT     MSTAT
   325 				;         BPL     ZPOSLOOP
   326
   327 D19D E6 7D			INC     DTIMER+1	     ;BUMP TIMER
   328 D19F D0 04			BNE     ZZNOINC7
   329 D1A1 E6 7C			INC     DTIMER
   330 D1A3 30 22			BMI     VIDOFF	       ;TURN VIDEO OFF WHEN CLOCK ROLLS AROUND
   331 D1A5			ZZNOINC7:
   332 D1A5 20 D1 D1			JSR     CKBUTS	       ;CHECK PAUSE BUTTON
   333 D1A8 29 08			AND     #$08
   334 D1AA F0 09			BEQ     PAUZCKJY
   335
   336 					;PAUSE MODE IS OVER
   337 D1AC A9 05			LDA     #PLAYST
   338 D1AE 85 7B			STA     GAMSTATE	     ;RESTORE TUNER
   339
   340 D1B0 A9 40			LDA     #$40	         ;TURN ON DMA
   341 D1B2 85 3C			STA     CTRL
   342
   343 D1B4			PAUZRTS:
   344 D1B4 60				RTS
   345
   346 D1B5			PAUZCKJY:
   347 D1B5 AD 80 02			LDA     SWCHA
   348 D1B8 49 FF			EOR     #$FF
   349 D1BA D0 0F			BNE     VIDON	        ;TURN VIDEO ON WHEN JOYSTICK OR
   350 D1BC A5 0C			LDA     INPT4	        ; EITHER PLAYER'S BUTTONS ARE HIT.
   351 D1BE 25 0D			AND     INPT5	        ; (AND HI BITS, ACTIVE LO)
   352 D1C0 10 09			BPL     VIDON
   353 D1C2 20 EB D1			JSR     SEEBUTS	      ;CHECK FOR SELECT & RESET
   354 D1C5 90 CE			BCC     PAUZLOOP	     ;BCC = JMP
   355
   356
   357 D1C7			VIDOFF:
   358 D1C7 A9 60			LDA     #$60	         ; 60 = STOP DMA
   359 D1C9 D0 02			BNE     VIDSTOR	      ; BNE = JMP
   360
   361 D1CB			VIDON:
   362 D1CB A9 40			LDA     #$40	         ; 40 = START DMA
   363 D1CD			VIDSTOR:
   364 D1CD 85 3C			STA     CTRL
   365 D1CF D0 B6			BNE     DOPAUZ	       ; BNE = JMP
   366
   367 				* CHECK BUTTONS (PAUSE, RESET, SELECT) SAVING STATE FOR DEBOUNCING.
   368 				*         SETS ONES IN EACH BIT OF SWCHBITS ON POSITIVE TRANSITIONS.
   369 D1D1			CKBUTS:
   370 D1D1 AE 82 02			LDX     SWCHB
   371 D1D4 8A				TXA
   372 D1D5 45 BE			EOR     SWCHBVAL	     ;GET ALL BITS WHICH HAVE CHANGED
   373 D1D7 25 BE			AND     SWCHBVAL
   374 D1D9 85 BF			STA     SWCHBITS	     ;SAVE OLD VALUES OF CHANGED BITS
   375 D1DB 86 BE			STX     SWCHBVAL	     ;SAVE NEW VALUES OF ALL BITS
   376 D1DD 60				RTS
   377
   378 				* CHECK JOYSTICK/BUTTONS ETC. FOR CHANGE OF STATE
   379 D1DE			SEEJOY:
   380 D1DE A5 BC			LDA     STARTBUT	     ;CHECK FIRE BUTTON, NOT SET IN AUTOST
   381 								 ;NEEDED TO PREVENT GOING FROM AUTOST
   382 D1E0 10 2C			BPL     DOPLAY
   383 D1E2 AD 80 02			LDA     SWCHA	        ;CHECK JOYSTICK MOTION
   384 D1E5 29 F0			AND     #$F0
   385 D1E7 49 F0			EOR     #$F0
   386 D1E9 D0 12			BNE     DOMENU
   387 D1EB			SEEBUTS:
   388 D1EB A5 BF			LDA     SWCHBITS	     ;CHECK SELECT AND RESET BUTTONS
   389 D1ED 4A				LSR
   390 D1EE B0 1E			BCS     DOPLAY
   391 D1F0 4A				LSR
   392 D1F1 B0 0A			BCS     DOMENU
   393 D1F3 60				RTS
   394
   395 					;ENTER HSC STATE
   396 D1F4			DOHSC:
   397 D1F4 A9 00			LDA     #0		 ;LOWEST GAME OPTION FOR HSC
   398 D1F6 85 55			STA     TEMP
   399
   400 D1F8 A9 04			LDA     #HSCST
   401 D1FA 4C 4A D0			JMP     NEWDRVR
   402
   403 					;ENTER MENU STATE
   404 D1FD			DOMENU:
   405 D1FD A9 10			LDA     #SELDLY	      ;DEBOUNCE SELECTER
   406 D1FF 85 FA			STA     SELCNT
   407
   408 D201 A9 00			LDA     #0		 ;CLEAR MENLEFT
   409 D203 85 52			STA     MENLEFT
   410 D205 85 53			STA     MENLEFT2
   411 D207 85 54			STA     MENLEFTC
   412
   413 D209 A9 02			LDA     #MENUST	      ;JUMP INTO MENU STATE
   414 D20B 4C 4A D0			JMP     NEWDRVR
   415
   416 					;ENTER PLAY STATE
   417 D20E			DOPLAY:
   418 D20E 20 3A F4			JSR     INITSCOR
   419 D211 20 4F F4			JSR     INITPLAY
   420 D214 20 B5 F9			JSR     DOSCORE
   421
   422 D217 A9 05			LDA     #PLAYST	      ;GOTO PLAY STATE NOW
   423 D219 4C 4A D0			JMP     NEWDRVR
   424
   425 					;ENTER TITLE PAGE STATE
   426 D21C			DOTITLE:
   427 D21C A9 01			LDA     #TITLEST
   428 D21E 4C 4A D0			JMP     NEWDRVR
   429
   430 					;ENTER AUTOPLAY STATE
   431 D221			DOAUTO:
   432 D221 A9 00			LDA     #0		 ;CLEAR MENLEFT
   433 D223 85 52			STA     MENLEFT
   434 D225 85 53			STA     MENLEFT2
   435 D227 85 54			STA     MENLEFTC
   436
   437 D229 20 B5 F9			JSR     DOSCORE
   438
   439 D22C 20 4F F4			JSR     INITPLAY	     ;INITIALIZE FOR GAMEPLAY
   440 D22F A9 03			LDA     #AUTOST	      ;BUT ITS AUTOPLAY
   441 D231 4C 4A D0			JMP     NEWDRVR
   442
   443 D234			SELCHK:
   444 D234 AD 80 02			LDA     SWCHA	        ;P1 JSTICK
   445 D237 29 F0			AND     #$F0
   446 D239 49 F0			EOR     #$F0
   447 D23B D0 28			BNE     SELJOY
   448 D23D AD 82 02			LDA     SWCHB	        ;SELECT BUTTON
   449 D240 29 02			AND     #$02
   450 D242 F0 05			BEQ     SELBUT
   451 D244 A9 00			LDA     #0
   452 D246 85 FA			STA     SELCNT
   453 D248 60				RTS
   454
   455 D249			SELBUT:
   456 D249 C6 FA			DEC     SELCNT
   457 D24B 10 61			BPL     SELRTS
   458 D24D A2 10			LDX     #SELDLY
   459 D24F 86 FA			STX     SELCNT
   460
   461 D251 20 84 D2			JSR     INCDIFF
   462 D254 D0 58			BNE     SELRTS	       ;INC WORKED OK
   463 D256 A9 00			LDA     #MINDIFF	     ;INC HAD NO EFFECT, WRAP AROUND
   464 D258 85 83			STA     DIFF
   465 D25A 20 76 D2			JSR     INCMODE
   466 D25D D0 4F			BNE     SELRTS	       ;INC WORKED OK
   467 D25F A9 FF			LDA     #MINMODE
   468 D261 85 82			STA     MODE
   469 D263 D0 3E			BNE     SELCHNG	      ;MINMODE = $FF HERE, SO BNE = JMP
   470
   471 D265			SELJOY:
   472 D265 C6 FA			DEC     SELCNT
   473 D267 10 45			BPL     SELRTS
   474 D269 A2 10			LDX     #SELDLY
   475 D26B 86 FA			STX     SELCNT
   476
   477 D26D 0A				ASL
   478 D26E B0 14			BCS     INCDIFF
   479 D270 0A				ASL
   480 D271 B0 1B			BCS     DECDIFF
   481 D273 0A				ASL
   482 D274 B0 22			BCS     DECMODE
   483 				* FALL THROUGH TO...
   484 D276			INCMODE:
   485 D276 A6 82			LDX     MODE	         ;INCREMENT GAMEPLAY MODE
   486 D278 E0 01			CPX     #1		 ;HACK: WE STOP AT 1
   487 D27A F0 32			BEQ     SELRTS
   488 D27C E8				INX		        ;BIGGER HACK: PUSH X INTO RANGE.
   489 D27D BD B1 D2			LDA     ZHACKMOD+2,X	 ;BIGGEST HACK: TABLE LOOKUP NEXT MODE.
   490 D280 85 82			STA     MODE
   491 D282 10 1F			BPL     SELCHNG
   492
   493 D284			INCDIFF:
   494 D284 A5 83			LDA     DIFF	         ;INCREMENT INITIAL GAME DIFFICULTY
   495 D286 C9 03			CMP     #MAXDIFF
   496 D288 F0 24			BEQ     SELRTS
   497 D28A E6 83			INC     DIFF
   498 D28C 10 15			BPL     SELCHNG
   499
   500 D28E			DECDIFF:
   501 D28E A5 83			LDA     DIFF	         ;DECREMENT DIFFICULTY
   502 D290 C9 00			CMP     #MINDIFF
   503 D292 F0 1A			BEQ     SELRTS
   504 D294 C6 83			DEC     DIFF
   505 D296 10 0B			BPL     SELCHNG
   506
   507 D298			DECMODE:
   508 D298 A6 82			LDX     MODE		;DECREMENT MODE
   509 D29A E0 FF			CPX     #MINMODE
   510 D29C F0 10			BEQ     SELRTS
   511 D29E BD AF D2			LDA     ZHACKMOD,X
   512 D2A1 85 82			STA     MODE
   513
   514 D2A3			SELCHNG:
   515 D2A3 A9 00			LDA     #0		;HOLD DRIVER CLOCK AT ZERO
   516 D2A5 85 7C			STA     DTIMER
   517 D2A7 85 7D			STA     DTIMER+1
   518 				*
   519 D2A9 20 B0 FF			JSR     HSCSUCK		;SUCK IN A NEW HIGH SCORE FOR THIS LVL
   520 D2AC A9 11			LDA     #17		;JUST TO KNOCK OFF THE 'EQ' BIT
   521 D2AE			SELRTS:
   522 D2AE 60				RTS
   523
   524 D2AF			ZHACKMOD:
   525 D2AF FF 02 00 02 11 01		.byte	$FF,2,0,2,17,1         ;TABLE OF "NEXT MODES" TO KLUDGE IN.
   526
   527 D2B5			GO4IT:
   528 D2B5 A2 08			LDX     #8
   529 D2B7 A0 B2			LDY     #LARGE+$80
   530 D2B9			ZSNARD:
   531 D2B9 94 8C			STY     STATUS,X
   532 D2BB BD 11 FD			LDA     PALTAB,X
   533 D2BE 9D CB 1A			STA     PALS,X
   534 D2C1 AD E8 F3			LDA     ELBOUND+2
   535 D2C4 9D 2E 19			STA     ACYC,X
   536 D2C7 CA				DEX
   537 D2C8 10 EF			BPL     ZSNARD
   538 D2CA			STAY4IT:
   539 D2CA A5 76			LDA     FRMCNT
   540 D2CC 29 03			AND     #$03	         ;EVERY 4
   541 D2CE D0 0C			BNE     ZEATME
   542 D2D0 A5 76			LDA     FRMCNT
   543 D2D2 48				PHA
   544 D2D3 4A				LSR
   545 D2D4 85 76			STA     FRMCNT
   546 D2D6 20 4F DA			JSR     EXPLODE
   547 D2D9 68				PLA
   548 D2DA 85 76			STA     FRMCNT
   549 D2DC			ZEATME:
   550 D2DC 20 A9 FA			JSR     WAITLOAD
   551 D2DF A9 72			LDA     #114
   552 D2E1 8D D1 18			STA     YPOSH+9
   553 D2E4 A9 DE			LDA     #BEAG&255
   554 D2E6 8D 37 19			STA     ACYC+9
   555 D2E9 A9 4A			LDA     #$4A
   556 D2EB 8D D4 1A			STA     PALS+9
   557 D2EE 20 28 FA			JSR     LOGOBARS
   558 D2F1 20 2D D6			JSR     CKJOY
   559 D2F4 20 D1 D1			JSR     CKBUTS
   560 D2F7 20 DE D1			JSR     SEEJOY
   561 D2FA 90 CE			BCC     STAY4IT	      ;BCC = JMP
   562
   563
   564 				* NMI HANDLER: HANDLES NMI'S GENERATED EACH FRAME BY MARIA AT END OF VISIBLE.
   565 D2FC			NMI:
   566 D2FC 48				PHA		        ;SAVE STATE
   567 D2FD 8A				TXA
   568 D2FE 48				PHA
   569 D2FF 98				TYA
   570 D300 48				PHA
   571
   572 D301 D8				CLD
   573
   574 D302 A5 78			LDA     NMICTRL	      ;SEE IF WE ARE DOING HISCORE CART LOGO
   575 D304 F0 10			BEQ     NMIHNDL	      ; NO.  DO NORMAL HANDLER
   576 D306 D0 1E			bne	NMIOVER		;br always  1-Sept-88 *** Dave ***
   577 				*	STA     CTRL	         ; YES. SET READ MODE BITS OF CTRL
   578 D308 49 03			EOR     #$03	         ;      INVERT THE BITS
   579 D30A 85 78			STA     NMICTRL
   580 D30C 29 03			AND     #$03	         ;      IF <> 0 (ENTERING VBLANK)
   581 D30E D0 11			BNE     NMIINCFR	     ;        BUMP FRAME COUNT
   582 D310 20 EB 3F			JSR     HSCSETRS	     ;SET UP HSC REGISTERS (REFRESH COLORS)
   583 D313 4C 26 D3			JMP     NMIOVER
   584
   585 D316			NMIHNDL:
   586 D316 A5 76			LDA     FRMCNT
   587 D318 4A				LSR
   588 D319 90 03			BCC     NOLOAD	       ;EVERY OTHER FRAME, DON'T CALL LOADER
   589 D31B 20 C0 FA			JSR     LOADER
   590 D31E			NOLOAD:
   591 D31E 20 CD F1			JSR     TUNER	        ;DO TUNES
   592 D321			NMIINCFR:
   593 D321 E6 76			INC     FRMCNT	       ;BUMP FRAME COUNT
   594 D323 20 7A FA			JSR     REFRESH	      ;REFRESH OUR COLORS
   595
   596 D326			NMIOVER:
   597 D326 68				PLA		        ;RESTORE STATE
   598 D327 A8				TAY
   599 D328 68				PLA
   600 D329 AA				TAX
   601 D32A 68				PLA
   602 D32B			IRQ:
   603 D32B 40				RTI		        ;VECTOR IRQ'S TO THIS LABEL
    34 D32C				icl	"JOY.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\JOY.asm
     1 				*         2040    180684
     2 				*
     3 				** JOY.S **
     4 				** ASTEROIDS FOR THE ATARI 3600 **
     5 				** THIS FILE CONTAINS THE JOYSTICK HANDLING ROUTINE. **
     6
     7 D32C			JOY:
     8 D32C A6 79			LDX	PLAYER
     9 D32E B5 7E			LDA	STATE,X		;CHECK IF SHIP IS OK
    10 D330 F0 01			BEQ	EXECJOY		;ONLY CHECK JOYSTICK IF OK
    11 D332 60				RTS
    12
    13 D333			EXECJOY:
    14 D333 A6 8B			LDX	OFFPLAY2	;POWER STEERING BABY!
    15 D335 BD 59 18			LDA	XVELH+24,X	;CALCULATE RATE OF TURN
    16 D338 10 05			BPL	ZSTTEMP		;A VELOCITY DEPENDENT VALUE
    17 D33A 49 FF			EOR	#$FF
    18 D33C 18				CLC
    19 D33D 69 01			ADC	#1
    20 D33F			ZSTTEMP:
    21 D33F 85 55			STA	TEMP
    22 D341 BD 9B 18			LDA	YVELH+24,X
    23 D344 10 05			BPL	ZADDTEMP
    24 D346 49 FF			EOR	#$FF
    25 D348 18				CLC
    26 D349 69 01			ADC	#1
    27 D34B			ZADDTEMP:
    28 D34B 18				CLC
    29 D34C 65 55			ADC	TEMP
    30 D34E 85 55			STA	TEMP
    31 D350 A9 09			LDA	#9
    32 D352 E5 55			SBC	TEMP
    33 D354 85 55			STA	TEMP
    34
    35 D356 A6 79			LDX	PLAYER		  ;CHECK HYPERSPACE
    36 D358 B5 BA			LDA	HYPBUT1,X
    37 D35A 30 03			BMI	LDSWCH
    38 D35C 20 40 D5			JSR	HYPERSPC
    39
    40 D35F			LDSWCH:
    41 D35F A5 BD			LDA	SWCHAVAL	;GET JOYSTICK INPUT
    42 D361 A6 79			LDX	PLAYER
    43 D363 F0 04			BEQ	JOYONE
    44 D365 0A				ASL			;IF PLAYER2 THEN SHIFT 4 MORE
    45 D366 0A				ASL
    46 D367 0A				ASL
    47 D368 0A				ASL
    48 D369			JOYONE:
    49 D369			CKWEST:
    50 D369 0A				ASL			;SHIFT MSB INTO CARRY
    51 D36A 48				PHA			;SAVE ACC
    52 D36B B0 03			BCS	CKEAST		;IF SET THEN NEXT, ACTIVE LOW
    53 D36D 20 91 D3			JSR	ROTLEFT		;CLEAR, ROTATE LEFT
    54 D370			CKEAST:
    55 D370 68				PLA			;RESTORE ACC
    56 D371 0A				ASL			;CHECK WEST BIT
    57 D372 48				PHA			   ;SAVE ACC
    58 D373 B0 03			BCS	CKSOUTH		;IF SET THEN NEXT
    59 D375 20 89 D3			JSR	ROTRIGHT	;CLEAR, ROTATE RIGHT
    60 D378			CKSOUTH:
    61 D378 68				PLA
    62 D379 0A				ASL
    63 D37A 48				PHA
    64 D37B B0 06			BCS	CKNORTH
    65 D37D 20 4F D5			JSR	DAMPX
    66 D380 20 B9 D5			JSR	DAMPY
    67 D383			CKNORTH:
    68 D383 68				PLA			;RESTORE ACC
    69 D384 0A				ASL			;CHECK NORTH BIT
    70 D385 B0 1F			BCS	DAMPTHR		;IF SET THEN DAMP
    71 D387 90 57			BCC	ADDTHRST	;IF CLEAR THEN THRUST
    72
    73
    74 				*	    ROTATE SHIP ROUTINES
    75 D389			ROTRIGHT:
    76 D389 B5 C1			LDA	SHIPDIR,X
    77 D38B 38				SEC
    78 D38C E5 55			SBC	TEMP
    79 D38E 4C 96 D3			JMP	SETSDIR
    80
    81 D391			ROTLEFT:
    82 D391 B5 C1			LDA	SHIPDIR,X
    83 D393 18				CLC
    84 D394 65 55			ADC	TEMP
    85 D396			SETSDIR:
    86 D396 95 C1			STA	SHIPDIR,X
    87 D398 A4 8B			LDY	OFFPLAY2
    88 D39A 4A				LSR
    89 D39B 4A				LSR
    90 D39C 4A				LSR
    91 D39D 29 FE			AND	#$FE
    92 D39F 18				CLC
    93 D3A0 69 B5			ADC	#SHIP1&255
    94 D3A2 99 46 19			STA	ACYC+24,Y
    95 D3A5 60				RTS
    96
    97 				*	    DAMPEN THRUST ROUTINE
    98 D3A6			DAMPTHR:
    99 D3A6 A5 82			LDA	MODE		;IN ONE-AT-A-TIME PLAY,
   100 D3A8 C9 01			CMP	#01		; (I.E., MODES $FF AND $00),
   101 D3AA 30 0D			BMI	DAMPTN		; DON'T WORRY ABOUT OTHER PLAYER
   102 D3AC A5 7E			LDA	STATE		;ELSE MAKE SURE BOTH PLAYERS ARE OK.
   103 D3AE 05 7F			ORA	STATE+1		; IF EITHER IS NOT, IT MUST BE THE
   104 D3B0 D0 07			BNE	DAMPTN		; OTHER ONE! GO ON AS IF ONLY 1 IS OK.
   105 D3B2 A5 BD			LDA	SWCHAVAL	;ELSE MAKE SURE ONLY ONE THRUST TUNE IS
   106 D3B4 3D A9 D6			AND	THRBITS,X	; EVER PLAYING AT A TIME;
   107 D3B7 F0 05			BEQ	NODAMPTN	; (IF = 0, THEN *HE* IS THRUSTING)
   108 D3B9			DAMPTN:
   109 D3B9 A9 11			LDA	#$11		;DAMP THRUST TUNE
   110 D3BB 20 B7 F1			JSR	KILLTUNE	; (GET RID OF THE TUNE)
   111 D3BE			NODAMPTN:
   112
   113 D3BE A5 79			LDA	PLAYER
   114 D3C0 0A				ASL
   115 D3C1 0A				ASL
   116 D3C2 A8				TAY
   117 D3C3 A9 00			LDA	#$00
   118 D3C5 99 E9 00			STA	SOFTCOLR+1,Y
   119 D3C8 20 4F D5			JSR	DAMPX
   120 D3CB 20 B9 D5			JSR	DAMPY
   121
   122 				*	    CHECK THE FIRE BUTTON
   123 D3CE			CHKFIRE:
   124 D3CE A6 79			LDX	PLAYER
   125 D3D0 B5 B8			LDA	FIREBUT1,X
   126 D3D2 30 07			BMI	FRESET
   127 D3D4 B5 DB			LDA	FIRESTAT,X
   128 D3D6 D0 07			BNE	JOYBYE
   129 D3D8 4C 94 D4			JMP	DNSHOT
   130
   131 D3DB			FRESET:
   132 D3DB A9 00			LDA	#0
   133 D3DD 95 DB			STA	FIRESTAT,X
   134 D3DF			JOYBYE:
   135 D3DF 60				RTS
   136
   137 				*	    ADD THRUST ROUTINE
   138 D3E0			ADDTHRST:
   139 D3E0 A9 11			LDA	#$11		;ADD THRUST SOUND
   140 D3E2 20 5E F1			JSR	DOTUNE2		;ONLY IF NOT ALREADY PLAYING
   141
   142 D3E5 A5 79			LDA	PLAYER		;CHANGE COLOR OF THRUST FLAME
   143 D3E7 0A				ASL
   144 D3E8 0A				ASL
   145 D3E9 A8				TAY
   146 D3EA A9 4F			LDA	#$4F
   147 D3EC 99 E9 00			STA	SOFTCOLR+1,Y
   148
   149 D3EF A6 79			LDX	PLAYER
   150 D3F1 B5 C1			LDA	SHIPDIR,X
   151 D3F3 4A				LSR
   152 D3F4 4A				LSR
   153 D3F5 4A				LSR
   154 D3F6 4A				LSR
   155 D3F7 A8				TAY
   156
   157 D3F8 A6 8B			LDX	OFFPLAY2
   158 D3FA BD 38 18			LDA	XVELL+24,X
   159 D3FD 85 56			STA	TEMP+1
   160 D3FF BD 59 18			LDA	XVELH+24,X
   161 D402 4A				LSR
   162 D403 66 56			ROR	TEMP+1
   163 D405 4A				LSR
   164 D406 66 56			ROR	TEMP+1
   165 D408 4A				LSR
   166 D409 66 56			ROR	TEMP+1
   167 D40B 4A				LSR
   168 D40C 66 56			ROR	TEMP+1
   169
   170 D40E BD 7A 18			LDA	YVELL+24,X
   171 D411 85 57			STA	TEMP+2
   172 D413 BD 9B 18			LDA	YVELH+24,X
   173 D416 4A				LSR
   174 D417 66 57			ROR	TEMP+2
   175 D419 4A				LSR
   176 D41A 66 57			ROR	TEMP+2
   177 D41C 4A				LSR
   178 D41D 66 57			ROR	TEMP+2
   179 D41F 4A				LSR
   180 D420 66 57			ROR	TEMP+2
   181
   182 D422			XTHRUST:
   183 D422 B9 18 FE			LDA	MAXVECT,Y
   184 D425 10 0A			BPL	POSOXVEL
   185
   186 D427			NEGOXVEL:
   187 D427 A6 56			LDX	TEMP+1
   188 D429 10 14			BPL	ADDXVEL
   189 D42B C5 56			CMP	TEMP+1
   190 D42D 90 10			BCC	ADDXVEL
   191 D42F B0 08			BCS	DODAMPX
   192
   193 D431			POSOXVEL:
   194 D431 A6 56			LDX	TEMP+1
   195 D433 30 0A			BMI	ADDXVEL
   196 D435 C5 56			CMP	TEMP+1
   197 D437 B0 06			BCS	ADDXVEL
   198
   199 D439			DODAMPX:
   200 D439 20 4F D5			JSR	DAMPX
   201 D43C 4C 57 D4			JMP	YTHRUST
   202
   203 D43F			ADDXVEL:
   204 D43F B9 D8 FD			LDA	UNITVECT,Y
   205 D442 0A				ASL
   206 D443 0A				ASL
   207 D444 0A				ASL
   208 D445 A6 8B			LDX	OFFPLAY2
   209 D447 18				CLC
   210 D448 7D 38 18			ADC	XVELL+24,X
   211 D44B 9D 38 18			STA	XVELL+24,X
   212 D44E BD 59 18			LDA	XVELH+24,X
   213 D451 79 F8 FD			ADC	HUNTVECT,Y
   214 D454 9D 59 18			STA	XVELH+24,X
   215
   216 D457			YTHRUST:
   217 D457 98				TYA
   218 D458 18				CLC
   219 D459 69 10			ADC	#$10
   220 D45B A8				TAY
   221
   222 D45C B9 18 FE			LDA	MAXVECT,Y
   223 D45F 10 0A			BPL	POSOYVEL
   224
   225 D461			NEGOYVEL:
   226 D461 A6 57			LDX	TEMP+2
   227 D463 10 14			BPL	ADDYVEL
   228 D465 C5 57			CMP	TEMP+2
   229 D467 90 10			BCC	ADDYVEL
   230 D469 B0 08			BCS	DODAMPY
   231
   232 D46B			POSOYVEL:
   233 D46B A6 57			LDX	TEMP+2
   234 D46D 30 0A			BMI	ADDYVEL
   235 D46F C5 57			CMP	TEMP+2
   236 D471 B0 06			BCS	ADDYVEL
   237
   238 D473			DODAMPY:
   239 D473 20 B9 D5			JSR	DAMPY
   240 D476 4C CE D3			JMP	CHKFIRE
   241
   242 D479			ADDYVEL:
   243 D479 B9 D8 FD			LDA	UNITVECT,Y
   244 D47C 0A				ASL
   245 D47D 0A				ASL
   246 D47E 0A				ASL
   247 D47F A6 8B			LDX	OFFPLAY2
   248 D481 18				CLC
   249 D482 7D 7A 18			ADC	YVELL+24,X
   250 D485 9D 7A 18			STA	YVELL+24,X
   251 D488 BD 9B 18			LDA	YVELH+24,X
   252 D48B 79 F8 FD			ADC	HUNTVECT,Y
   253 D48E 9D 9B 18			STA	YVELH+24,X
   254 D491 4C CE D3			JMP	CHKFIRE
   255
   256
   257 D494			DNSHOT:
   258 D494 A5 82			LDA	MODE
   259 D496 C9 01			CMP	#1		;MODE - 1
   260 D498 10 0A			BPL	TDNSHOT		;MODES 1 AND 2 USE TDNSHOT
   261 D49A A2 03			LDX	#3
   262 D49C			NEXTSHOT:
   263 D49C B5 A8			LDA	STATUS+28,X
   264 D49E 30 14			BMI	THISSHOT
   265 D4A0 CA				DEX
   266 D4A1 10 F9			BPL	NEXTSHOT
   267 D4A3 60				RTS
   268
   269 D4A4			TDNSHOT:
   270 D4A4 A6 79			LDX	PLAYER		;ALLOW 2 SHOTS PER
   271 D4A6 F0 02			BEQ	TPLAY1		;PLAYER1 GETS 0 & 1
   272 D4A8 A2 02			LDX	#2		;PLAYER2 GETS 2 & 3
   273 D4AA			TPLAY1:
   274 D4AA B5 A8			LDA	STATUS+28,X
   275 D4AC 30 06			BMI	THISSHOT
   276 D4AE E8				INX
   277 D4AF B5 A8			LDA	STATUS+28,X
   278 D4B1 30 01			BMI	THISSHOT
   279 D4B3 60				RTS
   280
   281 D4B4			THISSHOT:
   282 D4B4 A4 79			LDY	PLAYER
   283 D4B6 B9 C1 00			LDA	SHIPDIR,Y
   284 D4B9 4A				LSR
   285 D4BA 4A				LSR
   286 D4BB 4A				LSR
   287 D4BC 4A				LSR
   288 D4BD A8				TAY
   289 D4BE A9 06			LDA	#SHOT
   290 D4C0 95 A8			STA	STATUS+28,X
   291 D4C2 A9 EC			LDA	#$EC
   292 D4C4 95 DF			STA	SHOTCNT+2,X
   293 D4C6 86 55			STX	TEMP		;SAVE X
   294 D4C8 A6 8B			LDX	OFFPLAY2
   295 D4CA BD BC 18			LDA	XPOSH+24,X
   296 D4CD A6 55			LDX	TEMP		;RESTORE
   297 D4CF 18				CLC
   298 D4D0 79 B8 FD			ADC	SHNOSEX,Y
   299 D4D3 C9 9F			CMP	#XPOSMAX
   300 D4D5 90 02			BCC	SHXOK
   301 D4D7 E9 9F			SBC	#XPOSMAX
   302 D4D9			SHXOK:
   303 D4D9 9D C0 18			STA	XPOSH+28,X
   304 D4DC A6 8B			LDX	OFFPLAY2
   305 D4DE BD E0 18			LDA	YPOSH+24,X
   306 D4E1 A6 55			LDX	TEMP		;RESTORE
   307 D4E3 18				CLC
   308 D4E4 79 C8 FD			ADC	SHNOSEY,Y
   309 D4E7 C9 BF			CMP	#YPOSMAX
   310 D4E9 90 02			BCC	SHYOK
   311 D4EB E9 BF			SBC	#YPOSMAX
   312 D4ED			SHYOK:
   313 D4ED 9D E4 18			STA	YPOSH+28,X
   314 D4F0 A6 8B			LDX	OFFPLAY2
   315 D4F2 BD 04 19			LDA	XPOSL+24,X
   316 D4F5 A6 55			LDX	TEMP
   317 D4F7 9D 08 19			STA	XPOSL+28,X
   318 D4FA A6 8B			LDX	OFFPLAY2
   319 D4FC BD 25 19			LDA	YPOSL+24,X
   320 D4FF A6 55			LDX	TEMP
   321 D501 9D 29 19			STA	YPOSL+28,X
   322
   323 D504 B9 D8 FD			LDA	UNITVCTX,Y
   324 D507 A6 8B			LDX	OFFPLAY2
   325 D509 18				CLC
   326 D50A 7D 59 18			ADC	XVELH+24,X
   327 D50D A6 55			LDX	TEMP
   328 D50F 9D 5D 18			STA	XVELH+28,X
   329 D512 A6 8B			LDX	OFFPLAY2
   330 D514 BD 38 18			LDA	XVELL+24,X
   331 D517 A6 55			LDX	TEMP
   332 D519 9D 3C 18			STA	XVELL+28,X
   333
   334 D51C B9 E8 FD			LDA	UNITVCTY,Y
   335 D51F A6 8B			LDX	OFFPLAY2
   336 D521 18				CLC
   337 D522 7D 9B 18			ADC	YVELH+24,X
   338 D525 A6 55			LDX	TEMP
   339 D527 9D 9F 18			STA	YVELH+28,X
   340 D52A A6 8B			LDX	OFFPLAY2
   341 D52C BD 7A 18			LDA	YVELL+24,X
   342 D52F A6 55			LDX	TEMP
   343 D531 9D 7E 18			STA	YVELL+28,X
   344
   345 D534 A9 0E			LDA	#$0E		;LOAD SOUND FOR HERO SHOTS
   346 D536 20 6B F1			JSR	DOTUNE1
   347
   348 D539 A6 79			LDX	PLAYER
   349 D53B A9 01			LDA	#1
   350 D53D 95 DB			STA	FIRESTAT,X
   351 D53F 60				RTS
   352
   353
   354 D540			HYPERSPC:
   355 D540 A6 79			LDX	PLAYER		;WHICH PLAYER
   356 D542 B5 7E			LDA	STATE,X		;STATE OF PLAYER
   357 D544 D0 08			BNE	NOHYPER		;IF OK THEN CONTINUE
   358 D546 A9 02			LDA	#2		;STATE FOR HYPERSPACE
   359 D548 95 7E			STA	STATE,X
   360 D54A A9 2C			LDA	#$2C		;$29+3
   361 D54C 95 80			STA	TIMER,X
   362 D54E			NOHYPER:
   363 D54E 60				RTS
   364
   365 D54F			DAMPX:
   366 D54F A6 8B			LDX	OFFPLAY2
   367 D551 BD 38 18			LDA	XVELL+24,X	;IS VELOCITY ALREADY ZERO?
   368 D554 1D 59 18			ORA	XVELH+24,X	; (LOW *OR* HIGH IS CHEAP MAGNITUDE)
   369 D557 F0 5F			BEQ	DAMPXRTS	;YES: NO DAMPING NEEDED
   370
   371 					;COMPUTE XVEL * 3/256
   372 D559 BD 38 18			LDA	XVELL+24,X	;FIRST COMPUTE XVEL/128
   373 D55C 0A				ASL
   374 D55D 85 56			STA	TEMP+1
   375 D55F BD 59 18			LDA	XVELH+24,X
   376 D562 2A				ROL			;ROL IN THE CARRY BIT
   377 D563 85 55			STA	TEMP
   378 D565 BD 38 18			LDA	XVELL+24,X	;THEN ADD IN XVEL / 256
   379 D568 18				CLC
   380 D569 65 56			ADC	TEMP+1
   381 D56B 85 56			STA	TEMP+1
   382 D56D BD 59 18			LDA	XVELH+24,X
   383 D570 10 03			BPL	XHPOS
   384 D572 FE 59 18			INC	XVELH+24,X	;BORROW TO CORRECT SBC #0 BELOW
   385 D575			XHPOS:
   386 D575 65 55			ADC	TEMP
   387 D577 85 55			STA	TEMP
   388
   389 D579 A6 79			LDX	PLAYER
   390 D57B BD 92 1A			LDA	XVELLL,X	;ADJUST THE "NOISE" BYTE
   391 D57E 38				SEC
   392 D57F E5 56			SBC	TEMP+1
   393 D581 9D 92 1A			STA	XVELLL,X
   394
   395 D584 A6 8B			LDX	OFFPLAY2
   396 D586 BD 38 18			LDA	XVELL+24,X
   397 D589 E5 55			SBC	TEMP
   398 D58B 9D 38 18			STA	XVELL+24,X
   399 D58E BD 59 18			LDA	XVELH+24,X
   400 D591 E9 00			SBC	#0
   401 D593 9D 59 18			STA	XVELH+24,X
   402
   403 D596 A9 00			LDA	#0
   404 D598 85 F8			STA	CLAMP
   405 D59A BD 59 18			LDA	XVELH+24,X	;CLAMP OFF TO STOP DRIFT
   406 D59D F0 0E			BEQ	ZCKPOSX
   407 D59F 18				CLC
   408 D5A0 69 01			ADC	#1
   409 D5A2 D0 14			BNE	DAMPXRTS
   410 D5A4 BD 38 18			LDA	XVELL+24,X	;ZCKMINX
   411 D5A7 C9 E0			CMP	#(0-$20) & 255
   412 D5A9 90 0D			BCC	DAMPXRTS
   413 D5AB B0 07			BCS	ZSETX0
   414 D5AD			ZCKPOSX:
   415 D5AD BD 38 18			LDA	XVELL+24,X
   416 D5B0 C9 20			CMP	#$20
   417 D5B2 B0 04			BCS	DAMPXRTS
   418 D5B4			ZSETX0:
   419 D5B4 A9 01			LDA	#1
   420 D5B6 85 F8			STA	CLAMP
   421
   422 D5B8			DAMPXRTS:
   423 D5B8 60				RTS
   424
   425 D5B9			DAMPY:
   426 D5B9 A6 8B			LDX	OFFPLAY2
   427 D5BB BD 7A 18			LDA	YVELL+24,X	;IS VELOCITY ALREADY ZERO?
   428 D5BE 1D 9B 18			ORA	YVELH+24,X	; (LOW *OR* HIGH IS CHEAP MAGNITUDE)
   429 D5C1 F0 69			BEQ	DAMPYRTS	;YES: NO DAMPING NEEDED
   430
   431 					;COMPUTE YVEL * 3/256
   432 D5C3 BD 7A 18			LDA	YVELL+24,X	;FIRST COMPUTE YVEL/128
   433 D5C6 0A				ASL
   434 D5C7 85 56			STA	TEMP+1
   435 D5C9 BD 9B 18			LDA	YVELH+24,X
   436 D5CC 2A				ROL			;ROL IN THE CARRY BIT
   437 D5CD 85 55			STA	TEMP
   438 D5CF BD 7A 18			LDA	YVELL+24,X	;THEN ADD IN YVEL / 256
   439 D5D2 18				CLC
   440 D5D3 65 56			ADC	TEMP+1
   441 D5D5 85 56			STA	TEMP+1
   442 D5D7 BD 9B 18			LDA	YVELH+24,X
   443 D5DA 10 03			BPL	YHPOS
   444 D5DC FE 9B 18			INC	YVELH+24,X	;BORROW TO CORRECT SBC #0 BELOW
   445 D5DF			YHPOS:
   446 D5DF 65 55			ADC	TEMP
   447 D5E1 85 55			STA	TEMP
   448
   449 D5E3 A6 79			LDX	PLAYER
   450 D5E5 BD 94 1A			LDA	YVELLL,X	;ADJUST THE "NOISE" BYTE
   451 D5E8 38				SEC
   452 D5E9 E5 56			SBC	TEMP+1
   453 D5EB 9D 94 1A			STA	YVELLL,X
   454
   455 D5EE A6 8B			LDX	OFFPLAY2
   456 D5F0 BD 7A 18			LDA	YVELL+24,X
   457 D5F3 E5 55			SBC	TEMP
   458 D5F5 9D 7A 18			STA	YVELL+24,X
   459 D5F8 BD 9B 18			LDA	YVELH+24,X
   460 D5FB E9 00			SBC	#0
   461 D5FD 9D 9B 18			STA	YVELH+24,X
   462
   463 D600 BD 9B 18			LDA	YVELH+24,X	;CLAMP OFF TO STOP DRIFT
   464 D603 F0 0E			BEQ	ZCKPOSY
   465 D605 18				CLC
   466 D606 69 01			ADC	#1
   467 D608 D0 22			BNE	DAMPYRTS
   468 D60A BD 7A 18			LDA	YVELL+24,X	;ZCKMINX
   469 D60D C9 E0			CMP	#(0-$20) & 255
   470 D60F 90 1B			BCC	DAMPYRTS
   471 D611 B0 07			BCS	ZSETY0
   472 D613			ZCKPOSY:
   473 D613 BD 7A 18			LDA	YVELL+24,X
   474 D616 C9 20			CMP	#$20
   475 D618 B0 12			BCS	DAMPYRTS
   476 D61A			ZSETY0:
   477 D61A A5 F8			LDA	CLAMP
   478 D61C F0 0E			BEQ	DAMPYRTS
   479 D61E A9 00			LDA	#0
   480 D620 9D 38 18			STA	XVELL+24,X
   481 D623 9D 59 18			STA	XVELH+24,X
   482 D626 9D 7A 18			STA	YVELL+24,X
   483 D629 9D 9B 18			STA	YVELH+24,X
   484
   485 D62C			DAMPYRTS:
   486 D62C 60				RTS
   487
   488 				** ROUTINE TO CHECK THE JOYSTICK AND UPDATE SOFTWARE REGISTERS. **
   489 D62D			CKJOY:
   490 D62D AD 80 02			LDA	SWCHA		;GET VALUES FROM TIA
   491 D630 85 BD			STA	SWCHAVAL	;STORE IN SOFT REGISTERS
   492
   493 D632 A2 01			LDX	#1		;DO PLAYERS 1 AND 0
   494 D634			ZNXTRJ:
   495 D634 20 6A D6			JSR	READJOY		;READ HIS JOYSTICK
   496 D637 CA				DEX
   497 D638 10 FA			BPL	ZNXTRJ
   498 D63A A5 B8			LDA	FIREBUT1	;PLAYER 0 FIRE BUTTON IS STARTBUT
   499 D63C 85 BC			STA	STARTBUT
   500
   501 D63E A5 7B			LDA	GAMSTATE	;CHECK IF IN AUTO PLAY STATE
   502 D640 C9 03			CMP	#AUTOST
   503 D642 D0 25			BNE	CKJOYRTS	;NO.  DON'T DO RANDOM VIOLENCE
   504
   505 D644			PICKJOY:
   506 D644 A9 FF			LDA	#$FF		;CLEAR ALL BUTTONS
   507 D646 85 B8			STA	FIREBUT1
   508 D648 85 B9			STA	FIREBUT2
   509 D64A 85 BA			STA	HYPBUT1
   510 D64C 85 BB			STA	HYPBUT2
   511
   512 D64E A5 76			LDA	FRMCNT		;DON'T ALWAYS DO
   513 D650 29 0C			AND	#$0C
   514 D652 D0 15			BNE	CKJOYRTS
   515 D654 A5 76			LDA	FRMCNT		;ALTERNATE FIRING
   516 D656 4A				LSR
   517 D657 29 01			AND	#1
   518 D659 AA				TAX
   519 D65A A9 7F			LDA	#$7F
   520 D65C 95 B8			STA	FIREBUT1,X
   521
   522 D65E 20 B2 F8			JSR	NEWRAND		;RANDOM SHIP MOVEMENT
   523 D661 29 07			AND	#$07
   524 D663 AA				TAX
   525 D664 BD AB D6			LDA	JOYVALS,X
   526 D667 85 BD			STA	SWCHAVAL
   527
   528 D669			CKJOYRTS:
   529 D669 60				RTS
   530
   531 				* READJOY: READ JOYSTICK/BUTTONS.  ON ENTRY X = PLAYER.  Y IS TRASHED
   532 D66A			READJOY:
   533 D66A B4 0C			LDY	INPT4,X
   534 D66C 10 19			BPL	GOTONE		;IF BIT 7 IS LO, OLD-STYLE BUTTON HIT
   535
   536 D66E A5 C0			LDA	ONEBUT		;ARE WE ALREADY IN OLD-STYLE MODE?
   537 D670 3D A5 D6			AND	RJBITS,X
   538 D673 D0 1C			BNE	GOTONE2		;YES.  GO RIGHT TO ONE-BUTTON HANDLER.
   539
   540 D675 8A				TXA			;OTHERWISE, COMPUTE INDEX INTO
   541 D676 0A				ASL			; PADDLE PORTS, FOR PLAYER X,
   542 D677 A8				TAY			; IN Y (X * 2)
   543
   544 D678 B9 09 00			LDA	INPT4A,Y	;READ LEFT BUTTON
   545 D67B 49 FF			EOR	#$FF		;INVERT THE SENSE!
   546 D67D 95 B8			STA	FIREBUT1,X
   547 D67F B9 08 00			LDA	INPT4B,Y	; RIGHT BUTTON
   548 D682 49 FF			EOR	#$FF
   549 D684			RJSTOREH:
   550 D684 95 BA			STA	HYPBUT1,X
   551
   552 D686			RJRTS:
   553 D686 60				RTS
   554
   555 					;HERE ON OLD-STYLE SINGLE BUTTON JOYSTICK PRESS.
   556 D687			GOTONE:
   557 D687 A5 C0			LDA	ONEBUT		;TURN OFF TWO-PLAYER BIT IMMEDIATELY
   558 D689 1D A5 D6			ORA	RJBITS,X	; TO AVOID BURNING OUT HARDWARE
   559 D68C 8D 82 02			STA	SWCHB
   560 D68F 85 C0			STA	ONEBUT		;SAVE THE NEW VALUE
   561 D691			GOTONE2:
   562 D691 94 B8			STY	FIREBUT1,X	;Y CONTAINS CONTENTS OF INPT4 NOW
   563 D693 A9 FF			LDA	#$FF
   564 D695 95 BA			STA	HYPBUT1,X	;CLEAR HYPERSPACE BUTTON
   565 D697 A5 BD			LDA	SWCHAVAL	;CHECK JOYSTICK REGISTER
   566 D699 3D 16 D8			AND	JOYTBL,X	; FOR THIS PLAYER'S
   567 D69C DD A7 D6			CMP	RJSBITS,X	;  HYPERSPACE BIT
   568 D69F D0 E5			BNE	RJRTS		;IF BIT NOT LO, THEN NO HYPERSPACE
   569 D6A1 A9 7F			LDA	#$7F		;OTHERWISE, SET THE BIT LO
   570 D6A3 D0 DF			BNE	RJSTOREH	;BNE = JMP
   571
   572
   573 D6A5			RJBITS:
   574 D6A5 04 10			.byte	$04,$10		;TWO-PLAYER MODE BITS PER PLAYER
   575 D6A7			RJSBITS:
   576 D6A7 D0 0D			.byte	$D0,$0D		;SOUTH JOYSTICK BITS PER PLAYER
   577 D6A9			THRBITS:
   578 D6A9 01 10			.byte	$01,$10		;NORTH BITS PER *OTHER* PLAYER
   579 D6AB			JOYVALS:
   580 D6AB 7F BF EF F7 FB FE + 	.byte	$7F,$BF,$EF,$F7,$FB,$FE,$FF,$EE ;AUTOPLAY JOYSTICK VALUES
    35 D6B3				icl	"FSM.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\FSM.asm
     1 				*	    1830    040784
     2 				*
     3 				** FSM.S **
     4 				** ASTEROIDS FOR THE ATARI 3600 **
     5 				** THIS FILE CONTAINS THE FINITE STATE MACHINE FOR ASTEROIDS. **
     6 				** GAME SEQUENCER TO HANDLE INDIVIDUAL PLAYER'S EVENT TIMING. **
     7
     8
     9 D6B3			FSM:
    10 D6B3 A6 79			LDX	PLAYER		;PLAYER MUST CONTAIN CURRENT PLAYER
    11 D6B5 B5 7E			LDA	STATE,X		;CURRENT STATE OF PLAYER
    12 D6B7 F0 1F			BEQ	CKCOMPLY	;CHECK IF COMP PLAY
    13 D6B9 10 01			BPL	DECTIMER	;IF IN ACTIVE STATE THEN TAKE ACTION
    14 D6BB 60				RTS			;IF MINUS, RTS (I GUESS)
    15
    16 D6BC			DECTIMER:
    17 D6BC D6 80			DEC	TIMER,X		;DECREMENT EVENT TIMER
    18 D6BE C9 01			CMP	#BIRTH		;BIRTH STATE?
    19 D6C0 F0 55			BEQ	BIRTHD
    20 D6C2 C9 02			CMP	#HYPER		;HYPERSPACE STATE?
    21 D6C4 D0 03			BNE	ZCKCOMP
    22 D6C6 4C 18 D8			JMP	HYPERD
    23 D6C9			ZCKCOMP:
    24 D6C9 C9 04			CMP	#COMPOVER	;COMP PLAY OVER?
    25 D6CB D0 03			BNE	ZCKDTH
    26 D6CD 4C 9A D8			JMP	COVERD
    27 D6D0			ZCKDTH:
    28 D6D0 C9 03			CMP	#DEATH		;DEATH STATE?
    29 D6D2 D0 03			BNE	FSMRTS
    30 D6D4 4C BD D8			JMP	DEATHD
    31 D6D7			FSMRTS:
    32 D6D7 60				RTS
    33
    34 D6D8			CKCOMPLY:
    35 D6D8 A5 FC			LDA	COMPFLAG	;CHECK IF ANYBODY DIED YET
    36 D6DA F0 FB			BEQ	FSMRTS
    37 D6DC 20 FD D6			JSR	CMPSCOR		;COMPARE SCORES
    38 D6DF 30 F6			BMI	FSMRTS
    39 D6E1 C5 79			CMP	PLAYER		;HISCORE = FIRST TO DIE?
    40 D6E3 D0 F2			BNE	FSMRTS		;YES, CONTINUE PLAY
    41 D6E5 AA				TAX
    42 D6E6 A9 04			LDA	#COMPOVER
    43 D6E8 95 7E			STA	STATE,X		;STATE IS REZ OUT VICTOR
    44 D6EA A9 FF			LDA	#$FF
    45 D6EC 85 FC			STA	COMPFLAG
    46 D6EE A9 00			LDA	#0
    47 D6F0 95 52			STA	MENLEFT,X	;NO MORE LIVES
    48 D6F2 A9 0D			LDA	#$0D
    49 D6F4 8D 06 1B			STA	FLASH
    50 D6F7 A9 00			LDA	#$0
    51 D6F9 20 70 F1			JSR	DOTUNE		;VICTOR REZOUT SOUND
    52 D6FC 60				RTS
    53
    54 D6FD			CMPSCOR:
    55 D6FD A2 00			LDX	#0		;COMPARE SCORES
    56 D6FF			CMPSLOOP:
    57 D6FF B5 46			LDA	SCORE,X		;FIRST SCORE
    58 D701 D5 4A			CMP	SCORE2,X	;SECOND SCORE
    59 D703 90 0C			BCC	P2BIGGR		;SCORE < SCORE2
    60 D705 F0 02			BEQ	BUMPX
    61 D707 B0 0B			BCS	P1BIGGR		;SCORE > SCORE2
    62 D709			BUMPX:
    63 D709 E8				INX			;LOOK AT NEXT BYTE
    64 D70A E0 05			CPX	#5
    65 D70C D0 F1			BNE	CMPSLOOP
    66 D70E A9 FF			LDA	#$FF		;SCORE = SCORE2
    67 D710 60				RTS
    68 D711			P2BIGGR:
    69 D711 A9 01			LDA	#1
    70 D713 60				RTS
    71 D714			P1BIGGR:
    72 D714 A9 00			LDA	#0
    73 D716 60				RTS
    74
    75 				** BIRTH DISPACHER - HANDLES TIMING OF BIRTH EVENTS. **
    76 D717			BIRTHD:
    77 D717 A4 8B			LDY	OFFPLAY2	;IF PLAYER IS NOT THERE, DON'T
    78 D719 B9 A4 00			LDA	STATUS+24,Y	; DO REZ TWINKLE
    79 D71C 30 10			BMI	ZNOREZ
    80
    81 					;DO REZ TWINKLE
    82 D71E A9 05			LDA	#$05		;DEFAULT LUME FOR AUTOPLAY
    83 D720 A4 7B			LDY	GAMSTATE
    84 D722 C0 05			CPY	#PLAYST
    85 D724 D0 03			BNE	ZREZGO		;IF NOT IN PLAY STATE, DO AUTO REZ
    86 D726 A5 76			LDA	FRMCNT		;USE FRAME COUNT LO BITS FOR LUME
    87 D728 0A				ASL
    88 D729			ZREZGO:
    89 D729 20 5E FA			JSR	PAINTSHP	;PAINT THE SHIP, BODY AND DEJAG COLORS
    90 D72C A6 79			LDX	PLAYER
    91 D72E			ZNOREZ:
    92 D72E B5 80			LDA	TIMER,X		;CHECK TIMER TO DISPATCH
    93 D730 C9 79			CMP	#PMSGT		;TIME TO PUT UP PLAYER MESSAGE?
    94 D732 F0 0B			BEQ	PMSG		; YES, PUT IT UP
    95 D734 C9 51			CMP	#PMSGOFFT	;TIME TO TAKE DOWN MESSAGE?
    96 D736 F0 11			BEQ	PMSGOFF		; YES, TAKE IT DOWN
    97 D738 C9 29			CMP	#RESINT		;TIME TO RES IN?
    98 D73A F0 62			BEQ	RESIN		; YES, RES IN.  IF LATER THAN RESINT,
    99 D73C 90 10			BCC	OPTENTER	; CHECK FOR OPTIONAL ENTER (JSTICK)
   100 D73E 60				RTS			;OTHERWISE, JUST RTS
   101
   102 				* ROUTINE TO PUT UP THE PLAYER X MESSAGE IF NEEDED. *
   103 D73F			PMSG:
   104 D73F A5 82			LDA	MODE		;NO MESSAGES IN TEAM MODES
   105 D741 C9 01			CMP	#1
   106 D743 10 03			BPL	ZPLRTS
   107 D745 20 E7 DF			JSR	SETMSG
   108 D748			ZPLRTS:
   109 D748 60				RTS
   110
   111 				* ROUTINE TO TURN PLAYER X MESSAGE OFF. *
   112 D749			PMSGOFF:
   113 D749 A9 FF			LDA	#$FF		;TURN OFF HIGH MESSAGE
   114 D74B 85 AE			STA	STATUS+34
   115 D74D 60				RTS
   116
   117
   118 				* ROUTINE TO ENTER THE SHIP IF DESIRED OR NEEDED. *
   119 D74E			OPTENTER:
   120
   121 D74E A5 7B			LDA	GAMSTATE	;DO ONLY IF GAMEPLAY STATE
   122 D750 C9 05			CMP	#PLAYST
   123 D752 D0 10			BNE	ZCKTIMM
   124
   125 					;FIRST CHECK TO SEE IF PLAYER IS FORCING SHIP IN
   126 D754 B5 B8			LDA	FIREBUT1,X	;FIRE BUTTON
   127 D756 35 BA			AND	HYPBUT1,X	;HYPERSPACE BUTTON
   128 D758 10 20			BPL	ENTSHIP		; IS PRESSED! ENTER HIM
   129 D75A AD 80 02			LDA	SWCHA		;JOYSTICK
   130 D75D 49 FF			EOR	#$FF		; (INVERTED)
   131 D75F 3D 16 D8			AND	JOYTBL,X	; (LOOK AT ONLY CORRECT PLAYER'S BITS)
   132 D762 D0 16			BNE	ENTSHIP		; IS HIT! ENTER HIM
   133
   134 					;NOW CHECK IF IT IS TIME, AND IS SAFE.
   135 D764			ZCKTIMM:
   136 D764 B5 80			LDA	TIMER,X		;CHECK TIMER
   137 D766 C9 01			CMP	#ENTERT
   138 D768 B0 0F			BCS	ENTRTS		;NOT TIME YET, DON'T BOTHER
   139
   140 D76A A5 8B			LDA	OFFPLAY2	;CHECK SAFTEY
   141 D76C 18				CLC
   142 D76D 69 18			ADC	#24
   143 D76F AA				TAX
   144 D770 20 3C F9			JSR	ISSAFE		;CHECK IF AREA SAFE TO ENTER
   145 D773 F0 05			BEQ	ENTSHIP		;YES, CONTINUE
   146
   147 					;NOT SAFE, HOLD TIMER HERE INDEFINITELY
   148 D775 A6 79			LDX	PLAYER
   149 D777 F6 80			INC	TIMER,X
   150 D779			ENTRTS:
   151 D779 60				RTS
   152
   153 D77A			ENTSHIP:
   154 D77A A9 02			LDA	#2		;KILL TWINKLING
   155 D77C 20 B7 F1			JSR	KILLTUNE
   156 D77F A9 03			LDA	#$3		;ADD BUZZING IN
   157 D781 20 70 F1			JSR	DOTUNE
   158
   159 D784 A5 79			LDA	PLAYER		;CHANGE BODY COLOR
   160 D786 0A				ASL
   161 D787 0A				ASL
   162 D788 AA				TAX
   163 D789 BD F3 FC			LDA	COLORS+2,X
   164 D78C 95 EA			STA	SOFTCOLR+2,X
   165 D78E BD F4 FC			LDA	COLORS+3,X
   166 D791 95 EB			STA	SOFTCOLR+3,X
   167
   168 D793 A6 79			LDX	PLAYER
   169 D795 A9 01			LDA	#1		;DEBOUNCE ENTER/FIRE BUTTON
   170 D797 95 DB			STA	FIRESTAT,X
   171
   172 D799 A9 00			LDA	#OK		;SET STATE AS OK
   173 D79B 95 7E			STA	STATE,X
   174 D79D 60				RTS
   175
   176 				** ROUTINE TO RESIN AND TWINKLE SHIP AT ENTERING. **
   177 D79E			RESIN:
   178 D79E A5 A5			LDA	STATUS+25	;CHECK STATUS OF UFO
   179 D7A0 30 03			BMI	ZGONOW		;DON'T BRING SHIP IN IF UFO
   180 D7A2 F6 80			INC	TIMER,X
   181 D7A4 60				RTS
   182
   183 D7A5			ZGONOW:
   184 D7A5 A5 7B			LDA	GAMSTATE	;DON'T DECREMENT IF AUTOPLAY
   185 D7A7 C9 03			CMP	#AUTOST
   186 D7A9 F0 16			BEQ	ZNODECM
   187 D7AB A5 82			LDA	MODE		;CHECK TO DEC FROM COMMON POOL
   188 D7AD C9 01			CMP	#1
   189 D7AF D0 0B			BNE	ZNOPOOL
   190 D7B1 A5 54			LDA	MENLEFTC	;CHECK: IF NO MENLEFT, JUST HANG OUT
   191 D7B3 C9 01			CMP	#1		; AND WAIT; PERHAPS OTHER PLAYER WILL
   192 D7B5 B0 03			BCS	ZYESMEN		; BRING HIM IN A LIFE.
   193 D7B7 F6 80			INC	TIMER,X		; (HOLD TIMER AT THIS POINT IN TIME)
   194 D7B9 60				RTS
   195
   196 D7BA			ZYESMEN:
   197 D7BA A2 02			LDX	#2		;2 = COMMON POOL
   198 D7BC			ZNOPOOL:
   199 D7BC D6 52			DEC	MENLEFT,X	;DEC FROM PLAYERS LIVES
   200 D7BE 20 C5 DF			JSR	UPDATMEN
   201
   202 D7C1			ZNODECM:
   203 D7C1 A9 02			LDA	#2		;TWINKLING SOUND
   204 D7C3 20 70 F1			JSR	DOTUNE
   205
   206
   207 D7C6			ZINITPOS:
   208 D7C6 A6 8B			LDX	OFFPLAY2	;INITIALIZE THE SHIP'S POSITION
   209 D7C8 A9 00			LDA	#0
   210 D7CA 9D 59 18			STA	XVELH+24,X
   211 D7CD 9D 9B 18			STA	YVELH+24,X
   212 D7D0 9D 38 18			STA	XVELL+24,X
   213 D7D3 9D 7A 18			STA	YVELL+24,X
   214 D7D6 8D 07 1B			STA	GOATMILK	;??
   215 D7D9 A5 82			LDA	MODE
   216 D7DB C9 01			CMP	#1
   217 D7DD 30 07			BMI	ZCENTERS
   218 D7DF A4 79			LDY	PLAYER
   219 D7E1 B9 14 D8			LDA	INITSX,Y	;GET X POS VALUE FOR PLAYER
   220 D7E4 10 02			BPL	ZSTORSX		;BPL = JMP HERE.
   221 D7E6			ZCENTERS:
   222 D7E6 A9 50			LDA	#$50
   223 D7E8			ZSTORSX:
   224 D7E8 9D BC 18			STA	XPOSH+24,X
   225 D7EB 18				CLC
   226 D7EC 6D FC F3			ADC	DELTAX+3	;COULD SQUEEZE A BYTE HERE: USE IMMED.
   227 D7EF 9D 8A 19			STA	COLXPOSH+24,X
   228 D7F2 A9 50			LDA	#$50
   229 D7F4 9D E0 18			STA	YPOSH+24,X
   230 D7F7 18				CLC
   231 D7F8 6D 03 F4			ADC	DELTAY+3	;COULD SQUEEZE HERE TOO.
   232 D7FB 9D B6 19			STA	COLYPOSH+24,X
   233
   234 D7FE A6 79			LDX	PLAYER		;STORE FIRST ANIMATION
   235 D800 B5 C1			LDA	SHIPDIR,X
   236 D802 4A				LSR
   237 D803 4A				LSR
   238 D804 4A				LSR
   239 D805 29 FE			AND	#$FE
   240 D807 18				CLC
   241 D808 69 B5			ADC	#SHIP1 & 255
   242 D80A A6 8B			LDX	OFFPLAY2
   243 D80C 9D 46 19			STA	ACYC+24,X
   244
   245 D80F A9 23			LDA	#SHIP		;STORE STATUS AS SHIP
   246 D811 95 A4			STA	STATUS+24,X
   247
   248 D813 60				RTS
   249
   250
   251 D814			INITSX:
   252 D814 30 70			.byte	$30,$70		;XPOS VALUES FOR INITIAL SHIP POS
   253 D816			JOYTBL:
   254 D816 F0 0F			.byte	$F0,$0F		;JSTICK MASKS, INDEXED BY PLAYER.
   255
   256
   257 				** HYPER SPACE DISPACHER - HANDLES TIMING OF HYPER SPACE EVENTS. **
   258 D818			HYPERD:
   259 D818 B5 80			LDA	TIMER,X		;CURRENT PLAYERS EVENT TIMER
   260 D81A C9 29			CMP	#HYPERT		;TIME TO JUMP HYPERSPACE?
   261 D81C F0 05			BEQ	HYPERGO		; YES, DO IT.
   262 D81E C9 01			CMP	#HYPENDT	;TIME TO END HYPERSPACE
   263 D820 F0 1B			BEQ	HYPEND		; YES, DO IT.
   264 D822 60				RTS			;OTHERWISE, JUST RTS
   265
   266 				* ROUTINE TO HANDLE THE JUMP TO HYPERSPACE. *
   267 D823			HYPERGO:
   268 D823 A9 01			LDA	#$01		;SOUND
   269 D825 20 70 F1			JSR	DOTUNE
   270
   271 D828 A6 8B			LDX	OFFPLAY2	;NULL OUT SHIP
   272 D82A A9 FF			LDA	#$FF
   273 D82C 95 A4			STA	STATUS+24,X
   274
   275 D82E A9 00			LDA	#0		;NULL VELOCITY
   276 D830 9D 38 18			STA	XVELL+24,X
   277 D833 9D 59 18			STA	XVELH+24,X
   278 D836 9D 7A 18			STA	YVELL+24,X
   279 D839 9D 9B 18			STA	YVELH+24,X
   280
   281 D83C 60				RTS
   282
   283
   284 				* ROUTINE TO HANDLE THE RETURN FROM HYPERSPACE. *
   285 D83D			HYPEND:
   286 D83D A9 18			LDA	#24
   287 D83F 18				CLC
   288 D840 65 8B			ADC	OFFPLAY2
   289 D842 AA				TAX
   290 D843 20 B2 F8			JSR	NEWRAND		;GET NEW SHIP POSITION
   291 D846 4A				LSR			; AVOID EXTREME SIDES
   292 D847 69 0D			ADC	#$D		; (BETWEEN $D AND $8C)
   293 D849 9D A4 18			STA	XPOSH,X
   294 D84C 20 B2 F8			JSR	NEWRAND		;GET Y POSITION; AVOID TOP AND BOTTOM
   295 D84F 4A				LSR
   296 D850 69 10			ADC	#$10		; (BETWEEN $10 AND $90)
   297 D852 9D C8 18			STA	YPOSH,X
   298 D855 20 3C F9			JSR	ISSAFE		;SAFE TO ENTER
   299 D858 F0 05			BEQ	GOBIGRED	;YOU BET
   300 D85A A6 79			LDX	PLAYER		;SORRY CHARLIE
   301 D85C F6 80			INC	TIMER,X
   302 D85E 60				RTS
   303 D85F			GOBIGRED:
   304 D85F 20 B2 F8			JSR	NEWRAND		;GET RANDOM VALUE
   305 D862 C9 32			CMP	#50		;SOMETIMES LET THE SHIP EXPLODE
   306 D864 B0 22			BCS	NOBLOW		;OTHERWISE SET NEW POSITION
   307
   308 					;EXPLODE HIM!
   309 D866 A9 18			LDA	#24		;WITHOUT THIS X = 'FF' SOMETIMES
   310 D868 18				CLC
   311 D869 65 8B			ADC	OFFPLAY2
   312 D86B AA				TAX
   313 D86C A9 A3			LDA	#$A3		;BOOM !! SET HIGH BIT OF STATUS
   314 D86E 95 8C			STA	STATUS,X
   315 D870 AD E9 F3			LDA	ELBOUND+3	;SET ANIMATION STAMP
   316 D873 9D 2E 19			STA	ACYC,X
   317 D876 A9 05			LDA	#5		;START SHIP EXPLOSION SOUND
   318 D878 20 70 F1			JSR	DOTUNE
   319 D87B A6 79			LDX	PLAYER
   320 D87D			BLOW:
   321 D87D A9 03			LDA	#DEATH		;SET STATE
   322 D87F A6 79			LDX	PLAYER
   323 D881 95 7E			STA	STATE,X
   324 D883 A9 DE			LDA	#DIET+$28	;ENTER TIMELINE AT TOP
   325 D885 95 80			STA	TIMER,X
   326 D887 60				RTS
   327
   328 D888			NOBLOW:
   329 D888 A9 03			LDA	#3		;BUZZ SOUND
   330 D88A 20 70 F1			JSR	DOTUNE
   331 D88D A9 23			LDA	#SHIP		;RESTORE SHIP
   332 D88F A6 55			LDX	TEMP
   333 D891 95 8C			STA	STATUS,X
   334 D893 A6 79			LDX	PLAYER
   335 D895 A9 00			LDA	#OK		;RETURN STATE TO OK.
   336 D897 95 7E			STA	STATE,X
   337 D899 60				RTS
   338
   339
   340 				** COMP PLAY OVER DISPACHER - HANDLES TAKING SHIP OUT. **
   341 D89A			COVERD:
   342 				*	LDX	PLAYER
   343 D89A AD 06 1B			LDA	FLASH
   344 D89D EE 06 1B			INC	FLASH
   345 D8A0 C9 20			CMP	#$20
   346 D8A2 F0 12			BEQ	ZTAB
   347 D8A4 C9 2E			CMP	#$2E
   348 D8A6 D0 03			BNE	CCONTIN		;ALL DONE
   349 D8A8 4C 7D D8			JMP	BLOW		;JUMP INTO HYPER CODE
   350 D8AB			CCONTIN:
   351 D8AB 2C FB F9			BIT	BPLOP
   352 D8AE F0 02			BEQ	DOPAINT
   353 D8B0 49 1F			EOR	#$1F
   354 D8B2			DOPAINT:
   355 D8B2 20 5E FA			JSR	PAINTSHP
   356 D8B5 60				RTS
   357 D8B6			ZTAB:
   358 D8B6 A6 8B			LDX	OFFPLAY2	;NUKE SHIP
   359 D8B8 A9 FF			LDA	#$FF
   360 D8BA 95 A4			STA	STATUS+24,X
   361 D8BC 60				RTS
   362
   363 				** DEATH DISPACHER - HANDLES TIMING OF DEATH SEQUENCE. **
   364 D8BD			DEATHD:
   365 D8BD B5 80			LDA	TIMER,X		;CURRENT PLAYERS EVENT TIMER
   366 D8BF C9 B6			CMP	#DIET		;TOP OF DEATH TIMELINE?
   367 D8C1 F0 4B			BEQ	DIE		; YES, GO TO DIE HANDLER
   368 D8C3 C9 A6			CMP	#SWITCHT	;TIME TO SWITCH PLAYER?
   369 D8C5 D0 03			BNE	ZCKPOT
   370 D8C7 4C A5 D9			JMP	SWITCH		; YES, SWITCH.
   371 D8CA			ZCKPOT:
   372 D8CA C9 A1			CMP	#POMSGT	;TIME TO DISPLAY PLAYERX OVER?
   373 D8CC D0 03			BNE	ZCOKE
   374 D8CE 4C 6F D9			JMP	POMSG		; YES, DO IT.
   375 D8D1			ZCOKE:
   376 D8D1 C9 71			CMP	#POMSGOFT	;TIME TO TURN OFF MESSAGE?
   377 D8D3 F0 15			BEQ	POMSGOFF	; YES, DO IT.
   378 D8D5 C9 61			CMP	#GOVERT		;TIME TO DISPLAY GAME OVER MESSAGE?
   379 D8D7 F0 2C			BEQ	GOVER		; YES, DO IT.
   380 D8D9 C9 01			CMP	#NEWGAMET	;END OF DEATH TIMELINE?
   381 D8DB D0 0C			BNE	DEATHRTS
   382 								;YES, SET UP FOR HIGH SCORE CART
   383 D8DD 20 A6 F1			JSR	CLEARTUN	;GET RID OF ANY TUNES
   384 D8E0 20 DB F4			JSR	NULLOBJS	;GET RID OF ANY OBJECTS
   385 D8E3 20 B3 FF			JSR	HSCDOENT
   386 D8E6 4C 1C D2			JMP	DOTITLE
   387 D8E9			DEATHRTS:
   388 D8E9 60				RTS
   389
   390
   391 				* ROUTINE TO TAKE DOWN THE ABOVE *
   392 D8EA			POMSGOFF:
   393 D8EA A9 FF			LDA	#$FF		;NULL OUT BOTH MESSAGES
   394 D8EC 85 AE			STA	STATUS+34
   395 D8EE 85 AF			STA	STATUS+35
   396
   397 D8F0 8A				TXA			;CHECK OTHER PLAYER FOR GAME OVER COND.
   398 D8F1 49 01			EOR	#$01		; HERE'S HOW IT WORKS: ONLY ONE PLAYER
   399 D8F3 A8				TAY			; ACTUALLY MAKES IT TO THE GAME OVER
   400 D8F4 A9 FF			LDA	#DEAD		; MESSAGE TIME.  SO, THE FIRST PLAYER
   401 D8F6 D9 7E 00			CMP	STATE,Y		; TO MAKE IT TO POMSGOFF BECOMES DEAD
   402 D8F9 F0 EE			BEQ	DEATHRTS	; THE OTHER LIVES ON TO GET TO GOVER!
   403 D8FB 95 7E			STA	STATE,X		;MAKE PLAYER DEAD, SINCE OTHER IS LIVE.
   404 D8FD A5 82			LDA	MODE		;IN TWO PLAYER MODE, SWITCH DATA NOW
   405 D8FF D0 E8			BNE	DEATHRTS	; SO WE DON'T GET STUCK PLAYING
   406 D901 4C A5 D9			JMP	SWITCH		; A DEAD PLAYER (FSM WON'T RUN ON HIM)
   407 D904 60				RTS
   408
   409 				* ROUTINE TO PUT UP GAME OVER MESSAGE *
   410 D905			GOVER:
   411 D905 A2 02			LDX	#2		;GAME OVER MESSAGE
   412 D907 20 E7 DF			JSR	SETMSG
   413 D90A 20 8D DF			JSR	HIGHSCOR
   414 D90D 60				RTS
   415
   416 				* ROUTINE TO HANDLE DEATH OF A SHIP. *
   417 				* ALL DEATHS GO HERE.  THIS ROUTINE FIGURES OUT WHERE WE SHOULD BE GOING. *
   418 D90E			DIE:
   419 D90E 20 AE F1			JSR	INITHUMP	;REINIT THUMP RATE
   420
   421 D911 A9 11			LDA	#$11		;KILL THRUST SOUND
   422 D913 20 B7 F1			JSR	KILLTUNE
   423 D916 A6 79			LDX	PLAYER		;RESTORE X, TRASHED BY KILLTUNE
   424
   425 					;HANDLE MODES DIFFERENTLY
   426 D918 A4 82			LDY	MODE
   427 D91A A5 54			LDA	MENLEFTC	;LOAD TEAMPLAY MENLEFT AS DEFAULT
   428 D91C C0 01			CPY	#1
   429 D91E F0 02			BEQ	ZDIEMN1		;IF NOT TEAMPLAY MODE
   430 D920 B5 52			LDA	MENLEFT,X	; USE CURRENT MENLEFT
   431 D922			ZDIEMN1:
   432 D922 C9 01			CMP	#1		;IF WE HAVE NO MEN LEFT
   433 D924 90 11			BCC	NOMENLFT	; HANDLE THIS SITUATION
   434 D926 C0 00			CPY	#0		;ELSE IF NOT TWO PLAYER MODE
   435 D928 D0 3A			BNE	GIVEBRTH	; SIMPLY TRY TO GIVE BIRTH.
   436
   437 D92A 8A				TXA			;ELSE TWO PLAYER MODE:
   438 D92B 49 01			EOR	#$01		; CHECK OTHER PLAYER'S MENLEFT.
   439 D92D AA				TAX
   440 D92E B5 52			LDA	MENLEFT,X
   441 D930 C9 01			CMP	#1		; IF HE HAS MEN LEFT THEN
   442 D932 B0 B5			BCS	DEATHRTS	;  SIMPLY RTS. SWITCH WILL DO THE TRICK
   443 D934 4C 44 DA			JMP	GIVBRTH2	; ELES SKIP THE SWITCH.  GIVE BIRTH NOW
   444
   445 D937			NOMENLFT:
   446 D937 C0 FF			CPY	#$FF		;ELSE, IF ONE PLAYER MODE
   447 D939 F0 1E			BEQ	DIEGOVER	; DIE WITH SIMPLE GAMEOVER (NO PMSG)
   448 D93B C0 01			CPY	#$1		;ELSE, IF NOT IN TEAM PLAY MODE
   449 D93D D0 1E			BNE	DIEPOVER	; DIE WITH PLAYER OVER MESSAGE
   450 D93F 8A				TXA			;ELSE CHECK OTHER PLAYER'S STATE
   451 D940 49 01			EOR	#$01		; TO SEE WHETHER TO END THE GAME
   452 D942 AA				TAX
   453 D943 B5 7E			LDA	STATE,X
   454 D945 C9 01			CMP	#BIRTH		; IF OTHER PLAYER IS NOT IN BIRTH
   455 D947 D0 1B			BNE	GIVEBRTH	;  THEN TRY TO GIVE BIRTH.
   456 D949 A5 8B			LDA	OFFPLAY2	; OTHERWISE,
   457 D94B 49 08			EOR	#$08		;  (TOGGLE OFFPLAY2)
   458 D94D A8				TAY
   459 D94E B9 A4 00			LDA	STATUS+24,Y	;  IF HE IS NOT YET BORN, THEN
   460 D951 C9 23			CMP	#SHIP		;  FORGET IT BUD.  AIN'T NO LIVES LEFT
   461 D953 F0 0F			BEQ	GIVEBRTH	;  FOR EITHER OF THEM.
   462 D955 A9 FF			LDA	#DEAD		;   NUKE OTHER PLAYER OUT OF BIRTHST
   463 D957 95 7E			STA	STATE,X		;   TO PREVENT A NEW RACK FROM STARTING
   464 D959			DIEGOVER:
   465 D959 A9 64			LDA	#GOVERT+3	;DIE WITH GAME OVER MESSAGE ONLY
   466 D95B D0 02			BNE	ZDIEOVER	; BNE = JMP
   467
   468 D95D			DIEPOVER:
   469 D95D A9 A4			LDA	#POMSGT+3	;DIE WITH PLAYER N GAME OVER MESSAGE
   470 D95F			ZDIEOVER:
   471 D95F A6 79			LDX	PLAYER
   472 D961 95 80			STA	TIMER,X
   473 D963 60				RTS
   474
   475 D964			GIVEBRTH:
   476 D964 A6 79			LDX	PLAYER
   477 D966 A9 01			LDA	#BIRTH		;GIVE BIRTH
   478 D968 95 7E			STA	STATE,X
   479 D96A A9 2C			LDA	#RESINT+3	;AT TIMER RESIN+3
   480 D96C 95 80			STA	TIMER,X
   481 D96E 60				RTS
   482
   483 				* ROUTINE TO PUT UP PLAYERX GAME OVER MESSAGE *
   484 D96F			POMSG:
   485 D96F A6 79			LDX	PLAYER		;PLAYERX MESSAGE
   486 D971 A5 FC			LDA	COMPFLAG
   487 D973 30 29			BMI	PVICTOR
   488 D975 F0 16			BEQ	PPLAYER
   489 D977 20 FD D6			JSR	CMPSCOR		;COMPARE SCORES
   490 D97A AA				TAX
   491 D97B 10 21			BPL	PVICTOR
   492 				;	    TIE SCORE
   493 D97D AD 07 1B			LDA	GOATMILK	;CHECK FLAG
   494 D980 D0 04			BNE	PUNTTHIS	;SHIP TO SHIP
   495 D982 A6 79			LDX	PLAYER		;NO, PUT MESSAGE FOR THIS GUY
   496 D984 10 18			BPL	PVICTOR		; = JMP
   497 D986			PUNTTHIS:
   498 D986 A9 FF			LDA	#$FF		;RETURN W/OUT MSG IF EQUAL
   499 D988 85 AE			STA	STATUS+34	;TAKE MSG DOWN BEFORE SEEN
   500 D98A 85 AF			STA	STATUS+35
   501 D98C 60				RTS
   502
   503 D98D			PPLAYER:
   504 D98D 20 E7 DF			JSR	SETMSG
   505 D990 A2 02			LDX	#2
   506 D992			DOMSG:
   507 D992 20 E7 DF			JSR	SETMSG
   508 D995 A6 82			LDX	MODE
   509 D997 E0 02			CPX	#2
   510 D999 D0 02			BNE	ZPORTS
   511 D99B 86 FC			STX	COMPFLAG
   512 D99D			ZPORTS:
   513 D99D 60				RTS
   514
   515 D99E			PVICTOR:
   516 D99E 20 E7 DF			JSR	SETMSG		;X HAS PLAYER
   517 D9A1 A2 03			LDX	#3
   518 D9A3 10 ED			BPL	DOMSG		;BPL  =  JMP
   519
   520 				* ROUTINE TO SWITCH THE TWO DATA SETS WHEN NEEDED. *
   521 D9A5			SWITCH:
   522 D9A5 8A				TXA			;TOGGLE CURRENT PLAYER # AND OFFSET
   523 D9A6 49 01			EOR	#$01
   524 D9A8 AA				TAX
   525 D9A9 85 79			STA	PLAYER
   526 D9AB F0 02			BEQ	ZSTOFFP2
   527 D9AD A9 08			LDA	#8
   528 D9AF			ZSTOFFP2:
   529 D9AF 85 8B			STA	OFFPLAY2
   530
   531 D9B1 A9 FF			LDA	#$FF		;NULL OUT SPACE OBJECTS
   532 D9B3 A2 07			LDX	#7		; (31-23=8 OBJECTS)
   533 D9B5			SWCHNULL:
   534 D9B5 95 A4			STA	STATUS+24,X
   535 D9B7 CA				DEX
   536 D9B8 10 FB			BPL	SWCHNULL
   537
   538 D9BA A9 00			LDA	#0
   539 D9BC 85 FB			STA	RACKDLY		;NO DELAY AFTER SWITCH
   540 D9BE A9 50			LDA	#$50
   541 D9C0 85 E4			STA	RTIMER		;RESET UFO FREQUENCY AND TIMER
   542 D9C2 A9 92			LDA	#$92
   543 D9C4 85 E5			STA	SDELAY
   544 D9C6 85 E6			STA	EDELAY
   545 D9C8 20 A6 F1			JSR	CLEARTUN	;KILL TUNES, ESP. UFO
   546
   547 D9CB A0 17			LDY	#23
   548 D9CD			SWCHLOOP:
   549 D9CD B6 8C			LDX	STATUS,Y
   550 D9CF B9 00 18			LDA	STATUS2,Y
   551 D9D2 99 8C 00			STA	STATUS,Y
   552 D9D5 8A				TXA
   553 D9D6 99 00 18			STA	STATUS2,Y
   554 				*
   555 D9D9 BE 2E 19			LDX	ACYC,Y
   556 D9DC B9 52 19			LDA	ACYC2,Y
   557 D9DF 99 2E 19			STA	ACYC,Y
   558 D9E2 8A				TXA
   559 D9E3 99 52 19			STA	ACYC2,Y
   560 				*
   561 D9E6 BE CB 1A			LDX	PALS,Y
   562 D9E9 B9 EF 1A			LDA	PALS2,Y
   563 D9EC 99 CB 1A			STA	PALS,Y
   564 D9EF 8A				TXA
   565 D9F0 99 EF 1A			STA	PALS2,Y
   566 				*
   567 D9F3 BE 41 18			LDX	XVELH,Y
   568 D9F6 B9 CA 19			LDA	XVELH2,Y
   569 D9F9 99 41 18			STA	XVELH,Y
   570 D9FC 8A				TXA
   571 D9FD 99 CA 19			STA	XVELH2,Y
   572 				*
   573 DA00 BE 83 18			LDX	YVELH,Y
   574 DA03 B9 EA 19			LDA	YVELH2,Y
   575 DA06 99 83 18			STA	YVELH,Y
   576 DA09 8A				TXA
   577 DA0A 99 EA 19			STA	YVELH2,Y
   578 				*
   579 DA0D BE 20 18			LDX	XVELL,Y
   580 DA10 B9 4A 1A			LDA	XVELL2,Y
   581 DA13 99 20 18			STA	XVELL,Y
   582 DA16 8A				TXA
   583 DA17 99 4A 1A			STA	XVELL2,Y
   584 				*
   585 DA1A BE 62 18			LDX	YVELL,Y
   586 DA1D B9 6A 1A			LDA	YVELL2,Y
   587 DA20 99 62 18			STA	YVELL,Y
   588 DA23 8A				TXA
   589 DA24 99 6A 1A			STA	YVELL2,Y
   590 				*
   591 DA27 BE A4 18			LDX	XPOSH,Y
   592 DA2A B9 0A 1A			LDA	XPOSH2,Y
   593 DA2D 99 A4 18			STA	XPOSH,Y
   594 DA30 8A				TXA
   595 DA31 99 0A 1A			STA	XPOSH2,Y
   596 				*
   597 DA34 BE C8 18			LDX	YPOSH,Y
   598 DA37 B9 2A 1A			LDA	YPOSH2,Y
   599 DA3A 99 C8 18			STA	YPOSH,Y
   600 DA3D 8A				TXA
   601 DA3E 99 2A 1A			STA	YPOSH2,Y
   602
   603 DA41 88				DEY
   604 DA42 10 89			BPL	SWCHLOOP
   605
   606 DA44			GIVBRTH2:
   607 DA44 A6 79			LDX	PLAYER		;GIVE BIRTH, TWO PLAYER STYLE (PMSG)
   608 DA46 A9 01			LDA	#BIRTH		;GIVE BIRTH
   609 DA48 95 7E			STA	STATE,X
   610 DA4A A9 99			LDA	#PMSGT+$20	;AT TIMER PMSGT+20
   611 DA4C 95 80			STA	TIMER,X
   612
   613 DA4E 60				RTS
    36 DA4F				icl	"EXPLODE.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\EXPLODE.asm
     1 				*         2150    251083
     2 				*
     3 				*
     4 				** EXPLODE.S **
     5 				** ASTEROIDS FOR THE ATARI 3600 **
     6 				** THIS FILE CONTAINS THE EXPLOSION HANDLING ROUTINE. **
     7
     8 DA4F			EXPLODE:
     9 DA4F A0 20			LDY     #32
    10 DA51			EXPLLOOP:
    11 DA51 B9 8C 00			LDA     STATUS,Y
    12 DA54 10 31			BPL     NEXTEXPL
    13 DA56 C9 FF			CMP     #$FF
    14 DA58 F0 2D			BEQ     NEXTEXPL
    15
    16 DA5A 98				TYA			;GET NEW ANIMATION INDEX
    17 DA5B 0A				ASL
    18 DA5C 65 76			ADC     FRMCNT
    19 DA5E 4A				LSR
    20 DA5F 29 03			AND     #$3		;3 ANDED WITH FRMCNT TO DECIDE
    21 DA61 D0 24			BNE     NEXTEXPL	;WHEN NEXT ANIMATION
    22
    23 DA63 B9 8C 00			LDA     STATUS,Y
    24 DA66 29 0F			AND     #$0F
    25 DA68 AA				TAX
    26 DA69 B9 2E 19			LDA     ACYC,Y
    27 DA6C DD EE F3			CMP     EHBOUND,X
    28 DA6F D0 0F			BNE     NEXTECYC
    29
    30 DA71 E0 03			CPX     #3
    31 DA73 B0 04			BCS     DONULL
    32
    33 DA75 A6 79			LDX     PLAYER
    34 DA77 D6 C5			DEC     ROCKTOT,X	;ONE LESS ROCK FOR CURRENT PLAYER
    35
    36 DA79			DONULL:
    37 DA79 A9 FF			LDA     #$FF
    38 DA7B 99 8C 00			STA     STATUS,Y
    39 DA7E 30 07			BMI     NEXTEXPL
    40
    41 DA80			NEXTECYC:
    42 DA80 18				CLC
    43 DA81 7D 8B DA			ADC     ESIZE,X
    44 DA84 99 2E 19			STA     ACYC,Y
    45
    46 DA87			NEXTEXPL:
    47 DA87 88				DEY
    48 DA88 10 C7			BPL     EXPLLOOP
    49 DA8A 60				RTS
    50
    51 DA8B			ESIZE:
    52 DA8B 01 02 03 02 01 02 + 	.byte	1,2,3,2,1,2,0
    37 DA92				icl	"COLLIDE.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\COLLIDE.asm
     1 				*         1515    030784
     2 				*
     3 				*
     4 				** COLLIDE.S **
     5 				** ASTEROIDS FOR THE ATARI 3600 **
     6 				** THIS FILE CONTAINS THE COLLISION HANDLING ROUTINE. **
     7 				**
     8 				**        INDEXING - ROCKS               0 THRU 23
     9 				**                   SHIP                24
    10 				**                   UFO                 25
    11 				**                   UFOSHOT             26 THRU 27
    12 				**                   SHIPSHOT            28 THRU 31
    13 				**                   SHIP2               32
    14 				**
    15 				**        STATUS - LO NYBBLE - OBJECT TYPE - 0 - SMALL ROCK
    16 				**                                           1 - MEDIUM ROCK
    17 				**                                           2 - LARGE ROCK
    18 				**                                           3 - SHIP
    19 				**                                           4 - SMALL UFO
    20 				**                                           5 - LARGE UFO
    21 				**                                           6 - SHOT
    22 				**                                           7 - SHIP'S PARTS (+MISC JUNK)
    23 				**                 HI NYBBLE - OBJECT SIZE - INDEX INTO SIZE TABLES
    24 				**                                           (UNUSED, I BELIEVE)
    25 				**
    26 				**                  < 0 - NULL OBJECT
    27 				**
    28 				**        USES TEMP LOCATIONS AS FOLLOWS:
    29 				**                TEMP                   DX (REUSED LATER)
    30 				**                TEMP+1                 DY
    31 				**                TEMP+2                 DX+DY (MANHATTAN DISTANCE)
    32 				**                TEMP+3,TEMP+4          SAVE AREA FOR INDEX REGISTERS X & Y
    33 				**                TEMP+5,TEMP+6          SAVE AREA FOR 'TYPE NYBBLES'
    34 				**                                       (IE, LO NYBBLE OF STATUS BYTE)
    35 				**                TEMP+7                 ROCK TYPE, IN THE EVENT OF AN EXPLOSION
    36 				**                TEMP+8,TEMP+9          SHORT TERM SCRATCH TEMP
    37 				**                TEMP+10                SHIP'S DIRECTION INDEX
    38 				**
    39 				********************************************************************************
    40
    41
    42 DA92			COLLIDE:
    43 DA92 A5 FD			LDA	RUBFLAG		;DECREMENT RUBBER SHIP FLAG IF NEEDED
    44 DA94 30 02			BMI	ZNODERUB
    45 DA96 C6 FD			DEC	RUBFLAG
    46 DA98			ZNODERUB:
    47 DA98 A2 20			LDX	#32		;START CHECKING WITH SHIP2
    48 DA9A			COLNXTX:
    49 DA9A B5 8C			LDA	STATUS,X	;IF OBJECT X DOESN'T EXIST THEN
    50 DA9C 30 16			BMI	DECX		;GO ON TO NEXT X
    51
    52 DA9E BC C8 DD			LDY	COLTAB-24,X	;FETCH FIRST OBJECT TO CHECK
    53 DAA1			COLNXTY:
    54 DAA1 B9 8C 00			LDA	STATUS,Y	;IF OBJECT Y DOESN'T EXIST THEN
    55 DAA4 30 0B			BMI	DECY		;GO ON TO NEXT Y
    56
    57 DAA6 86 58			STX	TEMP+3		;SAVE X AND Y
    58 DAA8 84 59			STY	TEMP+4
    59
    60 DAAA 4C BA DA			JMP	COLCHK		;CHECK FOR COLLISION
    61
    62 DAAD			RESTORE:
    63 DAAD A6 58			LDX	TEMP+3	;RESTORE X AND Y
    64 DAAF A4 59			LDY	TEMP+4
    65
    66 DAB1			DECY:
    67 DAB1 88				DEY
    68 DAB2 10 ED			BPL	COLNXTY
    69 DAB4			DECX:
    70 DAB4 CA				DEX
    71 DAB5 E0 18			CPX	#24
    72 DAB7 10 E1			BPL	COLNXTX
    73 DAB9			COLRTS:
    74 DAB9 60				RTS
    75
    76
    77
    78 				* CHECK FOR AN ACTUAL COLLISION BETWEEN OBJECTS WHOSE INDICES ARE IN X AND Y.
    79 DABA			COLCHK:
    80 DABA BD 72 19			LDA	COLXPOSH,X	;COMPUTE DX
    81 DABD 38				SEC
    82 DABE F9 72 19			SBC	COLXPOSH,Y
    83 DAC1 B0 04			BCS	DXPOS		;TAKE ABSOLUTE VALUE
    84 DAC3 49 FF			EOR	#$FF
    85 				;	CLC			;CARRY MUST ALREADY BE CLR (BCS ABOVE)
    86 DAC5 69 01			ADC	#1
    87
    88 DAC7			DXPOS:
    89 DAC7 C9 92			CMP	#XPOSMAX-13	;CHECK FOR WRAPAROUND (WIDEST OBJ=12)
    90 DAC9 90 0F			BCC	DXOK		;NO WRAP
    91 DACB E0 19			CPX	#25		;DON'T X-WRAP THE UFO
    92 DACD F0 0B			BEQ	DXOK
    93 DACF C0 19			CPY	#25
    94 DAD1 F0 07			BEQ	DXOK
    95 DAD3 38				SEC
    96 DAD4 E9 A0			SBC	#XPOSMAX+1	;USE WRAPPED DISTANCE
    97 DAD6 49 FF			EOR	#$FF
    98 				;	CLC			;CARRY IS CLEAR FROM SBC (IE, BORROW)
    99 DAD8 69 01			ADC	#1
   100
   101 DADA			DXOK:
   102 DADA C9 0A			CMP	#10		;FURTHEST COLLISION HAS DX OF ONLY 10
   103 DADC B0 5C			BCS	NOCOL		; IF >= 11, NO COLLISION.
   104 DADE 85 55			STA	TEMP
   105
   106 DAE0 BD 9E 19			LDA	COLYPOSH,X	;COMPUTE DY
   107 DAE3 38				SEC
   108 DAE4 F9 9E 19			SBC	COLYPOSH,Y
   109 DAE7 B0 04			BCS	DYPOS		;TAKE ABSOLUTE VALUE
   110 DAE9 49 FF			EOR	#$FF
   111 				;	CLC		;CARRY MUST ALREADY BE CLR (BCS ABOVE)
   112 DAEB 69 01			ADC	#1
   113
   114 DAED			DYPOS:
   115 DAED C9 AE			CMP	#YPOSMAX-17	;CHECK FOR WRAPAROUND (TALLEST OBJ=16)
   116 DAEF 90 06			BCC	DYOK		;NO WRAP
   117 DAF1 E9 C0			SBC	#YPOSMAX+1	;USE WRAPPED DISTANCE
   118 DAF3 49 FF			EOR	#$FF
   119 				;	CLC		;CARRY IS CLEAR FROM SBC (IE, BORROW)
   120 DAF5 69 01			ADC	#1
   121
   122 DAF7			DYOK:
   123 DAF7 C9 0E			CMP	#14		;FURTHEST COLLISION HAS DY OF ONLY 14
   124 DAF9 B0 3F			BCS	NOCOL		; IF >= 15, NO COLLISION.
   125 DAFB 85 56			STA	TEMP+1
   126
   127 				* AT THIS POINT, WE MUST DO CLOSER INSPECTION, SINCE THE OBJECTS ARE CLOSE.
   128 DAFD 18				CLC			;COMPUTE MANHATTAN DISTANCE (DX+DY)
   129 DAFE 65 55			ADC	TEMP
   130 DB00 85 57			STA	TEMP+2
   131
   132 DB02 B5 8C			LDA	STATUS,X	;TEMP+5 <- TYPE OF OBJECT X
   133 DB04 29 0F			AND	#$0F
   134 DB06 85 5A			STA	TEMP+5
   135
   136 DB08 B9 8C 00			LDA	STATUS,Y	;TEMP+6 <- TYPE OF OBJECT Y
   137 DB0B 29 0F			AND	#$0F
   138 DB0D 85 5B			STA	TEMP+6
   139
   140 DB0F 84 5E			STY	TEMP+9		;SAVE Y, WE NEED AN INDEX REGISTER!
   141
   142 DB11 A8				TAY
   143 DB12 B9 F9 DD			LDA	OBJDIAG,Y	;GET WIDTH OF SECOND OBJECT
   144 DB15 A4 5A			LDY	TEMP+5
   145 DB17 79 F9 DD			ADC	OBJDIAG,Y	;ADD IN WIDTH OF FIRST OBJECT
   146 DB1A C5 57			CMP	TEMP+2		;COMPARE WITH MANHATTAN DISTANCE
   147 DB1C 30 1A			BMI	NOCOL1		;TOO FAR AWAY, NO COLLISION.
   148
   149 DB1E B9 E9 DD			LDA	OBJWID,Y	;DO MORE PRECISE XTENT CHECKING
   150 DB21 A4 5B			LDY	TEMP+6
   151 DB23 18				CLC
   152 DB24 79 E9 DD			ADC	OBJWID,Y
   153 DB27 C5 55			CMP	TEMP
   154 DB29 90 0D			BCC	NOCOL1		;TOO FAR TO THE SIDE: NO COLLISION
   155
   156 DB2B B9 F1 DD			LDA	OBJHEIT,Y	;DO MORE PRECISE YTENT CHECKING
   157 DB2E A4 5A			LDY	TEMP+5
   158 DB30 18				CLC
   159 DB31 79 F1 DD			ADC	OBJHEIT,Y
   160 DB34 C5 56			CMP	TEMP+1
   161 DB36 B0 22			BCS	YESCOL	;WE HAVE A COLLISION.
   162
   163
   164 DB38			NOCOL1:
   165 DB38 A4 5E			LDY	TEMP+9	;RESTORE Y
   166 DB3A			NOCOL:
   167 DB3A C0 28			CPY	#40		;DECREMENT INDICES WITHOUT RESTORING
   168 DB3C F0 0C			BEQ	COLSETX		; IF WE ARE DOING SPECIAL CHECKING
   169 DB3E B0 16			BCS	DECY1
   170 DB40 E0 28			CPX	#40
   171 DB42 F0 3A			BEQ	RESTORE1
   172 DB44 E0 25			CPX	#37
   173 DB46 90 36			BCC	RESTORE1
   174 DB48 B0 08			BCS	DECX1		;(UNCONDITIONAL)
   175
   176 DB4A			COLSETX:
   177 DB4A E0 25			CPX	#37		;SET X AND Y TO LOOP OVER SHIP'S PARTS
   178 DB4C 90 30			BCC	RESTORE1
   179 DB4E B0 00			BCS	COLSETY		;(UNCONDITIONAL)
   180
   181 DB50			COLSETY:
   182 DB50 A0 2B			LDY	#43		;RESET Y FOR NEXT ROUND
   183 DB52			DECX1:
   184 DB52 CA				DEX
   185 DB53 4C BA DA			JMP	COLCHK
   186 DB56			DECY1:
   187 DB56 88				DEY
   188 DB57 4C BA DA			JMP	COLCHK
   189
   190
   191 				* COME HERE IN THE EVENT OF A POSSIBLE COLLISION.
   192 DB5A			YESCOL:
   193 					;COMPUTE LOWEST P2 BULLET OR SHIP FOR THIS MODE.  IN TEAM MODES
   194 					;WE SHARE BULLETS.  RESULT IS LEFT IN TEMP FOR LATER.
   195 DB5A A9 20			LDA	#32		;ASSUME 30 AND 31 ARE NOT P2'S
   196 DB5C A4 82			LDY	MODE
   197 DB5E C0 01			CPY	#1
   198 DB60 30 02			BMI	NOTEAMSC	;NOT TEAMPLAY, DON'T SPLIT BULLETS
   199 DB62 A9 1E			LDA	#30		;30 AND 31 ARE P2'S
   200 DB64			NOTEAMSC:
   201 DB64 85 55			STA	TEMP
   202
   203 DB66 A4 5E			LDY	TEMP+9		;RESTORE Y
   204
   205 				* PERFORM ACTIONS DEPENDENT UPON THE SPECIAL CASE OBJECTS
   206 DB68 E0 20			CPX	#32
   207 DB6A F0 15			BEQ	COLP2X		;FIRST OBJECT IS P2 SHIP
   208 DB6C E0 18			CPX	#24
   209 DB6E F0 4F			BEQ	COLP1X		;FIRST OBJECT IS P1 SHIP
   210 DB70 C0 18			CPY	#24
   211 DB72 F0 31			BEQ	COLP1Y		;SECOND OBJECT IS P1 SHIP
   212
   213 DB74 A6 58			LDX	TEMP+3		;RESTORE X AND Y
   214 DB76 A4 59			LDY	TEMP+4
   215 DB78 20 D3 DC			JSR	DOCOL		;DO THE COLLISION
   216 DB7B 4C B4 DA			JMP	DECX		;AND THE NEXT ITERATION
   217 DB7E			RESTORE1:
   218 DB7E 4C AD DA			JMP	RESTORE		;AND CONTINUE
   219
   220
   221 DB81			COLP2X:
   222 DB81 A5 7F			LDA	STATE+1		;DON'T COLLIDE IF SHIP ISN'T OK
   223 DB83 D0 F9			BNE	RESTORE1
   224
   225 DB85 A5 82			LDA	MODE		;IN COMPETITIVE, P1'S SHOTS KILL P2
   226 DB87 C9 02			CMP	#2
   227 DB89 F0 04			BEQ	COLP2XGO
   228 DB8B C0 1C			CPY	#28		; (P1'S SHOTS ARE 28 AND 29)
   229 DB8D B0 EF			BCS	RESTORE1	;OTHERWISE, IGNORE THEM
   230 DB8F			COLP2XGO:
   231 DB8F A2 27			LDX	#39		;POINT TO SHIP2'S PARTS
   232 DB91 20 16 DC			JSR	P2SETUP		;SET UP FOR SPECIAL P2 CHECKING
   233 DB94 C0 18			CPY	#24		;IS IT SHIP1 VS SHIP2?
   234 DB96 D0 24			BNE	COLNOP1Y	;NOPE
   235 DB98 A5 82			LDA	MODE
   236 DB9A C9 02			CMP	#2		;IN COMPETITIVE PLAY, DON'T BOUNCE,
   237 DB9C F0 07			BEQ	COLP1Y		; COLLIDE!
   238
   239 DB9E A5 7E			LDA	STATE		;IF SHIP NOT OK, DON'T COLLIDE
   240 DBA0 D0 DC			BNE	RESTORE1
   241 DBA2 4C 8D DD			JMP	RUBBERS		;LET'S GO BOUNCY BOUNCY...
   242
   243 DBA5			COLP1Y:
   244 DBA5 A5 7E			LDA	STATE		;DON'T COLLIDE IF SHIP ISN'T OK
   245 DBA7 D0 D5			BNE	RESTORE1
   246
   247 DBA9 E0 1C			CPX	#28		;ANYTHING LESS THAN 28 IS HARMFUL
   248 DBAB 90 0A			BCC	COLP1YGO
   249
   250 					;IN TEAM PLAY, IGNORE THE COLLISION: THEY ARE FRIENDS
   251 DBAD A5 82			LDA	MODE
   252 DBAF C9 01			CMP	#1
   253 DBB1 F0 CB			BEQ	RESTORE1
   254
   255 DBB3 E4 55			CPX	TEMP		;CHECK AGAINST P2'S BULLETS.
   256 DBB5 90 C7			BCC	RESTORE1	; IF < TEMP, IT IS SAFE
   257
   258 					;NOT SAFE: CHECK SHIP'S PARTS
   259 DBB7			COLP1YGO:
   260 DBB7 A0 2B			LDY	#43		;POINT TO SHIP1'S PARTS
   261 DBB9			COLP1GO:
   262 DBB9 20 C7 DB			JSR	P1SETUP		;SET THEM UP
   263 DBBC			COLNOP1Y:
   264 DBBC 4C BA DA			JMP	COLCHK		;AND CONTINUE
   265
   266
   267 DBBF			COLP1X:
   268 DBBF A5 7E			LDA	STATE		;DON'T COLLIDE IF SHIP ISN'T OK
   269 DBC1 D0 BB			BNE	RESTORE1
   270
   271 DBC3 A2 2B			LDX	#43		;POINT TO SHIP1'S PARTS
   272 DBC5 D0 F2			BNE	COLP1GO		;CONTINUE AS ABOVE (UNCONDITIONAL)
   273
   274
   275 				* P1SETUP: SET UP STATUS ENTRIES FOR THE PARTS OF THE SHIP TO CHECK
   276 DBC7			P1SETUP:
   277 DBC7 86 5D			STX	TEMP+8
   278 DBC9 A5 C1			LDA	SHIPDIR		;GENERATE SHIP DIRECTION INDEX
   279 DBCB 4A				LSR
   280 DBCC 4A				LSR
   281 DBCD 4A				LSR
   282 DBCE 4A				LSR
   283 DBCF AA				TAX
   284 DBD0 BD B8 FD			LDA	SHNOSEX,X
   285 DBD3 18				CLC
   286 DBD4 6D BC 18			ADC	XPOSH+24
   287 DBD7 8D 9A 19			STA	COLXPOSH+40
   288 DBDA BD C8 FD			LDA	SHNOSEY,X
   289 DBDD 6D E0 18			ADC	YPOSH+24
   290 DBE0 8D C6 19			STA	COLYPOSH+40
   291
   292 DBE3 BD 21 DE			LDA	SHRTAILX,X
   293 				;	CLC
   294 DBE6 6D BC 18			ADC	XPOSH+24
   295 DBE9 8D 9B 19			STA	COLXPOSH+41
   296 DBEC BD 31 DE			LDA	SHRTAILY,X
   297 DBEF 6D E0 18			ADC	YPOSH+24
   298 DBF2 8D C7 19			STA	COLYPOSH+41
   299
   300 DBF5 BD 01 DE			LDA	SHLTAILX,X
   301 				;	CLC
   302 DBF8 6D BC 18			ADC	XPOSH+24
   303 DBFB 8D 9C 19			STA	COLXPOSH+42
   304 DBFE BD 11 DE			LDA	SHLTAILY,X
   305 DC01 6D E0 18			ADC	YPOSH+24
   306 DC04 8D C8 19			STA	COLYPOSH+42
   307
   308 DC07 AD 8A 19			LDA	COLXPOSH+24
   309 DC0A 8D 9D 19			STA	COLXPOSH+43
   310 DC0D AD B6 19			LDA	COLYPOSH+24
   311 DC10 8D C9 19			STA	COLYPOSH+43
   312
   313 DC13 A6 5D			LDX	TEMP+8
   314 DC15 60				RTS
   315
   316 				* P2SETUP: SET UP STATUS ENTRIES FOR THE PARTS OF THE SHIP TO CHECK
   317 DC16			P2SETUP:
   318 DC16 86 5D			STX	TEMP+8
   319 DC18 A5 C2			LDA	SHIPDIR+1	;GENERATE SHIP DIRECTION INDEX
   320 DC1A 4A				LSR
   321 DC1B 4A				LSR
   322 DC1C 4A				LSR
   323 DC1D 4A				LSR
   324 DC1E AA				TAX
   325 DC1F BD B8 FD			LDA	SHNOSEX,X
   326 DC22 18				CLC
   327 DC23 6D C4 18			ADC	XPOSH+32
   328 DC26 8D 96 19			STA	COLXPOSH+36
   329 DC29 BD C8 FD			LDA	SHNOSEY,X
   330 DC2C 6D E8 18			ADC	YPOSH+32
   331 DC2F 8D C2 19			STA	COLYPOSH+36
   332
   333 DC32 BD 21 DE			LDA	SHRTAILX,X
   334 				;	CLC
   335 DC35 6D C4 18			ADC	XPOSH+32
   336 DC38 8D 97 19			STA	COLXPOSH+37
   337 DC3B BD 31 DE			LDA	SHRTAILY,X
   338 DC3E 6D E8 18			ADC	YPOSH+32
   339 DC41 8D C3 19			STA	COLYPOSH+37
   340
   341 DC44 BD 01 DE			LDA	SHLTAILX,X
   342 				;	CLC
   343 DC47 6D C4 18			ADC	XPOSH+32
   344 DC4A 8D 98 19			STA	COLXPOSH+38
   345 DC4D BD 11 DE			LDA	SHLTAILY,X
   346 DC50 6D E8 18			ADC	YPOSH+32
   347 DC53 8D C4 19			STA	COLYPOSH+38
   348
   349 DC56 AD 92 19			LDA	COLXPOSH+32
   350 DC59 8D 99 19			STA	COLXPOSH+39
   351 DC5C AD BE 19			LDA	COLYPOSH+32
   352 DC5F 8D C5 19			STA	COLYPOSH+39
   353
   354 DC62 A6 5D			LDX	TEMP+8
   355 DC64 60				RTS
   356
   357 				* DOCOL1: PERFORM CERTAIN COMMON ACTIONS ON AN OBJECT EXPLODING.
   358 				* ON ENTRANCE, X IS THE INDEX OF OBJECT COLLIDING.  ON EXIT, TEMP+6 HAS THE
   359 				* 'TYPE NYBBLE'.  OH, AND BY THE WAY, X AND Y ARE TRASHED.
   360 DC65			DOCOL1:
   361 DC65 86 5D			STX	TEMP+8		;SAVE X
   362 DC67 B5 8C			LDA	STATUS,X
   363 DC69 09 80			ORA	#$80		;TAG THIS OBJECT AS "EXPLODING"
   364 DC6B 95 8C			STA	STATUS,X
   365 DC6D 29 0F			AND	#$0F		;COMPUTE OBJECT TYPE (AGAIN)
   366 DC6F 85 5B			STA	TEMP+6		;STORE IT
   367
   368 DC71 C9 06			CMP	#6
   369 DC73 B0 20			BCS	NOEXPSND	;OBJECTS >= 6 MAKE NO EXPLOSION SOUNDS
   370 DC75 C9 04			CMP	#4
   371 DC77 B0 25			BCS	COLUFO		;UFO COLLIDING: HANDLE IT
   372 DC79 C9 03			CMP	#3
   373 DC7B B0 41			BCS	COLSHIP		;SHIP COLLIDING: HANDLE IT
   374
   375 				;	CLC			;CARRY IS CLEAR
   376 DC7D 69 0A			ADC	#$0A		;ADD OFFSET OF ROCK TUNES
   377 DC7F 48				PHA			;THIS IS 'ROCKSND'
   378 DC80 A9 0A			LDA	#$0A		; (KILL OFF ANY CURRENT ROCK SOUNDS)
   379 DC82 20 B7 F1			JSR	KILLTUNE
   380 DC85 A9 0B			LDA	#$0B
   381 DC87 20 B7 F1			JSR	KILLTUNE
   382 DC8A A9 0C			LDA	#$0C
   383 DC8C 20 B7 F1			JSR	KILLTUNE
   384 DC8F 68				PLA
   385
   386 DC90			CONT:
   387 DC90 20 70 F1			JSR	DOTUNE
   388 DC93 A6 5D			LDX	TEMP+8		;RESTORE X, TRASHED BY DOTUNE
   389 DC95			NOEXPSND:
   390 DC95 A4 5B			LDY	TEMP+6		;GET TYPE NYBBLE
   391 DC97 B9 E6 F3			LDA	ELBOUND,Y	;SET UP EXPLOSION ANIMATION
   392 DC9A 9D 2E 19			STA	ACYC,X
   393 DC9D 60				RTS
   394
   395 DC9E			COLUFO:
   396 DC9E AA				TAX
   397 DC9F 38				SEC
   398 DCA0 E9 02			SBC	#2		;COMPUTE INDEX INTO LVLINC
   399 DCA2 20 9E F8			JSR	INCLVL		;MAKE IT HARDER NOW
   400 DCA5 E0 04			CPX	#4		;ONLY MR. BILL CHANGES ACCURACY
   401 DCA7 D0 08			BNE	ZNOBILAC
   402 DCA9 A5 E7			LDA	UFOACC
   403 DCAB C9 04			CMP	#4		;DON'T GO BELOW 3
   404 DCAD 90 02			BCC	ZNOBILAC
   405 DCAF C6 E7			DEC	UFOACC		;TIGHTEN UP MR. BILL'S ACCURACY
   406 DCB1			ZNOBILAC:
   407 DCB1 8A				TXA			;DO TUNES: CANCEL THEME AND PLAY EXPL.
   408 DCB2 18				CLC
   409 DCB3 69 02			ADC	#2		;EXPLOSION = TYPE + 2
   410 DCB5 48				PHA			;PUSH IT FOR LATER
   411 DCB6 69 02			ADC	#2		;THEME = TYPE + 4
   412 DCB8 20 B7 F1			JSR	KILLTUNE
   413 DCBB 68				PLA			;PULL EXPLOSION SOUND
   414 DCBC 10 D2			BPL	CONT		;BPL = JMP
   415
   416 DCBE			COLSHIP:
   417 DCBE A5 5D			LDA	TEMP+8		;FIGURE OUT WHICH SHIP DIED
   418 DCC0 A2 00			LDX	#0		;DEFAULT TO SHIP 1
   419 DCC2 C9 20			CMP	#32		;FIGURE OUT WHICH SHIP DIED
   420 DCC4 D0 01			BNE	NOP2DIE
   421 DCC6 E8				INX			;INCREMENT TO SHIP 2
   422 DCC7			NOP2DIE:
   423 DCC7 A9 03			LDA	#DEATH		;INDUCE A FATAL DEATH
   424 DCC9 95 7E			STA	STATE,X
   425 DCCB A9 DE			LDA	#DIET+$28	;AT TIMER 'DIE TIME' + $28
   426 DCCD 95 80			STA	TIMER,X
   427
   428 DCCF A9 05			LDA	#$05		;SHIP EXPLOSION = 05
   429 DCD1 10 BD			BPL	CONT		;BPL = JMP
   430
   431 				* WE HAVE A COLLISION, FOLKS!  DO WHAT NEEDS TO BE DONE (EXPLODING, SCORING)
   432 DCD3			DOCOL:
   433 				;DEBUGGING PATCH
   434 				;	  LDA	  #$0A	;USE SMALL ROCK EXPLOSION SOUND
   435 				;	  JSR	  DOTUNE
   436 				;	  LDX	  TEMP+3
   437 				;	  LDY	  TEMP+4
   438 				;	  RTS
   439
   440 				* FIRST DO TUNES AND EXPLOSION ANIMATIONS
   441 				;	LDX	TEMP+3
   442 DCD3 20 65 DC			JSR	DOCOL1
   443 DCD6 A5 5B			LDA	TEMP+6		;TRANSFER TYPE NYBBLE
   444 DCD8 85 5A			STA	TEMP+5		; TO PROPER PLACE
   445
   446 DCDA A6 59			LDX	TEMP+4
   447 DCDC 20 65 DC			JSR	DOCOL1
   448
   449 				* NOW DO SCORING
   450 DCDF A6 5B			LDX	TEMP+6		;SCORE ONE OBJECT
   451 DCE1 A4 58			LDY	TEMP+3
   452 DCE3 20 F4 DC			JSR	DOSCOR
   453 DCE6 A6 5A			LDX	TEMP+5		;SCORE OTHER OBJECT
   454 DCE8 A4 59			LDY	TEMP+4
   455 DCEA 20 F4 DC			JSR	DOSCOR
   456
   457 DCED C0 18			CPY	#24		;SEE IF WE HAVE ANY EXPLODING ROCKS
   458 DCEF 90 24			BCC	ROCKEXPL
   459 DCF1 A6 58			LDX	TEMP+3		;RESTORE X
   460 DCF3 60				RTS
   461
   462 				* SCORE OBJECT OF TYPE X ACCORDINGLY AS IT WERE SHOT BY OBJECT Y
   463 				* I.E., IF Y CONTAINS INDEX OF PLAYER ONE'S SHOT, SCORE A HIT ON AN 'X' TO
   464 				* PLAYER ONE.
   465 DCF4			DOSCOR:
   466 DCF4 C4 55			CPY	TEMP		;CHECK P2'S BULLETS OR SHIP
   467 DCF6 10 19			BPL	SCORP2		;CREDIT OBJECT TO P2'S SCORE
   468 DCF8 C0 1C			CPY	#28		;CHECK P1'S BULLETS
   469 DCFA 10 0D			BPL	SCORPL		;CREDIT OBJECT TO CURRENT PLAYER
   470 DCFC C0 18			CPY	#24		;CHECK P1'S SHIP
   471 DCFE D0 10			BNE	SCORERTS	;NONE OF THE ABOVE: RTS
   472 DD00 E0 03			CPX	#3		;IS IT A SHIP THAT #24 IS HITTING?
   473 DD02 D0 05			BNE	SCORPL		;NO.  JUST SCORE IT.
   474 DD04 A9 11			LDA	#17		;SOUR THE GOATMILK
   475 DD06 8D 07 1B			STA	GOATMILK
   476 				;	RTS		;RTS IF YOU DON'T WANT TO SCORE THESE.
   477
   478 DD09			SCORPL:
   479 DD09 A5 79			LDA	PLAYER		;SCORE IT TO THE CURRENT PLAYER
   480 DD0B			SCORIT:
   481 DD0B 85 7A			STA	SCORER		;MARK THE SCORER
   482 DD0D 20 41 DE			JSR	ADDPOINT	;RACK 'EM UP
   483 DD10			SCORERTS:
   484 DD10 60				RTS
   485
   486 DD11			SCORP2:
   487 DD11 A9 01			LDA	#1		;SCORE FOR P2 REGARDLESS OF PLAYER
   488 DD13 10 F6			BPL	SCORIT		;BPL = JMP
   489
   490
   491 				* HANDLE EXPLODING (="SPLITTING") ROCKS.
   492 DD15			ROCKEXPL:
   493 DD15 B9 8C 00			LDA	STATUS,Y	;CHECK THE EXPLODING ROCK
   494 DD18 38				SEC
   495 DD19 E9 91			SBC	#$91		;WIDTH IS LO NYBBLE. IF =1, THEN SMALL
   496 DD1B 30 1F			BMI	SPLITRTS	;THIS IS CLEVER.  B2-91=21, ETC...
   497 DD1D 85 5C			STA	TEMP+7		;SAVE IT FOR NEWROCK TO USE...
   498
   499 DD1F A9 50			LDA	#$50		;RESET 5.2 SEC UFO COUNTER
   500 DD21 85 E4			STA	RTIMER
   501
   502 					;CREATE ONE, TWO, OR THREE NEW ROCKS, BASED ON DIFF.
   503 DD23 A5 83			LDA	DIFF		;UNLESS AT A WHIPPY LEVEL THEN ONE
   504 DD25 F0 10			BEQ	ONEROCK
   505 DD27 C9 03			CMP	#3		;AT EXPERT LEVEL, MAYBE > 2 ROCKS!
   506 DD29 90 09			BCC	TWOROCKS
   507 DD2B A5 40			LDA	RANDPTR0	;USE PTR AS RANDOM (NEWRAND SCREWS Y)
   508 DD2D 29 03			AND	#$03
   509 DD2F D0 03			BNE	TWOROCKS
   510 DD31 20 3D DD			JSR	NEWROCK		;CREATE EACH NEW ROCK IF POSSIBLE;
   511 DD34			TWOROCKS:
   512 DD34 20 3D DD			JSR	NEWROCK	;NEWROCK RETURNS "EMPTY HANDED" IF NOT.
   513 DD37			ONEROCK:
   514 DD37 20 3D DD			JSR	NEWROCK
   515
   516 DD3A A6 58			LDX	TEMP+3		;RESTORE X, TRASHED IN NEWROCK
   517 DD3C			SPLITRTS:
   518 DD3C 60				RTS
   519
   520 DD3D			NEWROCK:
   521 DD3D A2 17			LDX	#23		;FIND A FREE ROCK SLOT
   522 DD3F			ROCKLOOP:
   523 DD3F B5 8C			LDA	STATUS,X
   524 DD41 C9 FF			CMP	#$FF
   525 DD43 F0 04			BEQ	THISROCK
   526 DD45 CA				DEX
   527 DD46 10 F7			BPL	ROCKLOOP
   528 DD48 60				RTS
   529
   530 DD49			THISROCK:
   531 DD49 B9 EC 18			LDA	XPOSL,Y		;INITIALIZE NEW ROCK (X) FROM OLD (Y)
   532 DD4C 9D EC 18			STA	XPOSL,X
   533 DD4F B9 A4 18			LDA	XPOSH,Y
   534 DD52 9D A4 18			STA	XPOSH,X
   535 DD55 B9 0D 19			LDA	YPOSL,Y
   536 DD58 9D 0D 19			STA	YPOSL,X
   537 DD5B B9 C8 18			LDA	YPOSH,Y
   538 DD5E 9D C8 18			STA	YPOSH,X
   539 DD61 B9 72 19			LDA	COLXPOSH,Y	;THESE AREN'T QUITE RIGHT, BUT CLOSE.
   540 DD64 9D 72 19			STA	COLXPOSH,X
   541 DD67 B9 9E 19			LDA	COLYPOSH,Y
   542 DD6A 9D 9E 19			STA	COLYPOSH,X
   543 DD6D B9 CB 1A			LDA	PALS,Y		;ADJUST WIDTH TO SMALLER ROCK SIZE
   544 DD70 18				CLC
   545 DD71 69 01			ADC	#1
   546 DD73 9D CB 1A			STA	PALS,X
   547
   548 DD76 A5 5C			LDA	TEMP+7		;GIVE IT THE PROPER ROCK TYPE STATUS
   549 DD78 95 8C			STA	STATUS,X
   550 DD7A 29 0F			AND	#$0F		;SET FIRST ANIMATION FRAME
   551 DD7C A8				TAY
   552 DD7D B9 F6 F3			LDA	ROCKCYC,Y
   553 DD80 9D 2E 19			STA	ACYC,X
   554 DD83 20 F9 F8			JSR	RANDVEL		;SET UP RANDOM VELOCITIES.
   555 DD86 A6 79			LDX	PLAYER
   556 DD88 F6 C5			INC	ROCKTOT,X	;THERE IS NOW ONE MORE ROCK!
   557 DD8A A4 59			LDY	TEMP+4		;RESTORE Y, TRASHED ABOVE
   558 DD8C 60				RTS
   559
   560 				;RUBBER SHIPS
   561 DD8D			RUBBERS:
   562 DD8D A5 FD			LDA	RUBFLAG		;HAVE WE BEEN HERE BEFORE?
   563 DD8F 10 48			BPL	ZNORUB		;YUP.  DON'T BOUNCE BACK
   564
   565 DD91 AD 59 18			LDA	XVELH+24
   566 DD94 C9 80			CMP	#$80		;SIGNED 16 BIT DIVIDE BY TWO
   567 DD96 6A				ROR
   568 DD97 48				PHA
   569 DD98 AD 38 18			LDA	XVELL+24
   570 DD9B 6A				ROR
   571 DD9C 48				PHA
   572 DD9D AD 61 18			LDA	XVELH+32
   573 DDA0 C9 80			CMP	#$80
   574 DDA2 6A				ROR
   575 DDA3 8D 59 18			STA	XVELH+24
   576 DDA6 AD 40 18			LDA	XVELL+32
   577 DDA9 6A				ROR
   578 DDAA 8D 38 18			STA	XVELL+24
   579 DDAD 68				PLA
   580 DDAE 8D 40 18			STA	XVELL+32
   581 DDB1 68				PLA
   582 DDB2 8D 61 18			STA	XVELH+32
   583
   584 DDB5 AD 9B 18			LDA	YVELH+24
   585 DDB8 C9 80			CMP	#$80
   586 DDBA 6A				ROR
   587 DDBB 48				PHA
   588 DDBC AD 7A 18			LDA	YVELL+24
   589 DDBF 6A				ROR
   590 DDC0 48				PHA
   591 DDC1 AD A3 18			LDA	YVELH+32
   592 DDC4 C9 80			CMP	#$80
   593 DDC6 6A				ROR
   594 DDC7 8D 9B 18			STA	YVELH+24
   595 DDCA AD 82 18			LDA	YVELL+32
   596 DDCD 6A				ROR
   597 DDCE 8D 7A 18			STA	YVELL+24
   598 DDD1 68				PLA
   599 DDD2 8D 82 18			STA	YVELL+32
   600 DDD5 68				PLA
   601 DDD6 8D A3 18			STA	YVELH+32
   602
   603 DDD9			ZNORUB:
   604 DDD9 A9 01			LDA	#1		;PREVENT A SECOND BOUNCE
   605 DDDB 85 FD			STA	RUBFLAG
   606 DDDD 4C AD DA			JMP	RESTORE
   607
   608 				* TABLE OF STARTING VALUES FOR 'Y' IN COLLIDE LOOP: ESSENTIALLY, THESE ARE
   609 				* THE HIGHEST NUMBERED OBJECTS WE MUST COMPARE TO FOR A GIVEN X.
   610 				* THESE ARE OFFSET BY 24, SINCE THE LOWEST X WE CHECK IS 24 (SHIP1)
   611 				*
   612 DDE0			COLTAB:
   613 DDE0 17 18 18 18 19 19 + 	.byte	23,24,24,24,25,25,25,25,29
   614
   615 				* WIDTH TABLES FOR COLLISION PURPOSES
   616 DDE9			OBJWID:
   617 DDE9 02 04 05 03 02 04 + 	.byte	 2,4,5,3,2,4,1,1;X-EXTENTS (XTENTS)
   618 DDF1			OBJHEIT:
   619 DDF1 03 06 08 06 02 03 + 	.byte	 3,6,8,6,2,3,1,1;Y-EXTENTS (YTENTS)
   620 DDF9			OBJDIAG:
   621 DDF9 03 06 09 06 02 03 + 	.byte	 3,6,9,6,2,3,2,1;DIAGONALS
   622
   623 				* OFFSET (INTO THE STAMP) OF SHARP POINTS OF THE SHIP
   624 DE01			SHLTAILX:
   625 DE01 01 00 00 01 01 02 + 	.byte	 1,0,0,1,1,2,3,4,5,5,6,5,5,4,3,2
   626 DE11			SHLTAILY:
   627 DE11 05 07 09 0B 0C 0D + 	.byte	 5,7,9,11,12,13,14,14,13,11,9,7,6,5,4,4
   628 DE21			SHRTAILX:
   629 DE21 05 04 03 02 01 01 + 	.byte	 5,4,3,2,1,1,0,0,1,2,3,4,5,5,6,5
   630 DE31			SHRTAILY:
   631 DE31 05 04 04 05 06 07 + 	.byte	 5,4,4,5,6,7,9,11,13,14,14,13,12,11,9,7
    38 DE41				icl	"SCORE.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\SCORE.asm
     1 				*         1820    040784
     2 				*
     3 				*
     4 				** SCORE.S **
     5 				** ASTEROIDS FOR THE ATARI 3600 **
     6 				** THIS FILE CONTAINS PLAYER POINT TOTALLER AND SCORE DRIVER. **
     7 				** HANDLES PLAYER1 AND PLAYER2 SCORES **
     8 				**         EXTRA SHIPS AND HIGH SCORE **
     9 				**         COMBINED SCORE AND COMBINED EXTRA SHIPS **
    10
    11 				** TRASHES ACC, TEMP+12, TEMP+13, TEMP+14, AND TEMP+15 **
    12 				** USES TEMP+12 AS COMPARE VALUE = 4 FOR SCORER 0 AND 8 FOR SCORER 1 **
    13 				** USES TEMP+15 FOR POINTER INTO CHARACTER MAP, NEXT POSITION FOR CHARACTER **
    14 				** SAVES X AND Y IN TEMP+13 AND TEMP+14 **
    15
    16 				** PLAYER ONE     SET SCORER TO 0   **
    17 				**                SCORE THRU SCORE+3     CURRENT SCORE **
    18 				**                MENLEFT                NUMBER OF SHIPS REMAINING **
    19 				**                                       ONLY MAXIMUM OF 3 ARE SHOWN **
    20 				**                SCORMAP1               PLAYER1 SCORE CHARACTER MAP **
    21
    22 				** PLAYER TWO     SET SCORER TO 1   **
    23 				**                SCORE2 THRU SCORE2+3   CURRENT SCORE **
    24 				**                MENLEFT2               NUMBER OF SHIPS REMAINING **
    25 				**                SCORMAP2               PLAYER2 SCORE CHARACTER MAP **
    26
    27 				** HIGHSCORE      HISCORE                CURRENT HIGH SCORE **
    28 				**                SCORCMHS               HISCORE CHARACTER MAP **
    29
    30 				** COMBINED SCORE COMBSCOR               COMBINED PLAYER 1 AND PLAYER 2 SCORES
    31 				**	      SCORECMC	     COMBINED SCORE CHARACTER MAP **
    32
    33 DE41			ADDPOINT:
    34 DE41 A5 7B			LDA	GAMSTATE	;ONLY SCORE DURING GAME PLAY STATE
    35 DE43 C9 05			CMP	#PLAYST
    36 DE45 D0 10			BNE	ADDRTS
    37 DE47 20 58 DE			JSR	ADDSCORE	;SCORE THE SCORER
    38 DE4A A5 82			LDA	MODE		;IN TEAMPLAY, SCORE THE TEAM
    39 DE4C C9 01			CMP	#1
    40 DE4E D0 07			BNE	ADDRTS
    41 DE50 A9 02			LDA	#2		;2 = TEAM ENTITY
    42 DE52 85 7A			STA	SCORER
    43 DE54 20 58 DE			JSR	ADDSCORE
    44 DE57			ADDRTS:
    45 DE57 60				RTS
    46
    47 DE58			ADDSCORE:
    48 DE58 86 62			STX	TEMP+13		;SAVE REGISTERS
    49 DE5A 84 63			STY	TEMP+14
    50
    51 					;EACH TIME SOMEONE SCORES, RESET UFOTIMER
    52 				;	    LDA	#0
    53 				;	    STA	UFOTIMER	;INCREMENTED ONLY WHILE "LURKING"
    54
    55 DE5C A5 7A			LDA	SCORER	;CALCULATE OFFSET INTO SCORE
    56 DE5E 0A				ASL
    57 DE5F 0A				ASL
    58 DE60 A8				TAY
    59
    60 DE61 F8				SED			;DO ARITHMETIC IN DECIMAL MODE
    61 DE62 18				CLC
    62 DE63 BD A8 FD			LDA	LOSCOTAB,X	;GET OBJECT SCORE VALUE
    63 DE66 79 49 00			ADC	SCORE+3,Y	;ADD LOWEST BYTE
    64 DE69 99 49 00			STA	SCORE+3,Y
    65 DE6C BD B0 FD			LDA	HISCOTAB,X
    66 DE6F 79 48 00			ADC	SCORE+2,Y	;ADD NEXT BYTE WITH CARRY
    67 DE72 99 48 00			STA	SCORE+2,Y
    68 DE75 90 24			BCC	NOADD		;EVERY 10000 POINTS GET ADDITIONAL MAN
    69
    70 DE77 A5 82			LDA	MODE	;DON'T DO FOR TEAM PLAY INDIV SCORES
    71 DE79 C9 01			CMP	#1
    72 DE7B D0 06			BNE	DOINCM
    73 DE7D A5 7A			LDA	SCORER
    74 DE7F C9 02			CMP	#2
    75 DE81 D0 17			BNE	TEAMCK
    76
    77 DE83			DOINCM:
    78 DE83 D8				CLD
    79
    80 DE84 A9 00			LDA	#0		;TYPE 0 = POINTS INCREMENT
    81 DE86 20 9E F8			JSR	INCLVL
    82
    83 DE89 A6 7A			LDX	SCORER
    84 DE8B F6 52			INC	MENLEFT,X
    85 DE8D 20 0F DF			JSR	PUTMEN		;PUT UP EXTRA MAN
    86 DE90 A9 04			LDA	#4		;EXTRA SHIP FANFARE
    87 DE92 20 70 F1			JSR	DOTUNE
    88
    89 DE95 A5 7A			LDA	SCORER
    90 DE97 0A				ASL
    91 DE98 0A				ASL
    92 DE99 A8				TAY
    93 DE9A			TEAMCK:
    94 DE9A 38				SEC
    95 DE9B			NOADD:
    96 DE9B A9 00			LDA	#0
    97 DE9D F8				SED
    98 DE9E 79 47 00			ADC	SCORE+1,Y	;ADD NEXT BYTE WITH CARRY
    99 DEA1 99 47 00			STA	SCORE+1,Y
   100 DEA4 A9 00			LDA	#0
   101 DEA6 79 46 00			ADC	SCORE,Y		;ADD HIGHEST BYTE WITH CARRY
   102 DEA9 99 46 00			STA	SCORE,Y
   103 DEAC D8				CLD			;RETURN FROM DECIMAL MODE
   104 DEAD 20 B9 DE			JSR	PUTSCRNS
   105
   106 DEB0			DONESCOR:
   107 DEB0 A6 62			LDX	TEMP+13		;DONE RESTORE REGISTERS
   108 DEB2 A4 63			LDY	TEMP+14
   109 DEB4 60				RTS
   110
   111 				** PUTSCORE, ROUTINE TO PUT SCORE INTO PLAYERS CHARACTER MAP **
   112
   113 DEB5			PUTSCORE:
   114 DEB5 86 62			STX	TEMP+13		;SAVE REGISTERS
   115 DEB7 84 63			STY	TEMP+14
   116 DEB9			PUTSCRNS:
   117 DEB9 A5 7A			LDA	SCORER		;CALCULATE OFFSET 0 OR 4
   118 DEBB 0A				ASL
   119 DEBC 0A				ASL
   120 DEBD AA				TAX			;PUT IN X
   121 DEBE 0A				ASL			;CALCULATE OFFSET 0 OR 16
   122 DEBF 0A				ASL
   123 DEC0 85 64			STA	TEMP+15		;PUT INTO TEMP+15
   124 DEC2 8A				TXA
   125 DEC3 18				CLC			;COMPARE VALUE FOR TERMINATION
   126 DEC4 69 04			ADC	#4
   127 DEC6 85 61			STA	TEMP+12
   128 DEC8			SCORLOOP:
   129 DEC8 B5 46			LDA	SCORE,X		;GET NEXT BYTE OF SCORE
   130 DECA 4A				LSR
   131 DECB 4A				LSR
   132 DECC 4A				LSR
   133 DECD 4A				LSR			;GET HIGH NYBBLE
   134 DECE D0 1F			BNE	PUTHINUM	;IF NOT ZERO PUT NUMBER FROM HI NYBBLE
   135 DED0 20 05 DF			JSR	PUTBLANK	;IF ZERO PUT IN BLANK
   136 DED3 B5 46			LDA	SCORE,X
   137 DED5 29 0F			AND	#$F		;GET LO NYBBLE
   138 DED7 D0 20			BNE	PUTLONUM	;IF NOT ZERO PUT NUMBER FROM LO NYBBLE
   139 DED9 20 05 DF			JSR	PUTBLANK	;IF ZERO PUT IN BLANK
   140 DEDC E8				INX
   141 DEDD E4 61			CPX	TEMP+12		;4 BYTES OF SCORE
   142 DEDF 30 E7			BMI	SCORLOOP
   143 DEE1 A9 01			LDA	#CHARS+1&&255	;PUT UP A ZERO IF NO POINTS YET
   144 DEE3 C6 64			DEC	TEMP+15
   145 DEE5 20 07 DF			JSR	WRTCHAR
   146
   147 DEE8 60				RTS
   148
   149
   150 				** PUTNUMS, ROUTINE TO PUT NUMBERS FROM PLAYERS SCORE INTO CHARACTER MAP **
   151 DEE9			PUTNUMS:
   152 DEE9 B5 46			LDA	SCORE,X		;GET NEXT BYTE OF SCORE
   153 DEEB 4A				LSR
   154 DEEC 4A				LSR
   155 DEED 4A				LSR
   156 DEEE 4A				LSR			;GET HI NYBBLE
   157
   158 				** PUTHINUM, ROUTINE TO PUT HIGH BYTE NUMBERS INTO CHARACTER MAP **
   159 DEEF			PUTHINUM:
   160 DEEF 18				CLC			;POINT TO NUMBER IN CHARS
   161 DEF0 69 01			ADC	#(CHARS+1) & 255
   162 DEF2 20 07 DF			JSR	WRTCHAR		;WRITE CHAR IN CHARACTER MAP
   163 DEF5 B5 46			LDA	SCORE,X		;GET NEXT, ONCE A NUMBER IS FOUND,
   164 				;				; NEVER WORRY ABOUT FINDING A BLANK.
   165 DEF7 29 0F			AND	#$F		;GET LO NYBBLE
   166
   167 				** PUTLONUM, ROUTINE TO PUT LOW BYTE NUMBERS INTO CHARACTER MAP **
   168 DEF9			PUTLONUM:
   169 DEF9 18				CLC			;POINT TO NUMBER IN CHARS
   170 DEFA 69 01			ADC	#(CHARS+1) & 255
   171 DEFC 20 07 DF			JSR	WRTCHAR		;WRITE CHAR IN CHARACTER MAP
   172 DEFF E8				INX
   173 DF00 E4 61			CPX	TEMP+12		;4 BYTE OF SCORE DATA
   174 DF02 30 E5			BMI	PUTNUMS
   175 DF04 60				RTS
   176
   177 				** PUTBLANK, ROUTINE TO PUT A BLANK SPACE INTO NEXT POS IN CMAP1 **
   178 DF05			PUTBLANK:
   179 DF05 A9 00			LDA	#(CHARS) & 255	;FIRST CHARACTER IN CHARS IS A BLANK
   180
   181 				** WRTCHAR, ROUTINE TO WRITE A CHARACTER INTO NEXT POS IN CMAP1 **
   182 				**	   ACC MUST BE LOW BYTE OF CHARACTER. **
   183 DF07			WRTCHAR:
   184 DF07 A4 64			LDY	TEMP+15		;POSITION
   185 DF09 99 08 1B			STA	CHARMAPS,Y	;PUT CHAR IN CHARACTER MAP
   186 DF0C E6 64			INC	TEMP+15
   187 DF0E 60				RTS
   188
   189 				** PUTMEN, ROUTINE TO PUT PLAYERS MENLEFT INTO CHARACTER MAPS. **
   190
   191 DF0F			PUTMEN:
   192 DF0F A6 7A			LDX	SCORER		;WHICH SCORER
   193 DF11 8A				TXA
   194 DF12 0A				ASL			;COMPUTE INDICES AND POINTERS
   195 DF13 0A				ASL
   196 DF14 0A				ASL
   197 DF15 0A				ASL
   198 DF16 18				CLC
   199 DF17 69 08			ADC	#8
   200 DF19 A8				TAY
   201 DF1A A9 00			LDA	#CHARS & 255	;PAD WITH BLANK, ONE FOR SPACE
   202 DF1C 99 08 1B			STA	CHARMAPS,Y
   203 DF1F C8				INY
   204 DF20 84 64			STY	TEMP+15
   205 DF22 99 08 1B			STA	CHARMAPS,Y
   206 DF25 C8				INY
   207 DF26 99 08 1B			STA	CHARMAPS,Y
   208 DF29 C8				INY
   209 DF2A 99 08 1B			STA	CHARMAPS,Y
   210 DF2D C8				INY
   211 DF2E 99 08 1B			STA	CHARMAPS,Y
   212 DF31 A6 7A			LDX	SCORER
   213 DF33 B5 52			LDA	MENLEFT,X	;PUT UP ONE SHIP FOR EACH MAN LEFT
   214 DF35 F0 0F			BEQ	DONEPUTM
   215 DF37 C9 05			CMP	#5		;DISPLAY ONLY 4 SHIPS MAXIMUM
   216 DF39 90 02			BCC	PUTMENUP
   217 DF3B A9 04			LDA	#4
   218 DF3D			PUTMENUP:
   219 DF3D AA				TAX
   220 DF3E			PUTMENLP:
   221 DF3E A9 0B			LDA	#(CHARS+11) & 255	;POINT TO SMALL SHIP SYMBOL
   222 DF40 20 07 DF			JSR	WRTCHAR			;PUT IT IN CMAP1
   223 DF43 CA				DEX
   224 DF44 D0 F8			BNE	PUTMENLP		;CONTINUE UNTIL MENLEFT IS ZERO
   225 DF46			DONEPUTM:
   226 DF46 60				RTS
   227
   228 				** HIGH SCORE ROUTINES. **
   229 DF47			PUTHISCR:
   230 DF47 A2 00			LDX	#0
   231 DF49 86 64			STX	TEMP+15	;START AT BEGINNING AND REMOVE ZEROS.
   232 DF4B			HISCRLP:
   233 DF4B B5 42			LDA	HISCORE,X	;GET NEXT BYTE OF SCORE
   234 DF4D 4A				LSR
   235 DF4E 4A				LSR
   236 DF4F 4A				LSR
   237 DF50 4A				LSR			;GET HIGH NYBBLE
   238 DF51 D0 1A			BNE	PUTHNUMH	;IF NOT ZERO PUT NUMBER FROM HI NYBBLE
   239 DF53 20 83 DF			JSR	PUTBLKHS	;IF ZERO PUT IN BLANK
   240 DF56 B5 42			LDA	HISCORE,X
   241 DF58 29 0F			AND	#$F		;GET LO NYBBLE
   242 DF5A D0 1B			BNE	PUTLNUMH	;IF NOT ZERO PUT NUMBER FROM LO NYBBLE
   243 DF5C 20 83 DF			JSR	PUTBLKHS	;IF ZERO PUT IN BLANK
   244 DF5F E8				INX
   245 DF60 E0 04			CPX	#4		;4 BYTES OF SCORE
   246 DF62 30 E7			BMI	HISCRLP
   247 DF64 4C 82 DF			JMP	DONEHSCR	;DONE WITH HIGH SCORE
   248
   249
   250 DF67			PUTHSNUM:
   251 DF67 B5 42			LDA	HISCORE,X	;GET NEXT BYTE OF SCORE
   252 DF69 4A				LSR
   253 DF6A 4A				LSR
   254 DF6B 4A				LSR
   255 DF6C 4A				LSR			;GET HI NYBBLE
   256
   257 DF6D			PUTHNUMH:
   258 DF6D 18				CLC			;POINT TO NUMBER IN CHARS
   259 DF6E 69 0C			ADC	#(CHARS+12) & 255
   260 DF70 20 85 DF			JSR	WRTCHRHS	;WRITE CHAR IN CHARACTER MAP
   261 DF73 B5 42			LDA	HISCORE,X	;GET NEXT, ONCE A NUMBER IS FOUND,
   262 				;				; NEVER WORRY ABOUT FINDING A BLANK.
   263 DF75 29 0F			AND	#$F		;GET LO NYBBLE
   264
   265 DF77			PUTLNUMH:
   266 DF77 18				CLC			;POINT TO NUMBER IN CHARS
   267 DF78 69 0C			ADC	#(CHARS+12) & 255
   268 DF7A 20 85 DF			JSR	WRTCHRHS	;WRITE CHAR IN CHARACTER MAP
   269 DF7D E8				INX
   270 DF7E E0 04			CPX	#4		;4 BYTE OF SCORE DATA
   271 DF80 30 E5			BMI	PUTHSNUM
   272
   273 DF82			DONEHSCR:
   274 DF82 60				RTS
   275
   276 DF83			PUTBLKHS:
   277 DF83 A9 00			LDA	#CHARS & 255	;FIRST CHARACTER IN CHARS IS A BLANK
   278
   279 DF85			WRTCHRHS:
   280 DF85 A4 64			LDY	TEMP+15		;POSITION
   281 DF87 99 38 1B			STA	SCORCMHS,Y	;PUT CHAR IN CHARACTER MAP
   282 DF8A E6 64			INC	TEMP+15
   283 DF8C 60				RTS
   284
   285
   286 				** HIGHSCORE HANDLING ROUTINE TO CHECK FOR NEW HIGHSCORE. **
   287
   288 DF8D			HIGHSCOR:
   289 DF8D A0 00			LDY	#0		;0 = PLAYER 1 SCORE
   290 DF8F A5 82			LDA	MODE
   291 DF91 30 0D			BMI	HSONE		;ONE PLAYER ONLY
   292 DF93 A0 08			LDY	#8		;8 = COMBINED SCORE
   293 DF95 C9 01			CMP	#1		;MODE 1 WE USE COMBINED SCORE
   294 DF97 F0 07			BEQ	HSONE		; AND AS ONE PLAYER ONLY
   295 DF99 A0 00			LDY	#0		;CHECK BOTH PLAYERS
   296 DF9B 20 A7 DF			JSR	CKHISCOR
   297 DF9E A0 04			LDY	#4		;4 = PLAYER 2 SCORE
   298 DFA0			HSONE:
   299 DFA0 20 A7 DF			JSR	CKHISCOR
   300 DFA3 20 47 DF			JSR	PUTHISCR	;UPDATE HIGHSCORE ON SCREEN
   301 DFA6 60				RTS
   302
   303 				* CKHISCOR -- ROUTINE TO DO THE ACTUAL CHECK.  ON ENTRY, Y CONTAINS SCORE OFFSET
   304 DFA7			CKHISCOR:
   305 DFA7 A2 00			LDX	#0
   306 DFA9			HSLOOP:
   307 DFA9 B9 46 00			LDA	SCORE,Y
   308 DFAC D5 42			CMP	HISCORE,X
   309 DFAE 90 14			BCC	HSRTS		;LOWER: WE'RE DONE.
   310 DFB0 F0 0C			BEQ	HSLOOPCK	;EQUAL PLACE: PROCEED TO NEXT PLACE
   311 DFB2			NEWHIGH:
   312 DFB2 95 42			STA	HISCORE,X	;HIGHER: BEGIN REPLACING HIGH SCORE
   313 DFB4 C8				INY
   314 DFB5 E8				INX
   315 DFB6 B9 46 00			LDA	SCORE,Y
   316 DFB9 E0 04			CPX	#4
   317 DFBB 90 F5			BCC	NEWHIGH
   318 DFBD 60				RTS
   319
   320 DFBE			HSLOOPCK:
   321 DFBE C8				INY
   322 DFBF E8				INX
   323 DFC0 E0 04			CPX	#4
   324 DFC2 90 E5			BCC	HSLOOP
   325 DFC4			HSRTS:
   326 DFC4 60				RTS
   327
   328 				** ROUTINE TO UPDATE THE MENLEFT DISPLAY AFTER MENLEFT,X IS DECREMENTED. **
   329 DFC5			UPDATMEN:
   330 DFC5 A5 82			LDA	MODE		;ONE POOL OF LIVES FOR TEAM PLAY
   331 DFC7 C9 01			CMP	#1
   332 DFC9 D0 08			BNE	UPPLMEN
   333 DFCB A9 02			LDA	#2
   334 DFCD 85 7A			STA	SCORER
   335 DFCF 20 0F DF			JSR	PUTMEN
   336 DFD2 60				RTS
   337
   338 DFD3			UPPLMEN:
   339 DFD3 A9 00			LDA	#0
   340 DFD5 85 7A			STA	SCORER
   341 DFD7 20 0F DF			JSR	PUTMEN
   342
   343 DFDA A5 82			LDA	MODE		;DON'T DISPLAY PLAYER2 FOR SINGLE PLAY
   344 DFDC 10 01			BPL	UPDATPL2
   345 DFDE 60				RTS
   346
   347 DFDF			UPDATPL2:
   348 DFDF A9 01			LDA	#1
   349 DFE1 85 7A			STA	SCORER
   350 DFE3 20 0F DF			JSR	PUTMEN
   351 DFE6			BYEBYE:
   352 DFE6 60				RTS
   353
   354 				** MESSAGE HANDLING ROUTINE TO FACILITATE PUTING MESSAGE ON SCREEN. **
   355 				* LOAD X WITH MESSAGE NUMBER. *
   356 				*	    MESSAGE 0		  PLAYER 1
   357 				*	    MESSAGE 1		  PLAYER 2
   358 				*	    MESSAGE 2		  GAME OVER
   359 				*	    MESSAGE 3		  WINS
   360
   361 DFE7			SETMSG:
   362 DFE7 A5 7B			LDA	GAMSTATE	;NO MESSAGES UNLESS IN GAME
   363 DFE9 C9 05			CMP	#PLAYST
   364 DFEB D0 F9			BNE	BYEBYE
   365 DFED 8A				TXA			;SET UP X AND Y FOR DOICON
   366 DFEE 18				CLC
   367 DFEF 69 12			ADC	#18
   368 DFF1 A8				TAY
   369 DFF2 8A				TXA
   370 DFF3 C9 02			CMP	#2
   371 DFF5 B0 04			BCS	ZFOO
   372 DFF7 A2 22			LDX	#34
   373 DFF9 10 02			BPL	ZMOO		;= JMP
   374 DFFB			ZFOO:
   375 DFFB A2 23			LDX	#35
   376 DFFD			ZMOO:
   377 DFFD 4C 3B FA			JMP	DOICON		; SAVE A BYTE
   378
   379
   380 E000			ENDSCOR:
   381 					;.byte 0	;(?);.DS.B	0
    39 E000				icl	"MORESTMP.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\MORESTMP.asm
     1 				*         0253    060283
     2 				*
     3 				*
     4 				** MORESTMP.S **  UNCOVERTED GRAPHICS DATA  **
     5 				** ASTEROIDS FOR THE ATARI 3600 **
     6 				** CONVERTED FOR MARIA 2
     7
     8 				** OTHER STAMP DATA IS IN STAMPS.S **
     9 E000			CHARS:
    10 E000				ORG     GRAPHICS+$2000
    11 				* BIG NUMERIALS USED FOR PLAYERS SCORE.  ALSO MINIATURE EXTRA SHIP. *
    12 E000 00 A8 A8 A8 A8 08 + 	.byte    0,$A8,$A8,$A8,$A8,$08,$A8,$A8,$20,$A8,$A8,$00;B 0-9 SHIP
    13 				* SMALL NUMERIALS USED FOR HIGH SCORE. *
    14 E00C 00 00 00 00 00 00 + 	.byte    0,0,0,0,0,0,0,0,0,0			;0-9
    15 				* MESSAGES USED DURING GAMEPLAY. *
    16 E016			PLAY1MES:
    17 E016 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0		;PLAYER 1
    18 E021			PLAY2MES:
    19 E021 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0		;PLAYER 2
    20 E02C			WINSMESS:
    21 E02C 00 00 00 00 00		.byte	0,0,0,0,0				;WINS
    22 E031			OVERMESS:
    23 E031 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0		;GAMEOVER
    24 				* BIG LETTERS TO SPELL ASTEROIDS. *
    25 E03D			NAMEA:
    26 E03D 00 00 3F F0 3F F0		.byte	$00,$00,$3F,$F0,$3F,$F0		;BIG LETTER A
    27 E043			NAMES:
    28 E043 03 FF FF F0			.byte	$03,$FF,$FF,$F0			;BIG LETTER S
    29 E047			NAMET:
    30 E047 00 3F C0 00			.byte	$00,$3F,$C0,$00			;BIG LETTER T
    31 E04B			NAMEE:
    32 E04B FF FF FF 00			.byte	$FF,$FF,$FF,$00			;BIG LETTER E
    33 E04F			NAMER:
    34 E04F FF C0 FF C0			.byte	$FF,$C0,$FF,$C0			;BIG LETTER R
    35 E053			NAMEO:
    36 E053 FF FF FF C0			.byte	$FF,$FF,$FF,$C0			;BIG LETTER O
    37 E057			NAMEI:
    38 E057 FF F0			.byte	$FF,$F0				;BIG LETTER I
    39 E059			NAMED:
    40 E059 3F FF FF 00			.byte	$3F,$FF,$FF,$00			;BIG LETTER D
    41 E05D			NAMES2:
    42 E05D 03 FF FF F0 00 00		.byte	$03,$FF,$FF,$F0,$00,$00		;BIG LETTER S
    43 				* STARS BROUGHT OVER FROM STAMPS.S. *
    44 E063			STARS:
    45 E063 00 00 00 00			.byte	$00,$00,$00,00			;ASSORTED STARS
    46 				* MESSAGES USED DURING MENU. *
    47 E067			MNOVICE:
    48 E067 41 15 41 41 15 45 + 	.byte	$41,$15,$41,$41,$15,$45,$50	;NOVICE
    49 E06E			MINTER:
    50 E06E 44 10 10 15 44 11 + 	.byte	$44,$10,$10,$15,$44,$11,$01	;INTERMEDIATE
    51 E075 15 45 41 10 40 40 + 	.byte	$15,$45,$41,$10,$40,$40,$55
    52 E07C			MEXPERT:
    53 E07C 55 11 10 05 51 04 + 	.byte	$55,$11,$10,$05,$51,$04,$04,$00	;EXPERT
    54 E084			MONEPL:
    55 E084 55 10 45 50 04 01 + 	.byte	$55,$10,$45,$50,$04,$01,$54	;ONE PLAYER
    56 E08B 41 01 01 54 41		.byte	$41,$01,$01,$54,$41
    57 E090			MTWOPL:
    58 E090 04 01 10 55 00 40 + 	.byte	$04,$01,$10,$55,$00,$40,$15	;TWO PLAYER
    59 E097 44 10 10 15 44 11 + 	.byte	$44,$10,$10,$15,$44,$11,$54
    60 E09E			MTEAMPL:
    61 E09E 04 05 51 04 40 40 + 	.byte	$04,$05,$51,$04,$40,$40,$40		;TEAM PLAY
    62 E0A5 15 44 10 10			.byte   $15,$44,$10,$10
    63 E0A9			MCOMPPL:
    64 E0A9 55 15 44 04 40 15 + 	.byte	$55,$15,$44,$04,$40,$15,$40		;COMP PLAY
    65 E0B0 40 40 40 45 51 04 + 	.byte   $40,$40,$40,$45,$51,$04,$00
    66 E0B7 40 15 44 10 10		.byte   $40,$15,$44,$10,$10
    67 E0BC			MCOPYR:
    68 E0BC 00 05 50 00 00 00		.byte	$00,$05,$50,$00,$00,$00
    69 E0C2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
    70
    71 				*	.byte	$55,$15,$44,$00,$10,$10		;COPYRIGHT
    72 				*	.byte   $44,$55,$10,$40,$40,$00
    73 E0C8			MATARI:
    74 E0C8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
    75 E0CE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
    76 				*	.byte	$41,$01,$01,$04,$41,$10		;ATARI
    77 				*	.byte   $01,$51,$54,$55,$00,$40
    78 E0D4			MADVANCE:
    79 E0D4 41 15 01 41 04 41 + 	.byte	$41,$15,$01,$41,$04,$41,$15,$45,$51,$50	;ADVANCED
    80 E0DE			BEAG:
    81 E0DE 20 0A 00 02 02 00 + 	.byte	$20,$0A,$00,$02,$02,$00,$A8,$00,$2A,$82,$00,$00,$80,$08,$A0,$00
    82 E0EE 00 28 00 28 82 00		.byte	$00,$28,$00,$28,$82,$00
    83 				*
    84 				*	.byte	$80,$08,$A0,$00,$0A,$00,$A0,$82,$8A,$08	;EE
    85 				*	.byte   $02,$88,$20,$22,$80,$00,$AA,$00,$00,$0A,$AA,$80
    86 				*
    87 				*  the following was added to make the source generate what is in the rom
    88 E0F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
    89 E100				ORG     CHARS+$100
    90 E100 00 88 20 80 08 08 + 	.byte	0,$88,$20,$80,$08,$08,$08,$88,$20,$88,$08,$0C
    91 E10C 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0
    92 E116 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
    93 E121 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
    94 E12C 00 00 00 00 00		.byte	0,0,0,0,0
    95 E131 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
    96 E13D 00 00 3F F0 3F F0		.byte	$00,$00,$3F,$F0,$3F,$F0
    97 E143 03 FF FF F0			.byte	$03,$FF,$FF,$F0
    98 E147 00 3F C0 00			.byte	$00,$3F,$C0,$00
    99 E14B FF FF FF 00			.byte	$FF,$FF,$FF,$00
   100 E14F FF C3 FF C0			.byte	$FF,$C3,$FF,$C0
   101 E153 FF FF FF C0			.byte	$FF,$FF,$FF,$C0
   102 E157 FF F0			.byte	$FF,$F0
   103 E159 3F FF FF C0			.byte	$3F,$FF,$FF,$C0
   104 E15D 03 FF FF F0 00 00		.byte	$03,$FF,$FF,$F0,$00,$00
   105 E163 00 00 00 00			.byte	$00,$00,$00,$00
   106 E167 45 10 45 51 10 04 + 	.byte	$45,$10,$45,$51,$10,$04,$00		;NOVICE
   107 E16E 44 50 10 10 04 51 + 	.byte	$44,$50,$10,$10,$04,$51,$01		;INTERMEDIATE
   108 E175 10 04 11 15 40 40 + 	.byte	$10,$04,$11,$15,$40,$40,$40
   109 E17C 40 11 10 04 01 14 + 	.byte	$40,$11,$10,$04,$01,$14,$04,$00		;EXPERT
   110 E184 41 11 44 00 04 01 + 	.byte	$41,$11,$44,$00,$04,$01,$00		;ONE PLAYER
   111 E18B 55 01 01 00 45		.byte	$55,$01,$01,$00,$45
   112 E190 04 04 44 41 00 40 + 	.byte	$04,$04,$44,$41,$00,$40,$10		;TWO PLAYER
   113 E197 05 50 10 10 04 50 + 	.byte	$05,$50,$10,$10,$04,$50,$04
   114 E19E 04 04 01 54 40 40 + 	.byte	$04,$04,$01,$54,$40,$40,$40		;TEAM PLAY
   115 E1A5 10 05 50 10			.byte	$10,$05,$50,$10
   116 E1A9 40 10 44 04 40 10 + 	.byte	$40,$10,$44,$04,$40,$10,$00		;COMP PLAY
   117 E1B0 40 40 40 44 11 14 + 	.byte	$40,$40,$40,$44,$11,$14,$00
   118 E1B7 40 10 05 50 10		.byte	$40,$10,$05,$50,$10
   119 				*
   120 E1BC 00 10 04 00 54 55		.byte	$00,$10,$04,$00,$54,$55
   121 E1C2 15 45 50 01 04 04		.byte	$15,$45,$50,$01,$04,$04
   122 				*
   123 E1C8 04 11 04 40 05 51		.byte	$04,$11,$04,$40,$05,$51
   124 E1CE 54 41 10 04 00 00		.byte	$54,$41,$10,$04,$00,$00
   125
   126 				*	.byte	$40,$10,$44,$00,$10,$11			;COPYRIGHT
   127 				*	.byte	$44,$41,$10,$40,$40,$00
   128 				*
   129 				*	.byte	$55,$01,$01,$54,$45,$10			;ATARI
   130 				*	.byte	$00,$40,$04,$41,$00,$40
   131 				*
   132 E1D4 55 10 45 51 54 45 + 	.byte	$55,$10,$45,$51,$54,$45,$10,$04,$01,$04	;ADVANCED
   133 				*
   134 E1DE 88 28 82 88 88 88 + 	.byte	$88,$28,$82,$88,$88,$88,$82,$00,$80,$82,$00,$00,$20,$2A,$88,$00
   135 E1EE 00 82 00 82 02 00		.byte	$00,$82,$00,$82,$02,$00
   136 				*
   137 				*	.byte	$20,$2A,$88,$00,$20,$82,$20,$A2,$28,$82	;EE
   138 				*	.byte	$08,$22,$20,$88,$20,$02,$00,$80,$00,$00,$00,$20
   139 				*
   140 				*  the following was added to make the source generate what is in the rom
   141 E1F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   142
   143 E200				org     CHARS+$200
   144 E200 00 88 20 80 08 08 + 	.byte	0,$88,$20,$80,$08,$08,$08,$88,$20,$88,$08,$38
   145 E20C 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0
   146 E216 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   147 E221 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   148 E22C 00 00 00 00 00		.byte	0,0,0,0,0
   149 E231 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   150 E23D 00 00 35 70 35 70		.byte	$00,$00,$35,$70,$35,$70
   151 E243 03 55 55 70			.byte	$03,$55,$55,$70
   152 E247 00 35 C0 00			.byte	$00,$35,$C0,$00
   153 E24B D5 55 57 00			.byte	$D5,$55,$57,$00
   154 E24F D5 CF D5 C0			.byte	$D5,$CF,$D5,$C0
   155 E253 D5 55 55 C0			.byte	$D5,$55,$55,$C0
   156 E257 D5 70			.byte	$D5,$70
   157 E259 35 55 55 C0			.byte	$35,$55,$55,$C0
   158 E25D 03 55 55 70 00 00		.byte	$03,$55,$55,$70,$00,$00
   159 E263 01 00 00 00			.byte	$01,$00,$00,$00	;STARS+0 -> COLOR 1, COLUMN 4
   160 E267 55 10 44 11 10 05 + 	.byte	$55,$10,$44,$11,$10,$05,$40		;NOVICE
   161 E26E 45 50 10 15 05 41 + 	.byte	$45,$50,$10,$15,$05,$41,$11		;INTERMEDIATE
   162 E275 15 04 11 10 40 40 + 	.byte	$15,$04,$11,$10,$40,$40,$54
   163 E27C 54 04 15 45 41 50 + 	.byte	$54,$04,$15,$45,$41,$50,$04,$00		;EXPERT
   164 E284 41 15 45 40 05 41 + 	.byte	$41,$15,$45,$40,$05,$41,$00		;ONE PLAYER
   165 E28B 41 05 41 50 54		.byte	$41,$05,$41,$50,$54
   166 E290 04 04 44 41 00 54 + 	.byte	$04,$04,$44,$41,$00,$54,$10		;TWO PLAYER
   167 E297 04 10 54 15 05 40 + 	.byte	$04,$10,$54,$15,$05,$40,$50
   168 E29E 04 05 41 04 44 40 + 	.byte	$04,$05,$41,$04,$44,$40,$54		;TEAM PLAY
   169 E2A5 10 04 10 54			.byte	$10,$04,$10,$54
   170 E2A9 40 10 44 44 55 15 + 	.byte	$40,$10,$44,$44,$55,$15,$00		;COMP PLAY
   171 E2B0 40 40 40 44 11 54 + 	.byte	$40,$40,$40,$44,$11,$54,$00
   172 E2B7 55 10 04 10 54		.byte	$55,$10,$04,$10,$54
   173 				*
   174 E2BC 00 11 44 00 10 01		.byte	$00,$11,$44,$00,$10,$01
   175 E2C2 10 44 10 01 54 04		.byte	$10,$44,$10,$01,$54,$04
   176 E2C8 05 51 14 40 04 01		.byte	$05,$51,$14,$40,$04,$01
   177 E2CE 04 45 10 04 00 00		.byte	$04,$45,$10,$04,$00,$00
   178 				*
   179 				*
   180 				*	.byte	$40,$10,$45,$40,$54,$15			;COPYRIGHT
   181 				*	.byte	$04,$45,$15,$40,$40,$00
   182 				*	.byte	$41,$01,$01,$04,$54,$10			;ATARI
   183 				*	.byte	$00,$41,$54,$55,$15,$40
   184 				*
   185 E2D4 41 10 44 11 04 55 + 	.byte	$41,$10,$44,$11,$04,$55,$10,$05,$41,$04	;ADVANCED
   186
   187 E2DE 82 20 82 28 88 22 + 	.byte	$82,$20,$82,$28,$88,$22,$00,$02,$80,$20,$00,$00,$2A,$A2,$08,$00
   188 E2EE 00 82 00 82 02 00		.byte	$00,$82,$00,$82,$02,$00
   189 				*
   190 				*	.byte	$2A,$A2,$08,$00,$A0,$A8,$28,$2A,$08,$82	;EE
   191 				*	.byte	$08,$22,$20,$88,$20,$02,$00,$20,$A8,$AA,$8A,$20
   192 				*
   193 				*  the following was added to make the source generate what is in the rom
   194 E2F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   195
   196 E300				org     CHARS+$300
   197 E300 00 88 20 80 08 A8 + 	.byte	0,$88,$20,$80,$08,$A8,$08,$88,$20,$88,$A8,$A8
   198 E30C 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0
   199 E316 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   200 E321 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   201 E32C 00 00 00 00 00		.byte	0,0,0,0,0
   202 E331 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   203 E33D 00 00 35 70 35 70		.byte	$00,$00,$35,$70,$35,$70
   204 E343 03 55 55 70			.byte	$03,$55,$55,$70
   205 E347 00 35 C0 00			.byte	$00,$35,$C0,$00
   206 E34B D5 55 57 00			.byte	$D5,$55,$57,$00
   207 E34F D5 CF 57 00			.byte	$D5,$CF,$57,$00
   208 E353 D5 55 55 C0			.byte	$D5,$55,$55,$C0
   209 E357 D5 70			.byte	$D5,$70
   210 E359 35 55 55 70			.byte	$35,$55,$55,$70
   211 E35D 03 55 55 70 00 00		.byte	$03,$55,$55,$70,$00,$00
   212 E363 00 00 00 00			.byte	$00,$00,$00,$00
   213 E367 51 10 44 11 10 04 + 	.byte	$51,$10,$44,$11,$10,$04,$00		;NOVICE
   214 E36E 45 10 10 10 04 11 + 	.byte	$45,$10,$10,$10,$04,$11,$45		;INTERMEDIATE
   215 E375 10 04 11 10 40 40 + 	.byte	$10,$04,$11,$10,$40,$40,$40
   216 E37C 40 11 10 44 01 04 + 	.byte	$40,$11,$10,$44,$01,$04,$04,$00	;EXPERT
   217 E384 41 14 44 00 04 11 + 	.byte	$41,$14,$44,$00,$04,$11,$00		;ONE PLAYER
   218 E38B 41 14 51 00 41		.byte	$41,$14,$51,$00,$41
   219 E390 04 04 44 41 00 41 + 	.byte	$04,$04,$44,$41,$00,$41,$10		;TWO PLAYER
   220 E397 04 11 45 10 04 11 + 	.byte	$04,$11,$45,$10,$04,$11,$00
   221 E39E 04 04 01 04 51 40 + 	.byte	$04,$04,$01,$04,$51,$40,$41		;TEAM PLAY
   222 E3A5 10 04 11 45			.byte	$10,$04,$11,$45
   223 E3A9 40 10 45 14 41 10 + 	.byte	$40,$10,$45,$14,$41,$10,$00		;COMP PLAY
   224 E3B0 40 40 40 44 11 44 + 	.byte	$40,$40,$40,$44,$11,$44,$00
   225 E3B7 41 10 04 11 45		.byte	$41,$10,$04,$11,$45
   226 				*
   227 E3BC 00 11 04 00 10 55		.byte	$00,$11,$04,$00,$10,$55
   228 E3C2 15 45 50 01 04 04		.byte	$15,$45,$50,$01,$04,$04
   229 E3C8 04 11 50 40 04 01		.byte	$04,$11,$50,$40,$04,$01
   230 E3CE 04 54 15 00 00 00		.byte	$04,$54,$15,$00,$00,$00
   231 				*
   232 				*
   233 				*	.byte	$40,$10,$44,$11,$45,$10		;COPYRIGHT
   234 				*	.byte	$44,$40,$10,$40,$40,$00
   235 				*	.byte	$41,$01,$01,$04,$41,$10		;ATARI
   236 				*	.byte	$01,$41,$04,$41,$10,$40
   237 				*
   238 E3D4 41 10 44 11 04 51 + 	.byte	$41,$10,$44,$11,$04,$51,$10,$04,$01,$04	;ADVANCED
   239 				*
   240 E3DE 82 80 8A 08 88 22 + 	.byte	$82,$80,$8A,$08,$88,$22,$A8,$02,$00,$20,$08,$08,$0A,$80,$08,$02
   241 E3EE 00 82 00 82 00 00		.byte	$00,$82,$00,$82,$00,$00
   242 				*
   243 				*	.byte	$0A,$80,$08,$00,$80,$28,$08,$22,$08,$82	;EE
   244 				*	.byte	$02,$A2,$20,$88,$20,$0A,$00,$20,$82,$00,$A0,$A0
   245 				*
   246 				*  the following was added to make the source generate what is in the rom
   247 E3F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   248
   249 E400				org     CHARS+$400
   250 E400 00 88 20 A8 28 88 + 	.byte	0,$88,$20,$A8,$28,$88,$A8,$A8,$08,$A8,$88,$E8
   251 E40C 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0
   252 E416 40 05 51 01 01 01 + 	.byte	$40,$05,$51,$01,$01,$01,$54,$40,$40,$01,$50
   253 E421 40 05 51 01 01 01 + 	.byte	$40,$05,$51,$01,$01,$01,$54,$40,$40,$01,$54
   254 E42C 55 44 41 15 40		.byte	$55,$44,$41,$15,$40
   255 E431 55 44 04 40 45 50 + 	.byte	$55,$44,$04,$40,$45,$50,$05,$50,$10,$15,$44,$04
   256 E43D AA AA B5 70 35 70		.byte	$AA,$AA,$B5,$70,$35,$70
   257 E443 A8 00 35 70			.byte	$A8,$00,$35,$70
   258 E447 2A B5 C2 AA			.byte	$2A,$B5,$C2,$AA
   259 E44B D5 55 57 08			.byte	$D5,$55,$57,$08
   260 E44F D5 CF 54 02			.byte	$D5,$CF,$54,$02
   261 E453 D5 C2 D5 C2			.byte	$D5,$C2,$D5,$C2
   262 E457 D5 42			.byte	$D5,$42
   263 E459 B5 55 55 70			.byte	$B5,$55,$55,$70
   264 E45D AA 00 35 72 AA A8		.byte	$AA,$00,$35,$72,$AA,$A8
   265 E463 00 00 00 00			.byte	$00,$00,$00,$00
   266 E467 41 15 44 11 15 45 + 	.byte	$41,$15,$44,$11,$15,$45,$50		;NOVICE
   267 E46E 44 11 55 15 45 51 + 	.byte	$44,$11,$55,$15,$45,$51,$01		;INTERMEDIATE
   268 E475 15 45 41 05 05 54 + 	.byte	$15,$45,$41,$05,$05,$54,$55
   269 E47C 55 11 15 45 51 54 + 	.byte	$55,$11,$15,$45,$51,$54,$55,$40	;EXPERT
   270 E484 55 10 45 50 05 51 + 	.byte	$55,$10,$45,$50,$05,$51,$00		;ONE PLAYER
   271 E48B 14 10 11 54 55		.byte	$14,$10,$11,$54,$55
   272 E490 55 44 04 55 00 55 + 	.byte	$55,$44,$04,$55,$00,$55,$10		;TWO PLAYER
   273 E497 01 41 01 15 45 51 + 	.byte	$01,$41,$01,$15,$45,$51,$54
   274 E49E 55 45 50 50 40 40 + 	.byte	$55,$45,$50,$50,$40,$40,$55		;TEAM PLAY
   275 E4A5 10 01 41 01			.byte	$10,$01,$41,$01
   276 E4A9 55 15 44 04 55 15 + 	.byte	$55,$15,$44,$04,$55,$15,$45		;COMP PLAY
   277 E4B0 54 45 54 45 51 04 + 	.byte	$54,$45,$54,$45,$51,$04,$00
   278 E4B7 55 10 01 41 01		.byte	$55,$10,$01,$41,$01
   279 				*
   280 E4BC 00 11 44 00 50 41		.byte	$00,$11,$44,$00,$50,$41
   281 E4C2 10 44 10 01 04 04		.byte	$10,$44,$10,$01,$04,$04
   282 E4C8 04 11 04 40 04 01		.byte	$04,$11,$04,$40,$04,$01
   283 E4CE 04 41 10 40 00 00		.byte	$04,$41,$10,$40,$00,$00
   284 				*
   285 				*	.byte	$55,$15,$45,$51,$01,$15		;COPYRIGHT
   286 				*	.byte	$44,$55,$10,$45,$54,$00
   287 				*	.byte	$14,$15,$50,$50,$55,$10		;ATARI
   288 				*	.byte	$00,$41,$54,$55,$10,$40
   289 				*
   290 E4D4 14 15 04 10 50 41 + 	.byte	$14,$15,$04,$10,$50,$41,$15,$45,$51,$50	;ADVANCED
   291 				*
   292 E4DE 22 80 22 08 88 22 + 	.byte	$22,$80,$22,$08,$88,$22,$02,$08,$00,$20,$02,$28,$80,$00,$0A,$8A
   293 E4EE 00 82 00 82 00 00		.byte	$00,$82,$00,$82,$00,$00
   294 				*
   295 				*	.byte	$00,$00,$08,$00,$80,$08,$08,$20,$88,$82	;EE
   296 				*	.byte	$00,$22,$20,$88,$20,$08,$00,$20,$82,$A8,$20,$20
   297 				*
   298 				*  the following was added to make the source generate what is in the rom
   299 E4F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   300
   301 E500				org     CHARS+$500
   302 E500 00 88 20 08 08 88 + 	.byte	0,$88,$20,$08,$08,$88,$80,$80,$08,$88,$88,$28
   303 E50C 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0
   304 E516 40 04 01 01 01 01 + 	.byte	$40,$04,$01,$01,$01,$01,$00,$40,$40,$00,$40
   305 E521 40 04 01 01 01 01 + 	.byte	$40,$04,$01,$01,$01,$01,$00,$40,$40,$01,$00
   306 E52C 44 44 41 00 40		.byte	$44,$44,$41,$00,$40
   307 E531 40 44 04 40 44 00 + 	.byte	$40,$44,$04,$40,$44,$00,$04,$10,$44,$10,$04,$04
   308 E53D 00 00 35 F0 3D 70		.byte	$00,$00,$35,$F0,$3D,$70
   309 E543 00 00 3D 70			.byte	$00,$00,$3D,$70
   310 E547 00 35 C0 00			.byte	$00,$35,$C0,$00
   311 E54B D5 C0 00 00			.byte	$D5,$C0,$00,$00
   312 E54F D7 CF 5C 00			.byte	$D7,$CF,$5C,$00
   313 E553 D5 C0 D5 C0			.byte	$D5,$C0,$D5,$C0
   314 E557 35 C0			.byte	$35,$C0
   315 E559 35 70 15 70			.byte	$35,$70,$15,$70
   316 E55D 00 00 3D 70 00 00		.byte	$00,$00,$3D,$70,$00,$00
   317 E563 00 00 00 00			.byte	$00,$00,$00,$00
   318 E567 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   319 E56E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   320 E575 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   321 E57C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   322 E584 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   323 E58B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   324 E590 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   325 E597 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   326 E59E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   327 E5A5 00 00 00 00			.byte	$00,$00,$00,$00
   328 E5A9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   329 E5B0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   330 E5B7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   331 				*
   332 E5BC 00 10 04 00 10 55		.byte	$00,$10,$04,$00,$10,$55
   333 E5C2 15 45 50 00 50 55		.byte	$15,$45,$50,$00,$50,$55
   334 E5C8 41 41 54 40 05 51		.byte	$41,$41,$54,$40,$05,$51
   335 E5CE 54 55 15 40 00 00		.byte	$54,$55,$15,$40,$00,$00
   336 				*
   337 				*
   338 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   339 				*	.byte	$00,$00,$00,$00,$00,$00
   340 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   341 				*	.byte	$00,$00,$00,$00,$00,$00
   342 				*
   343 E5D4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   344
   345 				*
   346 E5DE 08 80 20 88 88 22 + 	.byte	$08,$80,$20,$88,$88,$22,$02,$08,$00,$20,$02,$82,$28,$A8,$08,$A0
   347 E5EE 80 22 00 82 02 00		.byte	$80,$22,$00,$82,$02,$00
   348 				*
   349 				*
   350 				*	.byte	$2A,$00,$08,$00,$80,$08,$08,$20,$88,$A2	;EE
   351 				*	.byte	$08,$22,$20,$88,$20,$08,$00,$20,$82,$02,$20,$20
   352 				*
   353 				*  the following was added to make the source generate what is in the rom
   354 E5F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   355
   356 E600				org     CHARS+$600
   357 E600 00 A8 A0 A8 A8 80 + 	.byte	0,$A8,$A0,$A8,$A8,$80,$A8,$A8,$A8,$A8,$A8,$08
   358 E60C 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0
   359 E616 40 04 01 01 01 01 + 	.byte	$40,$04,$01,$01,$01,$01,$00,$40,$40,$00,$40
   360 E621 40 04 01 01 01 01 + 	.byte	$40,$04,$01,$01,$01,$01,$00,$40,$40,$01,$00
   361 E62C 44 44 45 00 40		.byte	$44,$44,$45,$00,$40
   362 E631 40 44 04 40 44 00 + 	.byte	$40,$44,$04,$40,$44,$00,$04,$11,$01,$10,$04,$04
   363 E63D 0A AA B7 FF FF 70		.byte	$0A,$AA,$B7,$FF,$FF,$70
   364 E643 BF FF FF 70			.byte	$BF,$FF,$FF,$70
   365 E647 2A B5 C2 AA			.byte	$2A,$B5,$C2,$AA
   366 E64B D7 C0 00 08			.byte	$D7,$C0,$00,$08
   367 E64F DF FF DF 02			.byte	$DF,$FF,$DF,$02
   368 E653 D5 C2 D5 C2			.byte	$D5,$C2,$D5,$C2
   369 E657 B5 C2			.byte	$B5,$C2
   370 E659 B5 70 BD 70			.byte	$B5,$70,$BD,$70
   371 E65D BF FF FF 72 AA 80		.byte	$BF,$FF,$FF,$72,$AA,$80
   372 E663 00 20 00 00			.byte	$00,$20,$00,$00	;STARS+1 -> COLOR 2, COLUMN 2
   373 E667 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   374 E66E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   375 E675 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   376 E67C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   377 E684 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   378 E68B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   379 E690 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   380 E697 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   381 E69E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   382 E6A5 00 00 00 00			.byte	$00,$00,$00,$00
   383 E6A9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   384 E6B0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   385 E6B7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   386 				*
   387 E6BC 00 05 50 00 00 00		.byte	$00,$05,$50,$00,$00,$00
   388 E6C2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   389 E6C8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   390 E6CE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   391 				*
   392 				*
   393 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   394 				*	.byte	$00,$00,$00,$00,$00,$00
   395 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   396 				*	.byte	$00,$00,$00,$00,$00,$00
   397 				*
   398 E6D4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   399 				*
   400 E6DE 00 80 20 88 88 22 + 	.byte	$00,$80,$20,$88,$88,$22,$02,$00,$00,$80,$02,$02,$22,$88,$A8,$80
   401 E6EE 80 2A 00 82 02 00		.byte	$80,$2A,$00,$82,$02,$00
   402 				*
   403 				*
   404 				*	.byte	$80,$80,$A8,$00,$80,$08,$0A,$80,$28,$88	;EE
   405 				*	.byte	$02,$80,$8A,$02,$A0,$08,$00,$A0,$22,$02,$20,$20
   406 				*
   407 				*  the following was added to make the source generate what is in the rom
   408 E6F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   409
   410 E700				org     CHARS+$700
   411 E700 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,$08
   412 E70C 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0
   413 E716 40 04 01 01 01 01 + 	.byte	$40,$04,$01,$01,$01,$01,$00,$40,$40,$00,$40
   414 E721 40 04 01 01 01 01 + 	.byte	$40,$04,$01,$01,$01,$01,$00,$40,$40,$01,$00
   415 E72C 44 44 45 00 40		.byte	$44,$44,$45,$00,$40
   416 E731 41 44 04 40 44 00 + 	.byte	$41,$44,$04,$40,$44,$00,$04,$11,$01,$10,$04,$04
   417 E73D 00 00 35 55 55 70		.byte	$00,$00,$35,$55,$55,$70
   418 E743 35 55 55 70			.byte	$35,$55,$55,$70
   419 E747 00 35 C0 00			.byte	$00,$35,$C0,$00
   420 E74B DF FF FF 00			.byte	$DF,$FF,$FF,$00
   421 E74F D5 55 55 C0			.byte	$D5,$55,$55,$C0
   422 E753 D5 C0 D5 C0			.byte	$D5,$C0,$D5,$C0
   423 E757 35 C0			.byte	$35,$C0
   424 E759 35 70 35 70			.byte	$35,$70,$35,$70
   425 E75D 35 55 55 70 00 00		.byte	$35,$55,$55,$70,$00,$00
   426 E763 00 00 00 00			.byte	$00,$00,$00,$00
   427 E767 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   428 E76E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   429 E775 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   430 E77C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   431 E784 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   432 E78B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   433 E790 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   434 E797 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   435 E79E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   436 E7A5 00 00 00 00			.byte	$00,$00,$00,$00
   437 E7A9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   438 E7B0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   439 E7B7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   440 				*
   441 E7BC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   442 E7C2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   443 E7C8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   444 E7CE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   445 				*
   446 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   447 				*	.byte	$00,$00,$00,$00,$00,$00
   448 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   449 				*	.byte	$00,$00,$00,$00,$00,$00
   450 				*
   451 E7D4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   452 				*
   453 E7DE 00 80 20 28 20 20 + 	.byte	$00,$80,$20,$28,$20,$20,$A8,$00,$2A,$80,$00,$82,$20,$8A,$08,$20
   454 E7EE 80 0A A8 82 02 00		.byte	$80,$0A,$A8,$82,$02,$00
   455 				*
   456 				*	.byte	$80,$82,$08,$00,$20,$0A,$0A,$00,$00,$00	;EE
   457 				*	.byte	$00,$00,$00,$00,$20,$08,$0A,$08,$22,$02,$20,$20
   458 				*
   459 				*  the following was added to make the source generate what is in the rom
   460 E7F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   461
   462 E800				org     CHARS+$800
   463 E800 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   464 E80C 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0
   465 E816 55 44 01 55 15 51 + 	.byte	$55,$44,$01,$55,$15,$51,$54,$55,$40,$00,$40
   466 E821 55 44 01 55 15 51 + 	.byte	$55,$44,$01,$55,$15,$51,$54,$55,$40,$01,$54
   467 E82C 40 44 51 15 40		.byte	$40,$44,$51,$15,$40
   468 E831 40 05 54 40 45 50 + 	.byte	$40,$05,$54,$40,$45,$50,$04,$11,$01,$15,$45,$54
   469 E83D 00 AA B5 55 55 70		.byte	$00,$AA,$B5,$55,$55,$70
   470 E843 B5 55 55 70			.byte	$B5,$55,$55,$70
   471 E847 2A B5 C0 02			.byte	$2A,$B5,$C0,$02
   472 E84B D5 55 57 08			.byte	$D5,$55,$57,$08
   473 E84F D5 55 55 C2			.byte	$D5,$55,$55,$C2
   474 E853 D5 C2 D5 C2			.byte	$D5,$C2,$D5,$C2
   475 E857 B5 C0			.byte	$B5,$C0
   476 E859 B5 70 B5 70			.byte	$B5,$70,$B5,$70
   477 E85D B5 55 55 72 A8 00		.byte	$B5,$55,$55,$72,$A8,$00
   478 E863 00 00 00 00			.byte	$00,$00,$00,$00
   479 E867 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   480 E86E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   481 E875 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   482 E87C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   483 E884 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   484 E88B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   485 E890 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   486 E897 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   487 E89E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   488 E8A5 00 00 00 00			.byte	$00,$00,$00,$00
   489 E8A9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   490 E8B0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   491 E8B7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   492 				*
   493 E8BC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   494 E8C2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   495 E8C8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   496 E8CE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   497 				*
   498 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   499 				*	.byte	$00,$00,$00,$00,$00,$00
   500 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   501 				*	.byte	$00,$00,$00,$00,$00,$00
   502 				*
   503 E8D4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   504 				*
   505 E8DE 00 80 20 00 00 00 + 	.byte	$00,$80,$20,$00,$00,$00,$00,$00,$AA,$00,$00,$82,$20,$82,$08,$20
   506 E8EE 80 02 02 82 02 00		.byte	$80,$02,$02,$82,$02,$00
   507 				*
   508 				*	.byte	$80,$82,$08,$00,$0A,$02,$08,$00,$00,$00	;EE
   509 				*	.byte	$00,$00,$00,$00,$20,$08,$00,$02,$A0,$A8,$0A,$80
   510 				*
   511 				*  the following was added to make the source generate what is in the rom
   512 E8F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   513
   514 E900				org     CHARS+$900
   515 E900 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   516 E90C 54 54 54 54 04 54 + 	.byte	$54,$54,$54,$54,$04,$54,$54,$10,$54,$54
   517 E916 40 44 01 01 10 11 + 	.byte	$40,$44,$01,$01,$10,$11,$00,$41,$00,$00,$40
   518 E921 40 44 01 01 10 11 + 	.byte	$40,$44,$01,$01,$10,$11,$00,$41,$00,$00,$04
   519 E92C 40 44 51 10 00		.byte	$40,$44,$51,$10,$00
   520 E931 40 44 04 44 44 00 + 	.byte	$40,$44,$04,$44,$44,$00,$04,$11,$01,$10,$04,$10
   521 E93D 00 00 35 55 55 70		.byte	$00,$00,$35,$55,$55,$70
   522 E943 35 55 55 70			.byte	$35,$55,$55,$70
   523 E947 00 35 C0 00			.byte	$00,$35,$C0,$00
   524 E94B D5 55 57 00			.byte	$D5,$55,$57,$00
   525 E94F D5 55 55 C0			.byte	$D5,$55,$55,$C0
   526 E953 D5 C0 D5 C0			.byte	$D5,$C0,$D5,$C0
   527 E957 35 C0			.byte	$35,$C0
   528 E959 35 70 35 70			.byte	$35,$70,$35,$70
   529 E95D 35 55 55 70 00 00		.byte	$35,$55,$55,$70,$00,$00
   530 E963 00 00 00 00			.byte	$00,$00,$00,$00
   531 E967 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   532 E96E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   533 E975 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   534 E97C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   535 E984 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   536 E98B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   537 E990 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   538 E997 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   539 E99E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   540 E9A5 00 00 00 00			.byte	$00,$00,$00,$00
   541 E9A9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   542 E9B0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   543 E9B7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   544 				*
   545 E9BC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   546 E9C2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   547 E9C8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   548 E9CE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   549 				*
   550 				*
   551 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   552 				*	.byte	$00,$00,$00,$00,$00,$00
   553 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   554 				*	.byte	$00,$00,$00,$00,$00,$00
   555 				*
   556 E9D4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   557 				*
   558 E9DE 00 80 80 00 00 00 + 	.byte	$00,$80,$80,$00,$00,$00,$00,$00,$80,$00,$00,$88,$08,$82,$08,$22
   559 E9EE 00 02 00 82 02 00		.byte	$00,$02,$00,$82,$02,$00
   560 				*
   561 				*	.byte	$82,$82,$08,$00,$2A,$2A,$88,$00,$00,$00	;EE
   562 				*	.byte	$00,$00,$00,$00,$20,$08,$00,$00,$00,$00,$00,$00
   563 				*
   564 				*  the following was added to make the source generate what is in the rom
   565 E9F4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   566
   567 EA00				org     CHARS+$A00
   568 EA00 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   569 EA0C 44 10 40 04 04 04 + 	.byte	$44,$10,$40,$04,$04,$04,$44,$10,$44,$04
   570 EA16 40 44 01 01 10 11 + 	.byte	$40,$44,$01,$01,$10,$11,$00,$41,$00,$00,$40
   571 EA21 40 44 01 01 10 11 + 	.byte	$40,$44,$01,$01,$10,$11,$00,$41,$00,$00,$04
   572 EA2C 40 44 41 10 00		.byte	$40,$44,$41,$10,$00
   573 EA31 40 44 04 44 44 00 + 	.byte	$40,$44,$04,$44,$44,$00,$04,$11,$01,$10,$04,$10
   574 EA3D 00 0A B5 70 35 70		.byte	$00,$0A,$B5,$70,$35,$70
   575 EA43 B5 70 00 02			.byte	$B5,$70,$00,$02
   576 EA47 AA B5 C0 02			.byte	$AA,$B5,$C0,$02
   577 EA4B D5 C0 00 08			.byte	$D5,$C0,$00,$08
   578 EA4F D5 C0 D5 C2			.byte	$D5,$C0,$D5,$C2
   579 EA53 D5 C0 D5 C2			.byte	$D5,$C0,$D5,$C2
   580 EA57 B5 C0			.byte	$B5,$C0
   581 EA59 B5 70 3D 70			.byte	$B5,$70,$3D,$70
   582 EA5D B5 70 00 0A 80 00		.byte	$B5,$70,$00,$0A,$80,$00
   583 EA63 00 00 C0 00			.byte	$00,$00,$C0,$00	;STARS+2 -> COLOR 3, COLUMN 3
   584 EA67 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   585 EA6E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   586 EA75 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   587 EA7C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   588 EA84 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   589 EA8B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   590 EA90 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   591 EA97 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   592 EA9E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   593 EAA5 00 00 00 00			.byte	$00,$00,$00,$00
   594 EAA9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   595 EAB0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   596 EAB7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   597 				*
   598 EABC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   599 EAC2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   600 EAC8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   601 EACE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   602 				*
   603 				*
   604 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   605 				*	.byte	$00,$00,$00,$00,$00,$00
   606 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   607 				*	.byte	$00,$00,$00,$00,$00,$00
   608 				*
   609 EAD4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   610 				*
   611 EADE 00 80 80 00 00 00 + 	.byte	$00,$80,$80,$00,$00,$00,$00,$02,$00,$00,$00,$A0,$08,$82,$08,$28
   612 EAEE 00 02 00 80 02 00		.byte	$00,$02,$00,$80,$02,$00
   613 				*
   614 				*	.byte	$82,$AA,$08,$00,$20,$02,$0A,$00,$00,$00	;EE
   615 				*	.byte	$00,$00,$00,$00,$20,$0A,$00,$00,$00,$00,$00,$00
   616 				*
   617 				*  the following was added to make the source generate what is in the rom
   618 EAF4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   619
   620 EB00				org     CHARS+$B00
   621 EB00 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   622 EB0C 44 10 40 04 54 04 + 	.byte	$44,$10,$40,$04,$54,$04,$44,$10,$44,$54
   623 EB16 55 44 01 55 10 11 + 	.byte	$55,$44,$01,$55,$10,$11,$54,$55,$00,$01,$40
   624 EB21 55 44 01 55 10 11 + 	.byte	$55,$44,$01,$55,$10,$11,$54,$55,$00,$01,$54
   625 EB2C 40 44 41 15 40		.byte	$40,$44,$41,$15,$40
   626 EB31 55 45 54 55 45 50 + 	.byte	$55,$45,$54,$55,$45,$50,$05,$51,$01,$15,$45,$50
   627 EB3D 00 00 35 F0 3D 70		.byte	$00,$00,$35,$F0,$3D,$70
   628 EB43 35 F0 00 00			.byte	$35,$F0,$00,$00
   629 EB47 00 35 C0 00			.byte	$00,$35,$C0,$00
   630 EB4B D7 C0 00 00			.byte	$D7,$C0,$00,$00
   631 EB4F D7 C0 F5 C0			.byte	$D7,$C0,$F5,$C0
   632 EB53 D7 C0 F5 C0			.byte	$D7,$C0,$F5,$C0
   633 EB57 35 C0			.byte	$35,$C0
   634 EB59 35 F0 3F 70			.byte	$35,$F0,$3F,$70
   635 EB5D 35 F0 00 00 00 00		.byte	$35,$F0,$00,$00,$00,$00
   636 EB63 00 00 00 00			.byte	$00,$00,$00,$00
   637 EB67 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   638 EB6E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   639 EB75 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   640 EB7C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   641 EB84 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   642 EB8B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   643 EB90 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   644 EB97 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   645 EB9E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   646 EBA5 00 00 00 00			.byte	$00,$00,$00,$00
   647 EBA9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   648 EBB0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   649 EBB7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   650 				*
   651 EBBC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   652 EBC2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   653 EBC8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   654 EBCE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   655 				*
   656 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   657 				*	.byte	$00,$00,$00,$00,$00,$00
   658 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   659 				*	.byte	$00,$00,$00,$00,$00,$00
   660 				*
   661 EBD4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   662 				*
   663 EBDE 08 82 00 00 00 00 + 	.byte	$08,$82,$00,$00,$00,$00,$00,$02,$00,$20,$00,$20,$02,$82,$00,$08
   664 EBEE 00 82 00 80 02 00		.byte	$00,$82,$00,$80,$02,$00
   665 				*
   666 				*	.byte	$80,$02,$00,$00,$20,$02,$08,$80,$00,$00	;EE
   667 				*	.byte	$00,$00,$80,$00,$20,$02,$00,$00,$00,$00,$00,$00
   668 				*
   669 				*  the following was added to make the source generate what is in the rom
   670 EBF4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   671
   672 EC00				org     CHARS+$C00
   673 EC00 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   674 EC0C 44 10 54 14 44 54 + 	.byte	$44,$10,$54,$14,$44,$54,$54,$04,$54,$44
   675 EC16 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   676 EC21 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   677 EC2C 00 00 00 00 00		.byte	0,0,0,0,0
   678 EC31 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   679 EC3D 00 00 B7 FF FF 7A		.byte	$00,$00,$B7,$FF,$FF,$7A
   680 EC43 B7 FF FF A8			.byte	$B7,$FF,$FF,$A8
   681 EC47 FF FD FF FA			.byte	$FF,$FD,$FF,$FA
   682 EC4B DF FF FF A8			.byte	$DF,$FF,$FF,$A8
   683 EC4F DF FF FD EA			.byte	$DF,$FF,$FD,$EA
   684 EC53 DF FF FD EA			.byte	$DF,$FF,$FD,$EA
   685 EC57 FD FA			.byte	$FD,$FA
   686 EC59 B7 FF F5 7A			.byte	$B7,$FF,$F5,$7A
   687 EC5D B7 FF FF A8 00 00		.byte	$B7,$FF,$FF,$A8,$00,$00
   688 EC63 00 00 00 00			.byte	$00,$00,$00,$00
   689 EC67 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   690 EC6E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   691 EC75 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   692 EC7C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   693 EC84 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   694 EC8B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   695 EC90 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   696 EC97 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   697 EC9E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   698 ECA5 00 00 00 00			.byte	$00,$00,$00,$00
   699 ECA9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   700 ECB0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   701 ECB7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   702 				*
   703 ECBC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   704 ECC2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   705 ECC8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   706 ECCE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   707
   708 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   709 				*	.byte	$00,$00,$00,$00,$00,$00
   710 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   711 				*	.byte	$00,$00,$00,$00,$00,$00
   712 				*
   713 ECD4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   714 				*
   715 ECDE 02 88 00 00 00 00 + 	.byte	$02,$88,$00,$00,$00,$00,$00,$02,$00,$20,$00,$00,$00,$00,$00,$00
   716 ECEE 20 22 00 82 02 08		.byte	$20,$22,$00,$82,$02,$08
   717 				*
   718 				*	.byte	$80,$00,$00,$00,$20,$00,$08,$80,$00,$00	;EE
   719 				*	.byte	$00,$00,$20,$28,$A0,$02,$80,$00,$00,$00,$00,$00
   720 				*
   721 				*  the following was added to make the source generate what is in the rom
   722 ECF4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   723
   724 ED00				org     CHARS+$D00
   725 ED00 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   726 ED0C 44 10 04 04 44 40 + 	.byte	$44,$10,$04,$04,$44,$40,$40,$04,$44,$44
   727 ED16 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   728 ED21 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   729 ED2C 00 00 00 00 00		.byte	0,0,0,0,0
   730 ED31 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   731 ED3D 00 00 35 55 55 70		.byte	$00,$00,$35,$55,$55,$70
   732 ED43 35 55 57 00			.byte	$35,$55,$57,$00
   733 ED47 D5 55 55 70			.byte	$D5,$55,$55,$70
   734 ED4B D5 55 57 00			.byte	$D5,$55,$57,$00
   735 ED4F D5 55 55 C0			.byte	$D5,$55,$55,$C0
   736 ED53 D5 55 55 C0			.byte	$D5,$55,$55,$C0
   737 ED57 D5 70			.byte	$D5,$70
   738 ED59 35 55 55 70			.byte	$35,$55,$55,$70
   739 ED5D 35 55 57 00 00 00		.byte	$35,$55,$57,$00,$00,$00
   740 ED63 00 00 00 00			.byte	$00,$00,$00,$00
   741 ED67 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   742 ED6E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   743 ED75 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   744 ED7C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   745 ED84 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   746 ED8B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   747 ED90 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   748 ED97 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   749 ED9E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   750 EDA5 00 00 00 00			.byte	$00,$00,$00,$00
   751 EDA9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   752 EDB0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   753 EDB7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   754 				*
   755 EDBC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   756 EDC2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   757 EDC8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   758 EDCE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   759 				*
   760 				*
   761 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   762 				*	.byte	$00,$00,$00,$00,$00,$00
   763 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   764 				*	.byte	$00,$00,$00,$00,$00,$00
   765 				*
   766 EDD4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   767 				*
   768 EDDE 00 A0 00 00 00 00 + 	.byte	$00,$A0,$00,$00,$00,$00,$00,$00,$80,$80,$00,$00,$00,$00,$00,$00
   769 EDEE 20 0A 00 82 02 02		.byte	$20,$0A,$00,$82,$02,$02
   770 				*
   771 				*	.byte	$20,$00,$00,$00,$08,$20,$08,$80,$00,$00	;EE
   772 				*	.byte	$00,$00,$2A,$A2,$80,$00,$80,$00,$00,$00,$00,$00
   773 				*
   774 				*  the following was added to make the source generate what is in the rom
   775 EDF4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   776
   777 EE00				org     CHARS+$E00
   778 EE00 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   779 EE0C 54 50 54 54 40 54 + 	.byte	$54,$50,$54,$54,$40,$54,$54,$54,$54,$54
   780 EE16 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   781 EE21 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   782 EE2C 00 00 00 00 00		.byte	0,0,0,0,0
   783 EE31 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   784 EE3D 00 00 35 55 55 70		.byte	$00,$00,$35,$55,$55,$70
   785 EE43 35 55 57 00			.byte	$35,$55,$57,$00
   786 EE47 D5 55 55 70			.byte	$D5,$55,$55,$70
   787 EE4B D5 55 57 00			.byte	$D5,$55,$57,$00
   788 EE4F D5 55 55 C0			.byte	$D5,$55,$55,$C0
   789 EE53 D5 55 55 C0			.byte	$D5,$55,$55,$C0
   790 EE57 D5 70			.byte	$D5,$70
   791 EE59 35 55 55 C0			.byte	$35,$55,$55,$C0
   792 EE5D 35 55 57 00 00 00		.byte	$35,$55,$57,$00,$00,$00
   793 EE63 00 00 00 00			.byte	$00,$00,$00,$00
   794 EE67 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   795 EE6E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   796 EE75 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   797 EE7C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   798 EE84 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   799 EE8B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   800 EE90 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   801 EE97 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   802 EE9E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   803 EEA5 00 00 00 00			.byte	$00,$00,$00,$00
   804 EEA9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   805 EEB0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   806 EEB7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   807 				*
   808 EEBC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   809 EEC2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   810 EEC8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   811 EECE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   812 				*
   813 				*
   814 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   815 				*	.byte	$00,$00,$00,$00,$00,$00
   816 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   817 				*	.byte	$00,$00,$00,$00,$00,$00
   818 				*
   819 EED4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   820 				*
   821 EEDE 00 20 00 00 00 00 + 	.byte	$00,$20,$00,$00,$00,$00,$00,$00,$82,$80,$00,$00,$00,$00,$00,$00
   822 EEEE 20 0A 00 80 02 02		.byte	$20,$0A,$00,$80,$02,$02
   823 				*
   824 				*	.byte	$A0,$00,$00,$00,$02,$A0,$08,$80,$00,$00	;EE
   825 				*	.byte	$00,$00,$0A,$80,$80,$00,$A0,$00,$00,$00,$00,$00
   826 				*
   827 				*  the following was added to make the source generate what is in the rom
   828 EEF4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
   829
   830 EF00				org     CHARS+$F00
   831 EF00 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   832 EF16 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   833 EF21 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0
   834 EF2C 00 00 00 00 00		.byte	0,0,0,0,0
   835 EF31 00 00 00 00 00 00 + 	.byte	0,0,0,0,0,0,0,0,0,0,0,0
   836 EF3D 00 00 35 55 55 70		.byte	$00,$00,$35,$55,$55,$70
   837 EF43 35 55 57 00			.byte	$35,$55,$57,$00
   838 EF47 D5 55 55 70			.byte	$D5,$55,$55,$70
   839 EF4B D5 55 57 00			.byte	$D5,$55,$57,$00
   840 EF4F D5 55 55 C0			.byte	$D5,$55,$55,$C0
   841 EF53 D5 55 55 C0			.byte	$D5,$55,$55,$C0
   842 EF57 D5 70			.byte	$D5,$70
   843 EF59 35 55 57 00			.byte	$35,$55,$57,$00
   844 EF5D 35 55 57 00 00 00		.byte	$35,$55,$57,$00,$00,$00
   845 EF63 00 00 00 40			.byte	$00,$00,$00,$40	;STARS+3 -> COLOR 1, COLUMN 1
   846 EF67 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;NOVICE
   847 EF6E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;INTERMEDIATE
   848 EF75 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   849 EF7C 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00	;EXPERT
   850 EF84 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;ONE PLAYER
   851 EF8B 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   852 EF90 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TWO PLAYER
   853 EF97 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   854 EF9E 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;TEAM PLAY
   855 EFA5 00 00 00 00			.byte	$00,$00,$00,$00
   856 EFA9 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00		;COMP PLAY
   857 EFB0 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00
   858 EFB7 00 00 00 00 00		.byte	$00,$00,$00,$00,$00
   859 				*
   860 EFBC 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   861 EFC2 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   862 EFC8 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   863 EFCE 00 00 00 00 00 00		.byte	$00,$00,$00,$00,$00,$00
   864 				*
   865 				*
   866 				*	.byte	$00,$00,$00,$00,$00,$00		;COPYRIGHT
   867 				*	.byte	$00,$00,$00,$00,$00,$00
   868 				*	.byte	$00,$00,$00,$00,$00,$00		;ATARI
   869 				*	.byte	$00,$00,$00,$00,$00,$00
   870 				*
   871 EFD4 00 00 00 00 00 00 + 	.byte	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;ADVANCED
   872 				*
   873 EFDE 00 08 00 00 00 00 + 	.byte	$00,$08,$00,$00,$00,$00,$00,$00,$28,$00,$00,$00,$00,$00,$00,$00
   874 EFEE 08 02 00 80 00 02		.byte	$08,$02,$00,$80,$00,$02
   875 				*
   876 				*	.byte	$20,$00,$00,$00,$00,$00,$0A,$00,$00,$00	;EE
   877 				*	.byte	$00,$00,$00,$00,$00,$00,$2A,$80,$00,$00,$00,$00
   878 				*
   879 EFF4			ENDSTAMP:
   880 				*
   881 				*  the following was added to make the source generate what is in the rom
   882 EFF4 FF FF FF FF FF FF + 	.byte	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff	;added by dave
    40 F000				icl	"TUNES.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\TUNES.asm
     1 				*         1015    180684
     2 				*
     3 				*
     4 				** TUNES.S **
     5 				** ASTEROIDS FOR THE ATARI 3600 **
     6 				** THIS FILE CONTAINS THE SOUND DRIVER. **
     7
     8 F000				ORG     CODE+$2000
     9 				***** TUNE DATA *****
    10
    11 				* TUNTAB: THE ACTUAL VALUE INFO.  THIS TABLE SHOULD BEGIN ON A PAGE BOUNADARY
    12 F000			TUNTAB:
    13
    14 				* CONSTANT VALUES (RE-USED CONSTANTS WITH THE 'PLAY FOREVER' BIT SET)
    15 F000			TCONST00:
    16 F000 40				.byte	     $40
    17 F001			TCONST01:
    18 F001 41				.byte	     $41
    19 F002			TCONST02:
    20 F002 42				.byte	     $42
    21 F003			TCONST04:
    22 F003 44				.byte	     $44
    23 F004			TCONST06:
    24 F004 46				.byte	     $46
    25 F005			TCONST08:
    26 F005 48				.byte	     $48
    27 F006			TCNTDOWN:
    28 F006 0A 09 08 07 06 05 + 	.byte	     $0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$FF
    29
    30 								;00 - VICTOR REZ OUT
    31 F011			TVICTORC:
    32 F011 4D				.byte	     $4D
    33 F012			TVICTORF:
    34 F012 03 02 01 02 03 20		.byte	     $03,$02,$01,$02,$03,$20
    35 F018			TVICTORV:
    36 F018 98 FE 01			.byte	     $98,$FE,[TS1V+1]&&255
    37 								;01 - HYPERSPACE
    38 F01B			THYPERC:
    39 F01B 0D 24			.byte	     $0D,$24
    40 F01D			THYPERF:
    41 F01D 1F 1D 1B 1A 18 17 + 	.byte	    $1F,$1D,$1B,$1A,$18,$17,$15,$14,$13,$12,$11,$10,$0F,$0E,$0D,$2C
    42 F02D			THYPERV:
    43 F02D 86 0A 85 08 06 90 + 	.byte	     $86,$0A,$85,$08,$06,$90,$04,$02,$FF
    44 								;02 - TWINKLE
    45 = F003			TTWINKC	EQU	TCONST04
    46 F036			TTWINKF:
    47 F036 06 04 01 05 02 03 + 	.byte	    $06,$04,$01,$05,$02,$03,$01,$06,$04,$05,$02,$03,$04,$01,$03,$25
    48 F046			TTWINKV:
    49 F046 45				.byte	     $45
    50 								;03 - BUZZ
    51 = F005			TBUZZC	EQU	TCONST08
    52 = F000			TBUZZF	EQU	TCONST00
    53 F047			TBUZZV:
    54 F047 01 01 02 03 04 06 + 	.byte	     $01,$01,$02,$03,$04,$06,$08,$08,$0C,$0F,$0F,$FF
    55 								;04 - XTRA
    56 = F003			TXTRAC	EQU	TCONST04
    57 F053			TXTRAF:
    58 F053 86 1F 18 1F 95 14 + 	.byte	     $86,$1F,$18,$1F,$95,$14,$FF
    59 F05A			TXTRAV:
    60 F05A 08 00 08 00 08 00 + 	.byte	     $08,$00,$08,$00,$08,$00,$FE,[TCNTDOWN+1]&&255
    61 								;05 - SHIPE
    62 = F005			TSHIPEC	EQU	TCONST08
    63 F062			TSHIPEF:
    64 F062 5F				.byte	     $5F
    65 = F006			TSHIPEV	EQU	TCNTDOWN
    66 								;06 - UFOSE
    67 = F005			TUFOSEC   EQU     TCONST08
    68 F063			TUFOSEF:
    69 F063 88 03 49			.byte	     $88,$03,$49
    70 F066			TUFOSEV:
    71 F066 09 07 09 07 FE 01		.byte	     $09,$07,$09,$07,$FE,[TCNTDOWN+5]&&255
    72 								;07 - UFOLE
    73 = F005			TUFOLEC	EQU	TCONST08
    74 F06C			TUFOLEF:
    75 F06C 8A 09 43			.byte	     $8A,$09,$43
    76 = F066			TUFOLEV	EQU	TUFOSEV
    77 								;08 - UFOS
    78 F06F			TUFOSC:
    79 F06F 07 23			.byte	$07,$23
    80 = F000			TUFOSF	EQU	TCONST00
    81 = F003			TUFOSV	EQU	TCONST04
    82 								;09 - UFOL
    83 F071			TUFOLC:
    84 F071 0F 03 07 23			.byte	$0F,$03,$07,$23
    85 = F002			TUFOLF	EQU	TCONST02
    86 = F003			TUFOLV	EQU	TCONST04
    87 								;0A - ROCKSE
    88 = F005			TROCKSEC	EQU	TCONST08
    89 F075			TROCKSEF:
    90 F075 4B				.byte	$4B
    91 = 0008			TROCKSEV	EQU	(TCNTDOWN+2) & 255
    92 								;0B - ROCKME
    93 = F005			TROCKMEC	EQU	TCONST08
    94 F076			TROCKMEF:
    95 F076 51				.byte	$51
    96 = 0008			TROCKMEV	EQU	(TCNTDOWN+2) & 255
    97 								;0C - ROCKLE
    98 = F005			TROCKLEC	EQU	TCONST08
    99 F077			TROCKLEF:
   100 F077 5A				.byte	$5A
   101 = 0007			TROCKLEV	EQU	(TCNTDOWN+1) & 255
   102 								;0D - USHOT
   103 = F003			TUSHOTC	EQU	TCONST04
   104 F078			TUSHOTF:
   105 F078 03 0F 12 13 13 14 + 	.byte	$03,$0F,$12,$13,$13,$14,$14,$15,$16,$16,$17,$FF
   106 F084			TUSHOTV:
   107 F084 03 05 07 84 06 05 + 	.byte	$03,$05,$07,$84,$06,$05,$04,$82,$03,$02,$01
   108 								;0E - SHOT
   109 = F003			TSHOTC	EQU	TCONST04
   110 F08F			TSHOTF:
   111 F08F 0C 0D 0E 0F 10 11 + 	.byte	$0C,$0D,$0E,$0F,$10,$11,$12,$13,$14,$15,$16
   112 F09A 17 18 19 1A 1B 1C + 	.byte	$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F,$FF
   113 F0A4			TSHOTV:
   114 F0A4 82 FE 01			.byte	     $82,$FE,[TCNTDOWN+1]&&255
   115 								;0F - BEATL
   116 = F004			TBEATLC	EQU	TCONST06
   117 F0A7			TBEATLF:
   118 F0A7 53				.byte	$53
   119 F0A8			TBEATLV:
   120 F0A8 09 FF			.byte	$09,$FF
   121 								;10 - BEATH
   122 = F004			TBEATHC	EQU	TCONST06
   123 F0AA			TBEATHF:
   124 F0AA 54				.byte	     $54
   125 = F0A8			TBEATHV	EQU	TBEATLV
   126 								;11 - THRUST
   127 = F004			TTHRUSTC	EQU	TCONST06
   128 F0AB			TTHRUSTF:
   129 F0AB 10 0E 0D 0E 0C 0E + 	.byte	$10,$0E,$0D,$0E,$0C,$0E,$0F,$2E
   130 = F003			TTHRUSTV	EQU	TCONST04
   131 								;12 - S1
   132 = F003			TS1C	EQU	TCONST04
   133 F0B3			TS1F:
   134 F0B3 10 13 0C 08 05 03 + 	.byte	     $10,$13,$0C,$08,$05,$03,$02,$21
   135 F0BB			TS1V:
   136 F0BB A0 07 05 03 01 FF		.byte	     $A0,$07,$05,$03,$01,$FF
   137 								;13 - S2
   138 = F003			TS2C	EQU	TCONST04
   139 F0C1			TS2F:
   140 F0C1 07 21			.byte	     $07,$21
   141 F0C3			TS2V:
   142 F0C3 01 02 03 04 05 06 + 	.byte	     $01,$02,$03,$04,$05,$06,$07,$08,$FE,[TCNTDOWN+2]&&255
   143 								;14 - S3
   144 = F003			TS3C	EQU	TCONST04
   145 F0CD			TS3F:
   146 F0CD 09 05 07 2A			.byte	     $09,$05,$07,$2A
   147 F0D1			TS3V:
   148 F0D1 8C 07 00 05 00 03 + 	.byte	     $8C,$07,$00,$05,$00,$03,$00,$01,$FF
   149 								;15 - S4
   150 = F003			TS4C	EQU	TCONST04
   151 F0DA			TS4F:
   152 F0DA 1A 12 2D			.byte	     $1A,$12,$2D
   153 F0DD			TS4V:
   154 F0DD 9B FE 01			.byte	     $9B,$FE,[TS1V+1]&&255
   155 								;16 - S5
   156 = F001			TS5C	EQU	TCONST01
   157 = F000			TS5F	EQU	TCONST00
   158 F0E0			TS5V:
   159 F0E0 04 00 04 00 04 00 + 	.byte	$04,$00,$04,$00,$04,$00,$8A,$00,$04,$00,$04
   160 F0EB 00 04 00 85 04 00 + 	.byte	$00,$04,$00,$85,$04,$00,$04,$00,$04,$FF
   161 								;17 - S6
   162 = F001			TS6C	EQU	TCONST01
   163 F0F5			TS6F:
   164 F0F5 04 06 26			.byte	     $04,$06,$26
   165 F0F8			TS6V:
   166 F0F8 92 01 02 03 FE 01		.byte	     $92,$01,$02,$03,$FE,[TCNTDOWN+6]&&255
   167 				*
   168 				* TIINDEX: TABLE OF INITIAL INDICES AND DURATIONS
   169 F0FE			TIINDEX:
   170 F0FE 11 12 18 03			.byte	TVICTORC&255,TVICTORF&255,TVICTORV&255,3 ;SOUND 0 - VICTOR REZOUT
   171 F102 1B 1D 2D 01			.byte	THYPERC&255,THYPERF&255,THYPERV&255,1	;SOUND 1 - HYPERSPACE
   172 F106 03 36 46 02			.byte	TTWINKC&255,TTWINKF&255,TTWINKV&255,2	;SOUND 2 - TWINKLE
   173 F10A 05 00 47 03			.byte	TBUZZC&255,TBUZZF&255,TBUZZV&255,3	;SOUND 3 - BUZZ
   174 F10E 03 53 5A 03			.byte	TXTRAC&255,TXTRAF&255,TXTRAV&255,3	;SOUND 4 - XTRA MAN
   175 F112 05 62 06 09			.byte	TSHIPEC&255,TSHIPEF&255,TSHIPEV&255,9	;SOUND 5 - SHIP EXP
   176 F116 05 63 66 03			.byte	TUFOSEC&255,TUFOSEF&255,TUFOSEV&255,3	;SOUND 6 - MR. BILL EXP
   177 F11A 05 6C 66 04			.byte	TUFOLEC&255,TUFOLEF&255,TUFOLEV&255,4	;SOUND 7 - SLUGGO EXP
   178 F11E 6F 00 03 03			.byte	TUFOSC&255,TUFOSF&255,TUFOSV&255,3	;SOUND 8 - MR. BILL
   179 F122 71 02 03 05			.byte	TUFOLC&255,TUFOLF&255,TUFOLV&255,5	;SOUND 9 - SLUGGO
   180 F126 05 75 08 04			.byte	TROCKSEC&255,TROCKSEF&255,TROCKSEV&255,4 ;SOUND A - SMALL ROCK EX
   181 F12A 05 76 08 06			.byte	TROCKMEC&255,TROCKMEF&255,TROCKMEV&255,6 ;SOUND B - MED. ROCK EX
   182 F12E 05 77 07 08			.byte	TROCKLEC&255,TROCKLEF&255,TROCKLEV&255,8 ;SOUND C - LARGE ROCK EX
   183 F132 03 78 84 02			.byte	TUSHOTC&255,TUSHOTF&255,TUSHOTV&255,2	;SOUND D - UFO SHOT
   184 F136 03 8F A4 01			.byte	TSHOTC&255,TSHOTF&255,TSHOTV&255,1	;SOUND E - HERO SHOT
   185 F13A 04 A7 A8 06			.byte	TBEATLC&255,TBEATLF&255,TBEATLV&255,6	;SOUND F - LO HEART BEAT
   186 F13E 04 AA A8 06			.byte	TBEATHC&255,TBEATHF&255,TBEATHV&255,6	;SOUND 10 - HI HEART BEA
   187 F142 04 AB 03 02			.byte	TTHRUSTC&255,TTHRUSTF&255,TTHRUSTV&255,2 ;SOUND 11 - SHIP THRUST
   188 F146 03 B3 BB 04			.byte	TS1C&255,TS1F&255,TS1V&255,4		;SOUND 12 - SPACE SOUND1
   189 F14A 03 C1 C3 08			.byte	TS2C&255,TS2F&255,TS2V&255,8		;SOUND 13 - SPACE SOUND2
   190 F14E 03 CD D1 03			.byte	TS3C&255,TS3F&255,TS3V&255,3		;SOUND 14 - SPACE SOUND3
   191 F152 03 DA DD 09			.byte	TS4C&255,TS4F&255,TS4V&255,9		;SOUND 15 - SPACE SOUND4
   192 F156 01 00 E0 05			.byte	TS5C&255,TS5F&255,TS5V&255,5		;SOUND 16 - SPACE SOUND5
   193 F15A 01 F5 F8 06			.byte	TS6C&255,TS6F&255,TS6V&255,6		;SOUND 17 - SPACE SOUND6
   194
   195 				*
   196 				***** ACTUAL ROUTINES FOR TUNE DRIVER *****
   197 				* DOTUNE2:        PLAY TUNE IN AC ONLY IF IT IS NOT ALREADY PLAYING
   198 F15E			DOTUNE2:
   199 F15E A2 01			LDX     #1		;SEE IF THIS TUNE IS ALREADY PLAYING
   200 F160			TFINDLOP:
   201 F160 D5 CD			CMP     TUNNUM,X
   202 F162 F0 06			BEQ     TALREADY	;ALREADY PLAYING, DON'T PLAY AGAIN
   203 F164 CA				DEX
   204 F165 10 F9			BPL     TFINDLOP
   205 F167 20 70 F1			JSR     DOTUNE	;NOT YET PLAYING, START UP HIS THEME
   206 F16A			TALREADY:
   207 F16A 60				RTS
   208
   209
   210 				* DOTUNE1:        PLAY TUNE IN AC, KILLING THE TUNE IF IT IS ALREADY PLAYING
   211 F16B			DOTUNE1:
   212 F16B 48				PHA
   213 F16C 20 B7 F1			JSR     KILLTUNE
   214 F16F 68				PLA
   215 				;	JMP     DOTUNE		;FALL THROUGH ...
   216
   217 				* DOTUNE:         PLAY TUNE IN AC IF POSSIBLE
   218 F170			DOTUNE:
   219 F170 A2 01			LDX     #1		;FIND A FREE CHANNEL
   220 F172			TUNFRELP:
   221 F172 B4 CD			LDY     TUNNUM,X
   222 F174 30 11			BMI     TUNIN		;FF = FREE
   223 F176 CA				DEX
   224 F177 10 F9			BPL     TUNFRELP
   225
   226 					;NONE FREE
   227 F179 C9 10			CMP     #$10		;LOW PRI. SOUNDS NEVER BUMP ANYTHING
   228 F17B B0 09			BCS     TUNRTS
   229 F17D A2 01			LDX     #1		;FIND A LOWER PRIORITY CHANNEL
   230 F17F			TUNPRILP:
   231 F17F D5 CD			CMP     TUNNUM,X
   232 F181 90 04			BCC     TUNIN		;FOUND LOWER PRIORITY: BUMP IT
   233 F183 CA				DEX
   234 F184 10 F9			BPL     TUNPRILP
   235
   236 					;SORRY CHARLIE...
   237 F186			TUNRTS:
   238 F186 60				RTS
   239
   240 				* TUNIN:  INSTALL THE TUNE IN AC INTO CHANNEL IN X
   241 F187			TUNIN:
   242 F187 95 CD			STA     TUNNUM,X
   243 F189 0A				ASL			;FIND ROW IN INITIALIZATION TABLE
   244 F18A 0A				ASL			;(THERE ARE FOUR ENTRIES PER ROW)
   245 F18B A8				TAY
   246 F18C			TUNINLOP:
   247 F18C B9 FE F0			LDA     TIINDEX,Y	;COPY IN TUNE INITIAL INDICES
   248 F18F 95 CF			STA     TINDEX,X
   249 F191 C8				INY
   250 F192 E8				INX
   251 F193 E8				INX			;SKIP OVER THE OTHER CHANNEL
   252 F194 E0 06			CPX     #6		;2 CHANNELS * 3 ELEMENTS PER CHANNEL
   253 F196 90 F4			BCC     TUNINLOP
   254 F198 B9 FE F0			LDA     TIINDEX,Y	;COPY IN DURATION
   255 F19B			TDURINLP:
   256 F19B CA				DEX
   257 F19C CA				DEX
   258 F19D 30 E7			BMI     TUNRTS
   259 F19F 9D 8A 1A			STA     TDURTAB,X
   260 F1A2 95 D5			STA     TDURCNT,X
   261 F1A4 10 F5			BPL     TDURINLP	;BPL = JMP
   262
   263 				* CLEARTUN:       KILL ALL TUNES, WHEREVER THEY LIE
   264 F1A6			CLEARTUN:
   265 F1A6 A2 01			LDX     #1
   266 F1A8			CLRLOOP:
   267 F1A8 20 C1 F1			JSR     TOVER
   268 F1AB CA				DEX
   269 F1AC 10 FA			BPL     CLRLOOP	;FALL THRU INIT HUMP
   270
   271 F1AE			INITHUMP:
   272 F1AE A9 20			LDA     #$20	;INITIALIZE BACKGROUND HEATBEAT COUNTER
   273 F1B0 85 CA			STA     BEATVAL
   274 				;	STA     BCOUNTER	;LET IT RIDE...
   275 F1B2 A9 90			LDA     #$90
   276 F1B4 85 CB			STA     BEATRATE
   277 F1B6 60				RTS
   278
   279 				* KILLTUNE:       KILLS *ONE INSTANCE OF* TUNE IN AC, IF POSSIBLE
   280 F1B7			KILLTUNE:
   281 F1B7 A2 01			LDX     #1		;FIND IT
   282 F1B9			KILLLOOP:
   283 F1B9 D5 CD			CMP     TUNNUM,X
   284 F1BB F0 04			BEQ     TOVER
   285 F1BD CA				DEX
   286 F1BE 10 F9			BPL     KILLLOOP
   287 F1C0 60				RTS
   288
   289 				* TOVER: END THE TUNE IN COMPONENT X.  THIS IS BOTH CALLED AS A SUBROUTINE AND
   290 				*         BRANCHED INTO.
   291 F1C1			TOVER:
   292 F1C1 8A				TXA
   293 F1C2 29 01			AND     #$01		;LOW BIT IS CHANNEL NUMBER
   294 F1C4 AA				TAX
   295 F1C5 A0 FF			LDY     #$FF		;FF = NO TUNE
   296 F1C7 94 CD			STY     TUNNUM,X
   297 F1C9 C8				INY
   298 F1CA 94 19			STY     AUDV0,X		;TURN OFF SOUND
   299 F1CC 60				RTS
   300
   301 				* TUNER:	CALLED ONCE PER FRAME, PLAYS THE TUNES.
   302 F1CD			TUNER:
   303 F1CD A5 7B			LDA     GAMSTATE	;PLAY TUNES ONLY IN GAMEPLAY STATE
   304 F1CF C9 05			CMP     #PLAYST
   305 F1D1 D0 B3			BNE     TUNRTS
   306
   307 F1D3 A5 A5			LDA     STATUS+25	;MAKE SURE UFO THEME IS PLAYING, IF ON
   308 F1D5 30 08			BMI     TNOUFO
   309 F1D7 29 0F			AND     #$0F
   310 F1D9 18				CLC
   311 F1DA 69 04			ADC     #4
   312 F1DC 20 5E F1			JSR     DOTUNE2		;PLAY HIS THEME, IF NOT ALREADY PLAYING
   313 F1DF			TNOUFO:
   314
   315 F1DF A2 01			LDX     #1		;START WITH CHANNEL 1
   316 F1E1			TCHX:
   317 F1E1 8A				TXA			;PUSH CHANNEL NUMBER
   318 F1E2 48				PHA
   319 F1E3 B5 CD			LDA     TUNNUM,X
   320 F1E5 30 03			BMI     TNOTUNE		;FF = NO TUNE PLAYING
   321 F1E7 20 F0 F1			JSR     TLOOP
   322 F1EA			TNOTUNE:
   323 F1EA 68				PLA			;RESTORE CHANNEL NUMBER
   324 F1EB AA				TAX
   325 F1EC CA				DEX
   326 F1ED 10 F2			BPL     TCHX
   327 F1EF 60				RTS
   328
   329 				* TLOOP:  LOOP THROUGH EACH OF THE THREE COMPONENTS OF CHANNEL X SIGNAL
   330 F1F0			TLOOP:
   331 F1F0 B4 CF			LDY     TINDEX,X
   332 F1F2 B9 00 F0			LDA     TUNTAB,Y
   333 F1F5 C9 FF			CMP     #$FF
   334 F1F7 F0 C8			BEQ     TOVER
   335 F1F9 C9 FE			CMP     #$FE
   336 F1FB F0 35			BEQ     TBRANCH
   337 F1FD C9 FD			CMP     #$FD
   338 F1FF F0 3A			BEQ     TCHAIN
   339 F201 C9 80			CMP     #$80		;BIT 7 = SET DURATION ONLY
   340 F203 B0 21			BCS     TSETDUR
   341
   342 					;TNORM: NORMAL NOTE
   343 F205 29 1F			AND     #$1F
   344 F207 95 15			STA     AUDC0,X		;GO POUND SAND IN YOUR ASS
   345 F209 D6 D5			DEC     TDURCNT,X	;DURATION UP YET?
   346 F20B D0 12			BNE     TNEXT		;NOPE
   347 F20D BD 8A 1A			LDA     TDURTAB,X	;YUP.  REPRIME DURATION COUNTER
   348 F210 95 D5			STA     TDURCNT,X
   349 F212 B9 00 F0			LDA     TUNTAB,Y	;CHECK FOR SPECIAL BITS
   350 F215 C9 40			CMP     #$40		;BIT 6 = HOLD FOREVER (TILL TUNE END)
   351 F217 B0 06			BCS     TNEXT		;-> SIMPLY DON'T BUMP POINTER.
   352 F219 C9 20			CMP     #$20		;BIT 5 = RESTART THIS COMPONENT
   353 F21B B0 2A			BCS     TRESTART
   354
   355 F21D F6 CF			INC     TINDEX,X	;BUMP POINTER TO NEXT 'NOTE'
   356
   357 F21F			TNEXT:
   358 F21F E8				INX			;GO ON TO NEXT COMPONENT OF THIS
   359 F220 E8				INX			;CHANNEL (SKIP OVER OTHER CHANNEL)
   360 F221 E0 06			CPX     #6		;2 CHANNELS * 3 COMPONENTS PER CHANNEL
   361 F223 90 CB			BCC     TLOOP
   362 F225 60				RTS
   363
   364 				* TSETDUR: SET DURATION OF COMPONENT IN X TO VALUE IN AC.
   365 F226			TSETDUR:
   366 F226 29 7F			AND     #$7F		;LOW 7 BITS = NEW DURATION
   367 F228 9D 8A 1A			STA     TDURTAB,X
   368 F22B 95 D5			STA     TDURCNT,X
   369 F22D F6 CF			INC     TINDEX,X	;BUMP POINTER
   370 F22F 4C F0 F1			JMP     TLOOP		;AND CONTINUE
   371
   372 				* TBRANCH: $FE,ADDR = BRANCH INTO RANDOM ADDR FOR THIS COMPONENT
   373 F232			TBRANCH:
   374 F232 C8				INY			;FETCH NEXT BYTE (NEW ADDRESS)
   375 F233 B9 00 F0			LDA     TUNTAB,Y
   376 F236 95 CF			STA     TINDEX,X	;MASH IT INTO INDEX
   377 F238 4C F0 F1			JMP     TLOOP
   378
   379 				* TCHAIN: $FD,TUNNUM = CHAIN TO NEW TUNE.  NOTE: THIS MEANS *ALL* COMPONENTS
   380 F23B			TCHAIN:
   381 F23B C8				INY			;FETCH NEXT BYTE (TUNNUM)
   382 F23C B9 00 F0			LDA     TUNTAB,Y
   383 F23F 48				PHA
   384 F240 20 C1 F1			JSR     TOVER		;END THIS TUNE
   385 F243 68				PLA	
   386 F244 4C 70 F1			JMP     DOTUNE		;JMP = JSR,RTS
   387
   388 				* TRESTART: RESTART THIS COMPONENT OF TUNE
   389 F247			TRESTART:
   390 F247 8A				TXA
   391 F248 29 01			AND     #$01		;LOW BIT IS CHANNEL NUMBER
   392 F24A A8				TAY
   393 F24B B9 CD 00			LDA     TUNNUM,Y	;GET ITS TUNE NUMBER
   394 F24E 0A				ASL			;FIND ROW IN INITIAL INDEX TABLE
   395 F24F 0A				ASL			;(FOUR ENTRIES PER ROW)
   396 F250 85 65			STA     TTEMP
   397 F252 8A				TXA			;GET COMPONENT INDEX
   398 F253 4A				LSR			;BITS 2-1 ARE COMPONENT NUMBER
   399 F254 18				CLC
   400 F255 65 65			ADC     TTEMP		;ADD ROW INDEX TO POSITION WITHIN ROW
   401 F257 A8				TAY
   402 F258 B9 FE F0			LDA     TIINDEX,Y	;FETCH INITIAL INDEX
   403 F25B 95 CF			STA     TINDEX,X	;POUND IT IN
   404 F25D 4C 1F F2			JMP     TNEXT		;AND DO THE NEXT COMPONENT
   405
   406 				* ROUTINE TO PLAY THE BUMM, BUMM SOUND OF THE BACKGROUND HEART BEAT
   407 				* START OUT AT A SLOW RATE AND INCREASE SLOWLY
   408
   409 F260			BACKSNDS:
   410
   411 				* FIRST ADD RANDOM SPACE SOUNDS
   412
   413 F260 A5 76			LDA     FRMCNT		;CHECK ONLY OCCASIONALLY
   414 F262 29 06			AND     #$06
   415 F264 D0 0D			BNE     UPRATE
   416
   417 F266 20 B2 F8			JSR     NEWRAND		;GET RANDOM VALUE
   418 F269 C9 06			CMP     #$06		;DO ONLY OCCASIONALLY
   419 F26B B0 06			BCS     UPRATE		;HAVE ONLY 6 RANDOM SPACE SOUNDS
   420 F26D 18				CLC			;ADD TO BASE
   421 F26E 69 12			ADC     #$12
   422 F270 20 70 F1			JSR     DOTUNE
   423
   424 				* THEN UPDATE RATE
   425
   426 F273			UPRATE:
   427 F273 E6 CB			INC     BEATRATE	;INCREASE RATE
   428 F275 D0 10			BNE     OLDRATE
   429
   430 F277			NEWRATE:
   431 F277 A9 90			LDA     #$90		;RESET BEATRATE
   432 F279 85 CB			STA     BEATRATE
   433 F27B C6 CA			DEC     BEATVAL		;INCREASE RATE BY
   434 F27D A5 CA			LDA     BEATVAL		; DECREMENTING BEATVAL
   435 F27F C9 05			CMP     #5		;DON'T LET GO BELOW 10
   436 F281 B0 04			BCS     OLDRATE
   437 F283 A9 05			LDA     #5
   438 F285 85 CA			STA     BEATVAL
   439
   440 				* CHECK IF TIME FOR A BEAT
   441 F287			OLDRATE:
   442 F287 C6 C9			DEC     BCOUNTER	;COUNTER COUNTS DOWN FROM
   443 								; BEATVAL TO 0.
   444 F289 10 10			BPL     DONEBEAT	;IS IT TIME FOR NEW BEAT?
   445
   446 F28B			THISTIME:
   447 F28B A5 CA			LDA     BEATVAL		;YES, RESET COUNTER
   448 F28D 85 C9			STA     BCOUNTER
   449
   450 F28F A5 CC			LDA     WHICHBT
   451 F291 49 01			EOR     #$01		;TOGGLE TO OTHER TUNE
   452 F293 85 CC			STA     WHICHBT
   453 F295 18				CLC
   454 F296 69 0F			ADC     #$0F		;ADD OFFSET TO TUNE
   455 F298 20 70 F1			JSR     DOTUNE		;PLAY IT
   456 F29B			DONEBEAT:
   457 F29B 60				RTS
   458
    41 F29C				icl	"ROCKMOVE.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\ROCKMOVE.asm
     1 				*         0042    221283
     2 				*
     3 				*
     4 				** ROCKMOVE.S **
     5 				** ASTEROIDS FOR THE ATARI 3600 **
     6 				** THIS FILE CONTAINS THE ROCK MOVEMENT ROUTINE. **
     7
     8
     9 F29C			ROCKMOVE:
    10 F29C A2 20			LDX     #32
    11
    12 F29E			MOVELOOP:
    13 F29E B5 8C			LDA     STATUS,X
    14 				;	CMP     #$FF		;UNCOMMENT FOR MOVING EXPLOSIONS
    15 				;	BNE     THISMOVE	;UNCOMMENT FOR MOVING EXPLOSIONS
    16 F2A0 10 04			BPL     THISMOVE	;COMMENT FOR MOVING EXPLOSIONS
    17
    18 F2A2			NEXTMOVE:
    19 F2A2 CA				DEX
    20 F2A3 10 F9			BPL     MOVELOOP
    21 F2A5 60				RTS
    22
    23 F2A6			THISMOVE:
    24 F2A6 29 0F			AND     #$0F
    25 F2A8 A8				TAY
    26
    27 F2A9 18				CLC			;GET NEW XPOS
    28 F2AA BD 20 18			LDA     XVELL,X
    29 F2AD 7D EC 18			ADC     XPOSL,X
    30 F2B0 9D EC 18			STA     XPOSL,X
    31 F2B3 BD 41 18			LDA     XVELH,X
    32 F2B6 7D A4 18			ADC     XPOSH,X
    33 F2B9 C9 9F			CMP     #XPOSMAX	;CHECK FOR WRAPAROUND
    34 F2BB 90 10			BCC     SETXPOS
    35 				;	CMP     #XPOSMIN
    36 				;	BCS     SETXPOS
    37 F2BD E0 19			CPX     #25		;DON'T WRAP THE UFO
    38 F2BF F0 0C			BEQ     SETXPOS
    39 F2C1 BD 41 18			LDA     XVELH,X
    40 F2C4 30 05			BMI     NEGOVELX
    41 F2C6 A9 00			LDA     #XPOSMIN
    42 F2C8 4C CD F2			JMP     SETXPOS
    43 F2CB			NEGOVELX:
    44 F2CB A9 9F			LDA     #XPOSMAX
    45 F2CD			SETXPOS:
    46 F2CD 9D A4 18			STA     XPOSH,X
    47 F2D0 18				CLC
    48 F2D1 79 F9 F3			ADC     DELTAX,Y
    49 F2D4 9D 72 19			STA     COLXPOSH,X
    50
    51 F2D7 18				CLC			;GET NEW YPOS
    52 F2D8 BD 62 18			LDA     YVELL,X
    53 F2DB 7D 0D 19			ADC     YPOSL,X
    54 F2DE 9D 0D 19			STA     YPOSL,X
    55 F2E1 BD 83 18			LDA     YVELH,X
    56 F2E4 7D C8 18			ADC     YPOSH,X
    57 F2E7 C9 BF			CMP     #YPOSMAX	;CHECK FOR WRAPAROUND
    58 F2E9 90 0C			BCC     SETYPOS
    59 				;	CMP     #YPOSMIN
    60 				;	BCS     SETYPOS
    61 F2EB BD 83 18			LDA     YVELH,X
    62 F2EE 30 05			BMI     NEGOVELY
    63 F2F0 A9 00			LDA     #YPOSMIN
    64 F2F2 4C F7 F2			JMP     SETYPOS
    65 F2F5			NEGOVELY:
    66 F2F5 A9 BF			LDA     #YPOSMAX
    67 F2F7			SETYPOS:
    68 F2F7 9D C8 18			STA     YPOSH,X
    69 F2FA 18				CLC
    70 F2FB 79 00 F4			ADC     DELTAY,Y
    71 F2FE 9D 9E 19			STA     COLYPOSH,X
    72
    73 F301 C0 03			CPY     #3
    74 F303 B0 9D			BCS     NEXTMOVE
    75 F305 B5 8C			LDA     STATUS,X
    76 F307 30 99			BMI     NEXTMOVE
    77
    78 F309 8A				TXA			;GET NEW ANIMATION INDEX
    79 F30A 0A				ASL
    80 F30B 65 76			ADC     FRMCNT
    81 F30D 4A				LSR
    82 F30E 3D C2 F3			AND     AVEL,X		;AVEL ANDED WITH FRMCNT TO DECIDE
    83 F311 D0 8F			BNE     NEXTMOVE	;WHEN NEXT ANIMATION
    84
    85 F313 BD AA F3			LDA     ASPIN,X
    86 F316 30 39			BMI     NEGOSPIN
    87
    88 F318			POSOSPIN:
    89 F318 C0 01			CPY     #1
    90 F31A 90 24			BCC     PSANIM
    91 F31C F0 11			BEQ     PMANIM
    92
    93 F31E			PLANIM:
    94 F31E A8				TAY
    95 F31F BD 2E 19			LDA     ACYC,X
    96 F322 69 02			ADC     #2		;CARRY IS SET
    97 F324 D9 DB F3			CMP     LBOUND+1,Y
    98 F327 30 69			BMI     SETACYC
    99 F329 B9 DA F3			LDA     LBOUND,Y
   100 F32C 4C 92 F3			JMP     SETACYC
   101
   102 F32F			PMANIM:
   103 F32F A8				TAY
   104 F330 BD 2E 19			LDA     ACYC,X
   105 F333 69 01			ADC     #1		;CARRY IS SET
   106 F335 D9 DF F3			CMP     MBOUND+1,Y
   107 F338 30 58			BMI     SETACYC
   108 F33A B9 DE F3			LDA     MBOUND,Y
   109 F33D 4C 92 F3			JMP     SETACYC
   110
   111 F340			PSANIM:
   112 F340 A8				TAY
   113 F341 BD 2E 19			LDA     ACYC,X
   114 F344 69 01			ADC     #1		;CARRY IS CLEAR
   115 F346 D9 E3 F3			CMP     SBOUND+1,Y
   116 F349 30 47			BMI     SETACYC
   117 F34B B9 E2 F3			LDA     SBOUND,Y
   118 F34E 4C 92 F3			JMP     SETACYC
   119
   120 F351			NEGOSPIN:
   121 F351 29 7F			AND     #$7F
   122 F353 C0 01			CPY     #1
   123 F355 90 2A			BCC     NSANIM
   124 F357 F0 14			BEQ     NMANIM
   125
   126 F359			NLANIM:
   127 F359 A8				TAY
   128 F35A BD 2E 19			LDA     ACYC,X
   129 F35D E9 03			SBC     #3		;CARRY IS SET
   130 F35F D9 DA F3			CMP     LBOUND,Y
   131 F362 10 2E			BPL     SETACYC
   132 F364 B9 DB F3			LDA     LBOUND+1,Y
   133 F367 38				SEC
   134 F368 E9 03			SBC     #3
   135 F36A 4C 92 F3			JMP     SETACYC
   136
   137 F36D			NMANIM:
   138 F36D A8				TAY
   139 F36E BD 2E 19			LDA     ACYC,X
   140 F371 E9 02			SBC     #2		;CARRY IS SET
   141 F373 D9 DE F3			CMP     MBOUND,Y
   142 F376 10 1A			BPL     SETACYC
   143 F378 B9 DF F3			LDA     MBOUND+1,Y
   144 F37B 38				SEC
   145 F37C E9 02			SBC     #2
   146 F37E 4C 92 F3			JMP     SETACYC
   147
   148 F381			NSANIM:
   149 F381 A8				TAY
   150 F382 BD 2E 19			LDA     ACYC,X
   151 F385 E9 00			SBC     #0		;CARRY IS CLEAR
   152 F387 D9 E2 F3			CMP     SBOUND,Y
   153 F38A 10 06			BPL     SETACYC
   154 F38C B9 E3 F3			LDA     SBOUND+1,Y
   155 F38F 38				SEC
   156 F390 E9 01			SBC     #1
   157
   158 F392			SETACYC:
   159 F392 9D 2E 19			STA     ACYC,X
   160 F395 4C A2 F2			JMP     NEXTMOVE
   161
   162 F398			SHOTMOVE:
   163 F398 A2 05			LDX     #5
   164 F39A			LOOPSHOT:
   165 F39A B5 A6			LDA     STATUS+26,X
   166 F39C 30 08			BMI     SHOTNEXT
   167 F39E F6 DD			INC     SHOTCNT,X
   168 F3A0 D0 04			BNE     SHOTNEXT
   169 F3A2 A9 FF			LDA     #$FF
   170 F3A4 95 A6			STA     STATUS+26,X
   171 F3A6			SHOTNEXT:
   172 F3A6 CA				DEX
   173 F3A7 10 F1			BPL     LOOPSHOT
   174 F3A9 60				RTS
   175
   176
   177 F3AA			ASPIN:
   178 F3AA 00 80 01 81 02 82 +     	.byte	$00,$80,$01,$81,$02,$82,$00,$80,$01,$81,$02,$82
   179 F3B6 00 80 01 81 02 82 + 	.byte	$00,$80,$01,$81,$02,$82,$00,$80,$01,$81,$02,$82
   180
   181 F3C2			AVEL:
   182 F3C2 01 03 00 01 03 00 + 	.byte	1,3,0,1,3,0,1,3,0,1,3,0
   183 F3CE 03 00 01 03 00 01 + 	.byte	3,0,1,3,0,1,3,0,1,3,0,1
   184
   185 F3DA			LBOUND:
   186 F3DA 00 24 48 6C		   	.byte	ROCK1L1 & 255,ROCK2L1 & 255,ROCK3L1 & 255,ROCKEL1 & 255
   187 F3DE			MBOUND:
   188 F3DE 7B 8B 9B AB		   	.byte	ROCK1M1 & 255,ROCK2M1 & 255,ROCK3M1 & 255,ROCKEM1 & 255
   189 F3E2			SBOUND:
   190 F3E2 ED F1 F5 F9		   	.byte	ROCK1S1 & 255,ROCK2S1 & 255,ROCK3S1 & 255,ROCKES1 & 255
   191
   192 F3E6			ELBOUND:
   193 F3E6 F9 AB 6C D5		  	.byte	ROCKES1 & 255,ROCKEM1 & 255,ROCKEL1 & 255,SHIPE1 & 255
   194 F3EA F9 AB FE D5			.byte	ROCKES1 & 255,ROCKEM1 & 255,SHOT1 & 255,SHIPE1 & 255
   195 F3EE			EHBOUND:
   196 F3EE FD B3 78 DF		  	.byte	ROCKES5 & 255,ROCKEM5 & 255,ROCKEL5 & 255,SHIPE6 & 255
   197 F3F2 FD B3 FE DF			.byte	ROCKES5 & 255,ROCKEM5 & 255,SHOT1 & 255,SHIPE6 & 255
   198
   199 F3F6			ROCKCYC:
   200 F3F6 ED 7B 00		  	.byte	ROCK1S1 & 255,ROCK1M1 & 255,ROCK1L1 & 255
   201
   202 F3F9			DELTAX:
   203 F3F9 02 03 05 03 02 03 +    	.byte	     2,3,5,3,2,3,0	;XCENTER
   204 F400			DELTAY:
   205 F400 0D 0A 08 09 0D 0C +    	.byte	     13,10,8,9,13,12,0	;YCENTER
   206
    42 F407				icl	"INIT.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\INIT.asm
     1 				*         1522    030784
     2 				*
     3 				*
     4 				*
     5 				** INIT.S **
     6 				** ASTEROIDS FOR THE ATARI 3600 **
     7 				** THIS FILE CONTAINS VARIOUS INITIALIZATION ROUTINES. **
     8
     9 				* ROCK INITIALIZATION ROUTINE, SOFT PALETTES, RANDPOS AND VELOCITY TO ROCKS
    10 F407			INITROCK:
    11 F407 A9 FF		          LDA     #$FF                   ;FOR NEW RACK NULL OUT ROCKS.
    12 F409 A2 17		          LDX     #23
    13 F40B 95 8C		NULLROCK: STA     STATUS,X
    14 F40D CA			          DEX
    15 F40E 10 FB		          BPL     NULLROCK
    16
    17 				*         ;PUT UP DIFFICULTY ICON.
    18 				*         LDA     #10
    19 				*         CLC
    20 				*         ADC     DIFF
    21 				*         TAY
    22 				*         LDX     #33
    23 				*         JSR     DOICON
    24 				*         LDA     #16                    ;REPOSITION ICON DURING GAMEPLAY
    25 				*         STA     XPOSH,X
    26
    27 F410 A4 79		          LDY     PLAYER
    28 F412 B6 C5		          LDX     ROCKTOT,Y
    29 F414 CA			          DEX
    30 F415 A9 32		NROKLOOP: LDA     #LARGE                 ;INITIALIZE ROCKS
    31 F417 95 8C		          STA     STATUS,X
    32 F419 BD AA F3		          LDA     ASPIN,X
    33 F41C 29 7F		          AND     #$7F
    34 F41E A8			          TAY
    35 F41F B9 DA F3		          LDA     LBOUND,Y
    36 F422 9D 2E 19		          STA     ACYC,X                 ;STORE INITIAL ANIMATION
    37 F425 20 D3 F8		          JSR     RANDPOS                ;STORE A RANDOM BORDER POSITION
    38 F428 20 F9 F8		          JSR     RANDVEL                ; AND RANDOM VELOCITY.
    39 F42B CA			          DEX
    40 F42C 10 E7		          BPL     NROKLOOP
    41
    42 F42E A2 20		COPYPALS: LDX     #32
    43 F430 BD 11 FD		ZOPYPALS: LDA     PALTAB,X               ;LOAD UP SOFT PALETTE/WIDTH TABLE
    44 F433 9D CB 1A		          STA     PALS,X
    45 F436 CA			          DEX
    46 F437 10 F7		          BPL     ZOPYPALS
    47
    48 F439 60			          RTS
    49
    50 				** ROUTINE TO INITIALIZE THE SCORE DISPLAY THE FIRST TIME. **
    51 F43A			INITSCOR:
    52 				*         FIRST ZERO SCORE FOR BOTH PLAYERS
    53 F43A A2 0B		          LDX     #11
    54 F43C A9 00		          LDA     #0
    55 F43E 95 46		ZEROSCOR: STA     SCORE,X
    56 F440 CA			          DEX
    57 F441 10 FB		          BPL     ZEROSCOR
    58
    59 F443 60			          RTS
    60
    61 				* ROUTINE TO ZERO OUT THE HIGH SCORE
    62 F444 A9 00		ZEROHS:   LDA     #0
    63 F446 85 42		          STA     HISCORE                ;ZAP THE HIGH SCORE
    64 F448 85 43		          STA     HISCORE+1
    65 F44A 85 44		          STA     HISCORE+2
    66 F44C 85 45		          STA     HISCORE+3
    67 F44E 60			          RTS
    68
    69 F44F			INITPLAY:
    70 F44F 20 A6 F1		          JSR     CLEARTUN               ;CLEAR OUT AUDIO CHANNELS
    71
    72 				          ;SET UP STATUS FOR SHIP PARTS TO BE USED IN COLLIDE.
    73 F452 A9 07		          LDA     #7                     ;SHIP'S PARTS = #7
    74 F454 AA			          TAX                            ;THERE ARE EIGHT PARTS TO SET UP
    75 F455 95 B0		NXTPART:  STA     STATUS+36,X
    76 F457 CA			          DEX
    77 F458 10 FB		          BPL     NXTPART
    78
    79 				          ;SET UP TABLES FOR DIFF LEVELS.
    80 F45A A4 83		          LDY     DIFF
    81 F45C B9 B1 F4		          LDA     MAXLVLS,Y              ;HIGHEST ATTAINABLE LEVEL FOR DIFF
    82 F45F 85 84		          STA     MAXLVL
    83 F461 C8			          INY
    84 F462 98			          TYA
    85 F463 A2 03		          LDX     #3                     ;FOUR TYPES OF INCREMENTS
    86 F465 95 85		ZNXTDLVL: STA     LVLINC,X               ; THE INCREMENT IS BASED ON
    87 F467 0A			          ASL                            ; DIFF+1, SHIFTED LEFT BY
    88 F468 CA			          DEX                            ; THE TYPE.  I.E:
    89 F469 10 FA		          BPL     ZNXTDLVL               ; 8,4,2,1; 16,8,4,2; 24,12,6,3; ETC.
    90
    91 F46B A9 03		          LDA     #3                     ;3 SHIPS FOR EACH PLAYER
    92 F46D 85 52		          STA     MENLEFT
    93 F46F 85 53		          STA     MENLEFT+1
    94 F471 A9 06		          LDA     #6                     ;6 FOR TEAM PLAY
    95 F473 85 54		          STA     MENLEFT+2
    96
    97 F475 A9 FF		          LDA     #$FF                   ;INITIALIZE FOR BOTH PLAYERS
    98 F477 85 C3		          STA     RACKNUM
    99 F479 85 C4		          STA     RACKNUM+1
   100 F47B 85 FD		          STA     RUBFLAG                ;PRIME 'RUBBER SHIP' FLAG
   101
   102 F47D A9 00		          LDA     #0
   103 F47F 85 C5		          STA     ROCKTOT
   104 F481 85 C6		          STA     ROCKTOT+1
   105 F483 85 79		          STA     PLAYER
   106 F485 85 8B		          STA     OFFPLAY2
   107 F487 85 C1		          STA     SHIPDIR
   108 F489 85 C2		          STA     SHIPDIR2
   109 F48B 85 FB		          STA     RACKDLY
   110 F48D 85 FC		          STA     COMPFLAG
   111
   112 F48F A9 01		          LDA     #BIRTH                 ;START PLAYER 1 AS BIRTH
   113 F491 85 7E		          STA     STATE
   114
   115 F493 A9 20		          LDA     #$20                   ;EVERYBODY STARTS AT LEVEL $20
   116 F495 85 89		          STA     LEVEL
   117 F497 85 8A		          STA     LEVEL+1
   118
   119 F499 A5 82		          LDA     MODE
   120 F49B 10 09		          BPL     ZSETTWO
   121
   122 F49D A9 FF		          LDA     #DEAD                  ;IN ONE PLAYER GAME,
   123 F49F 85 7F		          STA     STATE+1                ; OTHER PLAYER IS DEAD.
   124
   125 F4A1 A9 39		          LDA     #RESINT+$10            ;START PLAYER 1 AT RESINT+10
   126 F4A3 85 80		          STA     TIMER
   127 F4A5 60			          RTS
   128
   129 F4A6 A9 01		ZSETTWO:  LDA     #BIRTH                 ;IN > 1 PLAYER GAME,
   130 F4A8 85 7F		          STA     STATE+1                ; SECOND PLAYER WILL BE BORN.
   131
   132 F4AA A9 7A		          LDA     #PMSGT+1               ;TWO AND TEAM PLAY
   133 F4AC 85 80		          STA     TIMER
   134 F4AE 85 81		          STA     TIMER+1
   135 F4B0 60			          RTS
   136
   137 F4B1 40 60 80 DF		MAXLVLS:  .byte   $40,$60,$80,$DF        ;$DF = "AVOID WRAP" WHEN ADDING $20!
   138
   139 				** ROUTINES THAT USED TO BE IN MAIN.S **
   140
   141 				* ZERO OUT RAM. *
   142 				* ZERO OUT MEMORY PAGES 1F-18
   143 F4B5 A9 00		ZERORAM:  LDA     #0
   144 F4B7 A8			          TAY
   145 F4B8 85 55		          STA     TEMP                   ;LOADDR ALWAYS = 0 (Y IS LOADDR INDEX)
   146
   147 F4BA A2 1F		          LDX     #$1F                   ;START WITH PAGE 1F
   148 F4BC 86 56		NEXTX:    STX     TEMP+1
   149
   150 				          ; ZAP ONE PAGE:
   151 F4BE 91 55		NEXTY:    STA     (TEMP),Y
   152 F4C0 88			          DEY
   153 F4C1 D0 FB		          BNE     NEXTY
   154
   155 				          ; MOVE ON TO NEXT PAGE
   156 F4C3 CA			          DEX
   157 F4C4 E0 17		          CPX     #$17                   ;DON'T GO INTO PAGE 17
   158 F4C6 D0 F4		          BNE     NEXTX
   159
   160 				* ZERO OUT THE ZEROPAGE (FF-86), BUT NOT THE RANDOMS (40-41)
   161 F4C8 A2 BE		          LDX     #$BE
   162 F4CA 95 41		ZPLOOP:   STA     $41,X
   163 F4CC CA			          DEX
   164 F4CD D0 FB		          BNE     ZPLOOP
   165 F4CF 60			          RTS
   166
   167 				* LOAD UP SOFTWARE COPY OF COLOR RAM FROM ROM COLORS
   168 F4D0 A2 0F		INITPALS: LDX     #$0F
   169 F4D2 BD F1 FC		ZNITPALS: LDA     COLORS,X
   170 F4D5 95 E8		          STA     SOFTCOLR,X
   171 F4D7 CA			          DEX
   172 F4D8 10 F8		          BPL     ZNITPALS
   173 F4DA 60			          RTS
   174
   175 				* NULL OUT ALL THE OBJECTS. *
   176 F4DB A2 23		NULLOBJS: LDX     #35                    ;NULL OUT OBJECTS
   177 F4DD A9 FF		          LDA     #$FF
   178 F4DF 95 8C		NEWNULL:  STA     STATUS,X
   179 F4E1 9D 00 18		          STA     STATUS2,X
   180 F4E4 CA			          DEX
   181 F4E5 10 F8		          BPL     NEWNULL
   182 F4E7 60			          RTS
   183
   184
   185 				* SET UP MARIA 2 LISTS, DUMMY DL HEADER FOR BLANK ZONES AT TOP AND BOTTOM,
   186 				* SET UP DUMMY DL HEADER FOR TOP AND BOTTOM OF SCREEN:
   187 F4E8			INITDMA:
   188 				*         BUILD DLL.  ACTUALLLY, JUST COPY ROM TABLE INTO FASTER RAM.
   189 F4E8 A2 33		          LDX     #$33                   ;TABLE IS $33 BYTES LONG
   190 F4EA BD BE FC		ZDLLOP:   LDA     DLLTAB,X
   191 F4ED 9D 98 1A		          STA     DLL,X
   192 F4F0 CA			          DEX
   193 F4F1 10 F7		          BPL     ZDLLOP
   194
   195 				*         WAIT 'TILL VBLANK BEFORE DOING DELICATE OPERATIONS
   196 F4F3 24 28		ZDODMA:   BIT     MSTAT
   197 F4F5 10 FC		          BPL     ZDODMA
   198
   199 F4F7 A9 98		          LDA     #DLL&255                ;POINT DPP TO DLL
   200 F4F9 85 30		          STA     DPPL
   201 F4FB A9 1A		          LDA     #DLL>>8
   202 F4FD 85 2C		          STA     DPPH
   203
   204 F4FF A9 00		          LDA     #0
   205 F501 8D 97 1A		          STA     BLANKDL+1              ;SECOND BYTE ZERO = END OF DMA
   206 F504 85 78		          STA     NMICTRL                ;TELL NMI HANDLER TO DO NORMAL DLI'S
   207
   208 F506 A9 E0		          LDA     #CHARS>>8            ;POINT CHARBASE TO OUR CHARACTERS
   209 F508 85 34		          STA     CHARBASE
   210
   211 F50A A9 40		          LDA     #$40                   ;TURN ON DMA
   212 F50C 85 3C		          STA     CTRL
   213
   214 F50E 60			          RTS
    43 F50F				icl	"UFO.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\UFO.asm
     1 				*	    2035    030784
     2 				*
     3 				*
     4 				** UFO.S **
     5 				** ASTEROIDS FOR THE ATARI 3600 **
     6 				** THIS FILE CONTAINS THE UFO HANDLING ROUTINE **
     7 				**
     8 				** TRASHES: X, Y, AC AND FIRST 7 BYTES OF TEMP.
     9
    10 F50F			URTS:
    11 F50F 60				RTS
    12 F510			UFO:
    13 F510 A5 A5			LDA	STATUS+25	;CHECK STATUS OF UFO
    14 F512 30 03			BMI	TOOFAR
    15 F514 4C C4 F5			JMP	NOTNEW		;DON'T INITIALIZE IF ALREADY EXISTS
    16 F517			TOOFAR:
    17 F517 C9 FF			CMP	#$FF		;IF HE'S BLOWING UP, DO NOTHING TILL
    18 F519 D0 F4			BNE	URTS		; HE'S DEAD.
    19
    20 F51B A5 83			LDA	DIFF		;IF NOVICE THEN NO UFO
    21 F51D F0 F0			BEQ	URTS
    22 F51F A5 82			LDA	MODE		;CHECK STATUS OF SHIPS
    23 F521 C9 01			CMP	#1
    24 F523 30 08			BMI	NOTTEAM
    25 F525 A5 7E			LDA	STATE
    26 F527 25 7F			AND	STATE+1
    27 F529 D0 E4			BNE	URTS
    28
    29 F52B F0 06			BEQ	BRINGOUT	;BEQ = JMP
    30
    31 F52D			NOTTEAM:
    32 F52D A6 79			LDX	PLAYER
    33 F52F B5 7E			LDA	STATE,X
    34 F531 D0 DC			BNE	URTS
    35
    36 F533			BRINGOUT:
    37 F533 A5 76			LDA	FRMCNT		;EVERY FORTH FRAME
    38 F535 29 02			AND	#2
    39 F537 D0 D6			BNE	URTS
    40
    41 F539 A6 79			LDX	PLAYER
    42 F53B B5 C5			LDA	ROCKTOT,X	;DON'T BRING OUT UFO IF NO ROCKS.
    43 F53D F0 D0			BEQ	URTS
    44
    45 F53F A4 E4			LDY	RTIMER		;DEC RTIMER, BUT PEG AT ZERO
    46 F541 F0 02			BEQ	Z2
    47 F543 C6 E4			DEC	RTIMER
    48 F545			Z2:
    49 F545 C6 E6			DEC	EDELAY
    50 F547 D0 C6			BNE	URTS
    51 F549 E6 E6			INC	EDELAY		;HOLD AT ONE
    52
    53 F54B C0 00			CPY	#0		;DON'T CARE NUM ROCKS IF RTIMER=0
    54 F54D F0 04			BEQ	LOGG
    55 F54F D5 C7			CMP	STARTNUM,X	;OR OVER NUMBER TO START
    56 F551 B0 BC			BCS	URTS
    57
    58 					;NEW UFO TIME!
    59 F553			LOGG:
    60 F553 A5 E5			LDA	SDELAY		;EVERY TIME UFO GOES REDUCE SDELAY
    61 F555 38				SEC
    62 F556 E9 06			SBC	#6
    63 F558 C9 14			CMP	#20
    64 F55A 90 02			BCC	DIES
    65 F55C 85 E5			STA	SDELAY
    66 F55E			DIES:
    67 F55E A5 E5			LDA	SDELAY
    68 F560 85 E6			STA	EDELAY
    69
    70 F562 A9 15			LDA	#$15		;INITIALIZE SHOT REPEATER
    71 F564 85 E3			STA	USHOTCNT
    72
    73 F566 20 B2 F8			JSR	NEWRAND		;SET Y POSITION TO RANDOM #
    74 F569 4A				LSR			; BETWEEN $10 AND $10+$7F
    75 F56A 69 10			ADC	#$10		; (KEEP AWAY FROM TOP AND BOTTOM)
    76 F56C 8D E1 18			STA	YPOSH+25
    77
    78 F56F AE 2A FD			LDX	PALTAB+25	;LOADER MUST USE CORRECT PAL/WIDTH
    79 F572 A5 82			LDA	MODE
    80 F574 C9 01			CMP	#1
    81 F576 D0 04			BNE	ONE
    82 F578 A0 08			LDY	#8
    83 F57A 10 05			BPL	TWO
    84 F57C			ONE:
    85 F57C A5 79			LDA	PLAYER	; CHECK SCORE
    86 F57E 0A				ASL
    87 F57F 0A				ASL
    88 F580 A8				TAY
    89 F581			TWO:
    90 F581 B9 47 00			LDA	SCORE+1,Y
    91 F584 C9 02			CMP	#2
    92 F586 B0 10			BCS	MRBILL		; IF MORE THAN 30K THAN MR BILL
    93 F588 A5 E5			LDA	SDELAY		;IF SDELAY IS BIG THEN SLUGGO
    94 F58A 30 11			BMI	SLUGGO
    95 F58C 20 B2 F8			JSR	NEWRAND
    96 F58F 85 55			STA	TEMP
    97 F591 A5 E5			LDA	SDELAY
    98 F593 4A				LSR
    99 F594 C5 55			CMP	TEMP
   100 F596 B0 05			BCS	SLUGGO
   101 F598			MRBILL:
   102 F598 E8				INX			;ADD ONE FOR SMALLER WIDTH STAMP
   103 F599 A0 14			LDY	#SMALLUFO
   104 F59B D0 02			BNE	NEWUFO		;UNCONDITIONAL BRANCH
   105 F59D			SLUGGO:
   106 F59D A0 25			LDY	#LARGEUFO
   107
   108 F59F			NEWUFO:
   109 F59F 84 A5			STY	STATUS+25
   110 F5A1 8E E4 1A			STX	PALS+25
   111 F5A4 20 B2 F8			JSR	NEWRAND		;GOING RIGHT OR LEFT?
   112 F5A7 4A				LSR			; SHIFT A RANDOM BIT INTO CARRY
   113 F5A8 90 09			BCC	GORIGHT		; IF BIT 0, GO RIGHT TO LEFT
   114 F5AA A9 A3			LDA	#XPOSMAX+4	; ELSE LEFT TO RIGHT.
   115 F5AC 8D BD 18			STA	XPOSH+25
   116 F5AF A9 FF			LDA	#(-1)&255	; XVEL -1 = LEFT TO RIGHT.
   117 F5B1 30 07			BMI	STORXVEL
   118 F5B3			GORIGHT:
   119 F5B3 A9 FC			LDA	#(XPOSMIN-4)&255
   120 F5B5 8D BD 18			STA	XPOSH+25
   121 F5B8 A9 01			LDA	#1		; XVEL 1 = RIGHT TO LEFT
   122 F5BA			STORXVEL:
   123 F5BA 8D 5A 18			STA	XVELH+25
   124 F5BD A9 00			LDA	#0		; LO BYTE OF XVEL SET TO ZERO
   125 F5BF 8D 39 18			STA	XVELL+25
   126 F5C2 F0 22			BEQ	ZYVEL		;INITIALLY UFO HAS ZERO Y VELOCITY
   127
   128 F5C4			NOTNEW:
   129 F5C4 A5 76			LDA	FRMCNT
   130 F5C6 C9 FE			CMP	#$FE
   131 F5C8 90 34			BCC	NOCHNGY		;CHANGE Y VELOCITY ONLY PERIODICALLY
   132 F5CA A5 83			LDA	DIFF		;FOR INTER ALWAYS STRAIGHT ACROSS
   133 F5CC C9 01			CMP	#1
   134 F5CE F0 16			BEQ	ZYVEL
   135 F5D0 20 B2 F8			JSR	NEWRAND		;GET NEW RANDOM VALUE
   136 F5D3 C9 AA			CMP	#$AA	
   137 F5D5 B0 19			BCS	MOVEDN		;ONE THIRD OF THE TIME MOVE DOWN
   138 F5D7 C9 55			CMP	#$55
   139 F5D9 B0 19			BCS	MOVEUP		;ONE THIRD MOVE UP
   140 					;DON'T GO STRAIGHT IF TOO CLOSE TO TOP OR BOTTOM: AVOID CLIPPED UFO
   141 F5DB AD E1 18			LDA	YPOSH+25
   142 F5DE C9 AB			CMP	#YPOSMAX-20
   143 F5E0 B0 1C			BCS	NOCHNGY
   144 F5E2 C9 0A			CMP	#YPOSMIN+10
   145 F5E4 90 18			BCC	NOCHNGY
   146 F5E6			ZYVEL:
   147 F5E6 A9 00			LDA	#0		;ONE THIRD GO STRAIGHT ACROSS
   148 F5E8 8D 9C 18			STA	YVELH+25
   149 F5EB 8D 7B 18			STA	YVELL+25
   150 F5EE F0 0E			BEQ	NOCHNGY
   151 F5F0			MOVEDN:
   152 F5F0 A9 FF			LDA	#(-1)&255
   153 F5F2 30 02			BMI	STORYVEL	;BMI = JMP
   154 F5F4			MOVEUP:
   155 F5F4 A9 01			LDA	#1
   156 F5F6			STORYVEL:
   157 F5F6 8D 9C 18			STA	YVELH+25	;STORE Y VELOCITY
   158 F5F9 A9 00			LDA	#0
   159 F5FB 8D 7B 18			STA	YVELL+25
   160 F5FE			NOCHNGY:
   161 F5FE AD 5A 18			LDA	XVELH+25	;CHECK IF UFO GOES OFF THE SCREEN
   162 F601 18				CLC
   163 F602 6D BD 18			ADC	XPOSH+25
   164 F605 C9 A3			CMP	#XPOSMAX+4	;UFO GOES PAST RIGHT?
   165 F607 90 13			BCC	UCHKSHOT	; NO.  CHECK IF HE MAY SHOOT.
   166 F609 C9 FD			CMP	#(XPOSMIN-3)&255	;UFO GOES PAST LEFT?
   167 F60B B0 0F			BCS	UCHKSHOT	; NO.  CHECK IF HE MAY SHOOT.
   168 F60D			UFODONE:
   169 F60D A9 FF			LDA	#$FF		;UFO HAS GONE OFF SCREEN: NUKE HIM
   170 F60F 85 A5			STA	STATUS+25
   171 F611 A9 08			LDA	#$08		;KILL UFO TUNES
   172 F613 20 B7 F1			JSR	KILLTUNE
   173 F616 A9 09			LDA	#$09
   174 F618 20 B7 F1			JSR	KILLTUNE
   175 F61B 60				RTS
   176
   177 				* CHECK TO SEE IF WE SHOULD FIRE NOW
   178 F61C			UCHKSHOT:
   179 F61C A2 01			LDX	#1		;HAVE 2 UFO SHOTS TO USE
   180 F61E			UFOSHOT:
   181 F61E B5 A6			LDA	STATUS+26,X	;TEST SHOT STATUS
   182 F620 30 05			BMI	ADDUSHOT	;SEE IF SHOT IS ALREADY ON SCREEN
   183 F622 CA				DEX			;YES, TRY OTHER SHOT
   184 F623 10 F9			BPL	UFOSHOT
   185 F625 30 59			BMI	UANIMATE	;NO MORE SHOTS, JUMP TO VARY STAMPS
   186
   187 F627			ADDUSHOT:
   188 F627 C6 E3			DEC	USHOTCNT	;CHECK COUNTER FOR NEXT SHOT
   189 F629 D0 55			BNE	UANIMATE	;NOT TIME YET, JUMP TO VARY STAMPS
   190 F62B A9 20			LDA	#$20		;RESET COUNTER
   191 F62D 85 E3			STA	USHOTCNT
   192 F62F A9 06			LDA	#SHOT		;STORE STATUS AS SHOT
   193 F631 95 A6			STA	STATUS+26,X
   194 F633 A9 EC			LDA	#$EC		;STORE COUNTER VALUE
   195 F635 95 DD			STA	SHOTCNT,X
   196 F637 AD 8B 19			LDA	COLXPOSH+25	;STORE SHOT POSITION AS CENTER OF UFO
   197 F63A C9 9F			CMP	#XPOSMAX
   198 F63C 90 02			BCC	USTXPOS
   199 F63E E9 9F			SBC	#XPOSMAX
   200 F640			USTXPOS:
   201 F640 9D BE 18			STA	XPOSH+26,X
   202 F643 AD B7 19			LDA	COLYPOSH+25
   203 F646 C9 BF			CMP	#YPOSMAX
   204 F648 90 02			BCC	USTYPOS
   205 F64A E9 BF			SBC	#YPOSMAX
   206 F64C			USTYPOS:
   207 F64C 9D E2 18			STA	YPOSH+26,X
   208 F64F A9 00			LDA	#00
   209 F651 9D 06 19			STA	XPOSL+26,X
   210 F654 9D 27 19			STA	YPOSL+26,X
   211
   212 F657 A5 A5			LDA	STATUS+25	;DETERMINE HOW TO SHOOT
   213 F659 C9 14			CMP	#SMALLUFO
   214 F65B F0 3D			BEQ	AIMSHOT		;MR. BILL AIMS HIS SHOTS
   215 F65D 20 B2 F8			JSR	NEWRAND		;SLUGGO IS RANDOM
   216 F660			USHOOT:
   217 F660 29 1F			AND	#$1F
   218 F662 A8				TAY
   219 F663 B9 67 F7			LDA	HUSHVCTX,Y
   220 F666 9D 5B 18			STA	XVELH+26,X
   221 F669 B9 87 F7			LDA	USHVCTX,Y
   222 F66C 9D 3A 18			STA	XVELL+26,X
   223 F66F B9 A7 F7			LDA	HUSHVCTY,Y
   224 F672 9D 9D 18			STA	YVELH+26,X
   225 F675 B9 C7 F7			LDA	USHVCTY,Y
   226 F678 9D 7C 18			STA	YVELL+26,X
   227 F67B A9 0D			LDA	#$0D		;PLAY UFO SHOT SOUND
   228 F67D 20 70 F1			JSR	DOTUNE
   229
   230 F680			UANIMATE:
   231 F680 A5 76			LDA	FRMCNT		;VARY UFO STAMPS WITH TIME
   232 F682 4A				LSR
   233 F683 4A				LSR
   234 F684 29 03			AND	#$3		;MASK ALL BUT 2 LSBITS
   235
   236 F686 A4 A5			LDY	STATUS+25	;WHICH TYPE?
   237 F688 C0 14			CPY	#SMALLUFO
   238 F68A F0 07			BEQ	UANIMSM
   239 F68C 0A				ASL			;BIG UFO HAS 2 BYTES PER ANIMATION
   240 F68D 18				CLC
   241 F68E 69 E1			ADC	#UFOL1 & 255	;ADD IN POINTER TO BASE OF LARGE UFO
   242 F690 4C 96 F6			JMP	USTACYC
   243 F693			UANIMSM:
   244 F693 18				CLC
   245 F694 69 E9			ADC	#UFOS1 & 255
   246 F696			USTACYC:
   247 F696 8D 47 19			STA	ACYC+25		;STORE ANIMATION FRAME POINTER
   248 F699 60				RTS
   249
   250 F69A			AIMSHOT:
   251 				* INITIALIZE FLAGS FOR OCTANT SELECTION
   252 F69A A9 00			LDA	#0
   253 F69C 85 57			STA	TEMP+2		;UDXNEG
   254 F69E 85 58			STA	TEMP+3		;UDYNEG
   255 F6A0 85 59			STA	TEMP+4		;UDIAGNEG
   256
   257 				* DETERMINE WHICH SHIP TO SHOOT AT
   258 F6A2 A5 82			LDA	MODE
   259 F6A4 C9 01			CMP	#1
   260 F6A6 30 18			BMI	ZNOTTEAM	;ISSOLATE CASE OF TEAM PLAY
   261
   262 F6A8			ZTEAM:
   263 F6A8 A5 7E			LDA	STATE		;SEE IF BOTH ALIVE
   264 F6AA 25 7F			AND	STATE+1
   265 F6AC F0 08			BEQ	PICKSRAN
   266 F6AE A5 7E			LDA	STATE		;NO, SEE WHICH IS, KNOW AT LEAST 1 IS
   267 F6B0 D0 0A			BNE	AIMSHIP2
   268
   269 F6B2			AIMSHIP1:
   270 F6B2 A0 00			LDY	#0		;AIM AT SHIP 1
   271 F6B4 10 0C			BPL	COMPVECT	;BPL = JMP
   272
   273 F6B6			PICKSRAN:
   274 F6B6 20 B2 F8			JSR	NEWRAND		;PICK A SHIP RANDOMLY
   275 F6B9 0A				ASL			;WE'RE SUCH ASL'S
   276 F6BA 90 F6			BCC	AIMSHIP1
   277
   278 F6BC			AIMSHIP2:
   279 F6BC A0 08			LDY	#8		;AIM AT SHIP 2
   280 F6BE 10 02			BPL	COMPVECT	;BPL = JMP HERE
   281
   282 F6C0			ZNOTTEAM:
   283 F6C0 A4 8B			LDY	OFFPLAY2
   284
   285 				* COMPUTE VECTORS
   286 F6C2			COMPVECT:
   287 F6C2 B9 8A 19			LDA	COLXPOSH+24,Y
   288 F6C5 38				SEC
   289 F6C6 ED 8B 19			SBC	COLXPOSH+25	;SUBTRACT UFO'S POSITION TO GET 'DX'
   290 F6C9 B0 06			BCS	UDXPOS
   291 F6CB E6 57			INC	TEMP+2
   292 F6CD 49 FF			EOR	#$FF
   293 				;	CLC			;CARRY IS CLEAR ALREADY
   294 F6CF 69 01			ADC	#1
   295 F6D1			UDXPOS:
   296 F6D1 85 55			STA	TEMP		;SAVE DX
   297
   298 F6D3 B9 B6 19			LDA	COLYPOSH+24,Y
   299 F6D6 38				SEC
   300 F6D7 ED B7 19			SBC	COLYPOSH+25	;SUBTRACT UFO'S POSITION TO GET 'DY'
   301 F6DA B0 06			BCS	UDYPOS
   302 F6DC E6 58			INC	TEMP+3
   303 F6DE 49 FF			EOR	#$FF
   304 				;	CLC
   305 F6E0 69 01			ADC	#1
   306 F6E2			UDYPOS:
   307 F6E2 85 56			STA	TEMP+1		;SAVE DY
   308
   309 				* NORMALIZE VECTOR TO CORRECT FOR ASPECT RATIO.  WE ALSO SCALE DOWN TO AVOID
   310 				* OVERFLOW.  ALSO, FLIP THE VECTOR TO THE FIRST OCTANT (ABOVE THE LINE Y = X).
   311 F6E4 4A				LSR			;5/8 = 1/2 + 1/8
   312 F6E5 85 5A			STA	TEMP+5
   313 F6E7 4A				LSR
   314 F6E8 4A				LSR
   315 F6E9 18				CLC
   316 F6EA 65 5A			ADC	TEMP+5
   317 F6EC C5 55			CMP	TEMP
   318 F6EE B0 07			BCS	UDIAGOK		;ON CORRECT SIDE OF DIAGONAL Y = X.
   319 F6F0 E6 59			INC	TEMP+4		;NOT ON CORRECT SIDE:
   320 F6F2 A8				TAY			; SWAP DX AND DY
   321 F6F3 A5 55			LDA	TEMP
   322 F6F5 84 55			STY	TEMP
   323 F6F7			UDIAGOK:
   324 F6F7 4A				LSR			;SCALE    DY <- DY / 4
   325 F6F8 4A				LSR
   326 F6F9 85 56			STA	TEMP+1
   327
   328 				* COMPUTE AND SAVE "3/8 DX", TO BE USED BELOW.
   329 F6FB A5 55			LDA	TEMP		;TEMP+6 <- DX/4 + DX/8
   330 F6FD 4A				LSR
   331 F6FE 4A				LSR
   332 F6FF 85 5A			STA	TEMP+5
   333 F701 4A				LSR
   334 F702 18				CLC
   335 F703 65 5A			ADC	TEMP+5
   336 F705 85 5B			STA	TEMP+6
   337
   338 				* COMPUTE CORRECT SECTOR (32TH OF CIRCLE) IN Y.
   339 				* FIRST, FIGURE OUT WHICH 16TH OF THE CIRCLE.
   340 				* WE USE THE 68.2 DEGREE LINE, 'CAUSE IT'S EASIER TO COMPUTE (ATAN(5/8 / 2/8)).
   341 F707 A5 55			LDA	TEMP		;5/8 = 1/2 + 1/8
   342 F709 4A				LSR
   343 F70A 85 5A			STA	TEMP+5
   344 F70C 4A				LSR
   345 F70D 4A				LSR
   346 F70E 18				CLC
   347 F70F 65 5A			ADC	TEMP+5
   348
   349 F711 A0 00			LDY	#0
   350 F713 C5 56			CMP	TEMP+1
   351 F715 90 06			BCC	SECTOR01
   352 F717 A0 02			LDY	#2		;SECTOR 2 OR 3
   353 F719 A9 00			LDA	#0
   354 F71B F0 02			BEQ	SECTOR23	;UNCONDITIONAL BRANCH
   355 F71D			SECTOR01:
   356 F71D A5 55			LDA	TEMP
   357 F71F			SECTOR23:
   358 F71F 18				CLC
   359 F720 65 5B			ADC	TEMP+6		;1 +  3/8 = 11/8
   360 F722 C5 56			CMP	TEMP+1
   361 F724 90 01			BCC	SECTOR02
   362 F726			SECTOR13:
   363 F726 C8				INY
   364 F727			SECTOR02:
   365 F727 84 55			STY	TEMP
   366
   367 				* UNFOLD VECTOR INTO CORRECT OCTANT, QUADRANT AND HALF-SPACE
   368 F729 A4 59			LDY	TEMP+4		;CHECK UDIAGNEG
   369 F72B F0 07			BEQ	NODIAGN
   370 F72D A9 07			LDA	#7
   371 F72F 38				SEC
   372 F730 E5 55			SBC	TEMP
   373 F732 85 55			STA	TEMP
   374 F734			NODIAGN:
   375 F734 A4 58			LDY	TEMP+3		;CHECK UDYNEG
   376 F736 F0 07			BEQ	NODYNEG
   377 F738 A9 0F			LDA	#15
   378 F73A 38				SEC
   379 F73B E5 55			SBC	TEMP
   380 F73D 85 55			STA	TEMP
   381 F73F			NODYNEG:
   382 F73F A4 57			LDY	TEMP+2		;CHECK UDXNEG
   383 F741 F0 07			BEQ	NODXNEG
   384 F743 A9 1F			LDA	#31
   385 F745 38				SEC
   386 F746 E5 55			SBC	TEMP
   387 F748 85 55			STA	TEMP
   388 F74A			NODXNEG:
   389 					; PERTERB VECTOR BY RANDOM NUMBER OF INDEX NOTCHES.
   390 F74A A5 E7			LDA	UFOACC		;COMPUTE UFOACC / 2
   391 F74C 4A				LSR
   392 F74D 85 5B			STA	TEMP+6
   393
   394 F74F			UTOOPOOR:
   395 F74F 20 B2 F8			JSR	NEWRAND
   396 F752 A4 5B			LDY	TEMP+6
   397 F754 39 62 F7			AND	UFOPMASK-1,Y	;TABLE IS 1-ORIGIN (Y > 0)
   398 F757 C5 E7			CMP	UFOACC
   399 F759 B0 F4			BCS	UTOOPOOR	;TOO POOR A SHOT, TRY AGAIN
   400
   401 				;	CLC			;CARRY IS CLEAR
   402 F75B 65 55			ADC	TEMP		;ADD TO PRECISE VECTOR
   403 F75D 38				SEC
   404 F75E E5 5B			SBC	TEMP+6		;SUBTRACT UFOACC/2 (OFFSET)
   405 F760 4C 60 F6			JMP	USHOOT
   406
   407 F763			UFOPMASK:
   408 F763 03 07 07 0F			.byte	$03,$07,$07,$0F	;RANGE MASKS FOR RANDOM #'S
   409
   410
   411 				* UFO SHOT VECTORS.
   412 F767			HUSHVCTX:
   413 F767 00 00 01 02 03 03 + 	.byte	$00,$00,$01,$02,$03,$03,$04,$04
   414 F76F 04 04 04 03 03 02 + 	.byte	$04,$04,$04,$03,$03,$02,$01,$00
   415 F777 00 FF FE FD FC FC + 	.byte	$00,$FF,$FE,$FD,$FC,$FC,$FB,$FB
   416 F77F FB FB FB FC FC FD + 	.byte	$FB,$FB,$FB,$FC,$FC,$FD,$FE,$FF
   417
   418 F787			USHVCTX:
   419 F787 00 DB AD 6E 18 A3 + 	.byte	$00,$DB,$AD,$6E,$18,$A3,$0B,$4A
   420 F78F 60 4A 0B A3 18 6E + 	.byte	$60,$4A,$0B,$A3,$18,$6E,$AD,$DB
   421 F797 00 26 54 93 E9 5E + 	.byte	$00,$26,$54,$93,$E9,$5E,$F6,$B7
   422 F79F A1 B7 F6 5E E9 93 + 	.byte	$A1,$B7,$F6,$5E,$E9,$93,$54,$26
   423
   424 F7A7			HUSHVCTY:
   425 F7A7 07 06 06 05 04 03 + 	.byte	$07,$06,$06,$05,$04,$03,$02,$01
   426 F7AF 00 FE FD FC FB FA + 	.byte	$00,$FE,$FD,$FC,$FB,$FA,$F9,$F9
   427 F7B7 F9 F9 F9 FA FB FC + 	.byte	$F9,$F9,$F9,$FA,$FB,$FC,$FD,$FE
   428 F7BF 00 01 02 03 04 05 + 	.byte	$00,$01,$02,$03,$04,$05,$06,$06
   429
   430 F7C7			USHVCTY:
   431 F7C7 00 DE 78 D2 F3 E4 + 	.byte	$00,$DE,$78,$D2,$F3,$E4,$AE,$5E
   432 F7CF 00 A3 53 1D 0E 2F + 	.byte	$00,$A3,$53,$1D,$0E,$2F,$89,$23
   433 F7D7 01 23 89 2F 0E 1D + 	.byte	$01,$23,$89,$2F,$0E,$1D,$53,$A3
   434 F7DF 00 5E AE E4 F3 D2 + 	.byte	$00,$5E,$AE,$E4,$F3,$D2,$78,$DE
   435
   436 F7E7 01 23 89 2F 0E 1D + 	.byte	$01,$23,$89,$2F,$0E,$1D,$53,$A3
   437 F7EF 00 5E AE E4 F3 D2 + 	.byte	$00,$5E,$AE,$E4,$F3,$D2,$78,$DE
   438
    44 F7F7				icl	"UTILS.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\UTILS.asm
     1 				*         1850    030784
     2 				*
     3 				** UTILS.S *
     4 				** ASTEROIDS FOR THE ATARI 3600 **
     5 				** THIS FILE CONTAINS UTILITY PROGRAMS. **
     6 				*
     7 				** PRESENTLY CONTAINS - 
     8 				*
     9 				*         GAME PLAY LOOP                 *
    10 				*         DIFFICULTY LEVEL INC ROUTINE   *
    11 				*         RANDOM NUMBER ROUTINES         *
    12 				*         SAFETY BOX CHECK ROUTINE       *
    13 				*         FLIP PLAYER ROUTINE            *
    14 				*         STAR TWINKLER                  *
    15 				*         ICON SETUP ROUTINE             *
    16 				*         PAINT SHIP ROUTINE             *
    17 				*         WAIT FOR LOADER ROUTINE        *
    18 				*
    19
    20
    21 				** BASIC GAME PLAY LOOP. **
    22
    23 F7F7			GAMELOOP:
    24 					;SET DIFFICULTY LEVELS
    25 F7F7 A6 79			LDX	PLAYER
    26 F7F9 B5 89			LDA	LEVEL,X
    27 F7FB 8D 91 1A			STA	MINYVEL		;SET MINYVEL AND MINXVEL
    28 F7FE 4A				LSR
    29 F7FF 8D 90 1A			STA	MINXVEL
    30
    31 F802 B5 C5			LDA	ROCKTOT,X	;CONTINUE UNTIL ROCKTOT = 0
    32 F804 D0 65			BNE	GAMEPLAY
    33 F806 A5 A5			LDA	STATUS+25	;WAIT FOR UFO TO LEAVE BEFORE NEW RACK
    34 F808 C9 FF			CMP	#$FF		;FF = NON-EXISTANT
    35 F80A D0 5F			BNE	GAMEPLAY	;IF HE EXISTS, JUST WAIT IN GAMEPLAY
    36 F80C A5 7E			LDA	STATE		;IF EITHER PLAYER IS IN STATE 0 OR 1
    37 F80E 25 7F			AND	STATE+1		; (THAT IS, OK OR BIRTH)
    38 F810 C9 02			CMP	#2		; THEN THIS 'AND' WILL BE LESS THAN 2
    39 F812 B0 57			BCS	GAMEPLAY	; IF IT ISN'T, THEN WAIT IN GAMEPLAY
    40 F814 A5 82			LDA	MODE
    41 F816 D0 07			BNE	ZDECRDLY	;IN TWO PLAYER, DON'T CREATE ROCKS
    42 F818 A4 8B			LDY	OFFPLAY2	; IF CURRENT PLAYER IS DEAD, SO AS
    43 F81A B9 A4 00			LDA	STATUS+24,Y	; NOT TO CREATE ROCKS AND IMMEDIATELY
    44 F81D 30 4C			BMI	GAMEPLAY	; SWITCH THEM OUT.
    45 F81F			ZDECRDLY:
    46 F81F C6 FB			DEC	RACKDLY		;DON'T DO NEW RACK 'TILL DLY OVER
    47 F821 10 48			BPL	GAMEPLAY	;LET THE SHOW GO ON !
    48 F823 A9 25			LDA	#RACKDLYC	;PRIME TIMER FOR NEXT RACK
    49 F825 85 FB			STA	RACKDLY
    50 F827 F6 C3			INC	RACKNUM,X	;WHEN =0 NEW RACK
    51
    52 F829 B5 C3			LDA	RACKNUM,X	;SET NUM OF ROCKS TO BE RACKNUM
    53 F82B 18				CLC
    54 F82C 69 02			ADC	#2		;  PLUS TW0
    55 F82E 65 83			ADC	DIFF		;  PLUS DIFF (NOVICE=0,EXPERT=3)
    56 F830 95 C5			STA	ROCKTOT,X
    57 F832 A4 83			LDY	DIFF		;DETERMINE MAX NUMBER OF ROCKS
    58 F834 B9 96 F8			LDA	MAXROCKS,Y
    59 F837 D5 C5			CMP	ROCKTOT,X	; UP TO A MAXIMUM
    60 F839 B0 02			BCS	NEWRACK
    61 F83B 95 C5			STA	ROCKTOT,X
    62
    63 F83D			NEWRACK:
    64 F83D 95 C7			STA	STARTNUM,X
    65 F83F 20 69 FC			JSR	LOADSTAR	;LOAD STARS INTO DISPLAY HEADERS.
    66
    67 F842 A9 01			LDA	#1		;TYPE 1 INCREMENT FOR RACK
    68 F844 20 9E F8			JSR	INCLVL
    69
    70 F847 A9 50			LDA	#$50		;5.2 SEC COUNTER FOR UFO
    71 F849 85 E4			STA	RTIMER
    72 F84B A6 83			LDX	DIFF
    73 F84D BD 9A F8			LDA	UTIMES,X	;UFO
    74 F850 A6 79			LDX	PLAYER
    75 F852 38				SEC
    76 F853 F5 C3			SBC	RACKNUM,X
    77 F855 F5 C3			SBC	RACKNUM,X
    78 F857 F5 C3			SBC	RACKNUM,X
    79 F859 85 E5			STA	SDELAY
    80 F85B 85 E6			STA	EDELAY
    81
    82 F85D A9 09			LDA	#9
    83 F85F 85 E7			STA	UFOACC		;SET ACCURACY DOWN TO MINIMUM
    84 F861 A9 28			LDA	#$28		;INITIALIZE UFO SHOT COUNTDOWN
    85 F863 85 E3			STA	USHOTCNT
    86
    87 F865 20 AE F1			JSR	INITHUMP	;RESET THE HUMP RATE.
    88 F868 20 07 F4			JSR	INITROCK	;INITIALIZE THE ROCKS
    89
    90
    91 F86B			GAMEPLAY:
    92 F86B 20 B3 D6			JSR	FSM		;FINITE STATE MACHINE
    93 F86E 20 2C D3			JSR	JOY		;EXECUTE JOYSTICK INPUTS
    94 F871 A5 82			LDA	MODE		;REPEAT FOR TEAM PLAY MODES
    95 F873 C9 01			CMP	#1
    96 F875 30 0C			BMI	NOTEAM
    97 F877 20 FE F9			JSR	FLIPPLAY	;FLIP PLAYER
    98 F87A 20 B3 D6			JSR	FSM		;REPEAT FOR OTHER PLAYER
    99 F87D 20 2C D3			JSR	JOY
   100 F880 20 FE F9			JSR	FLIPPLAY
   101 F883			NOTEAM:
   102 F883 20 9C F2			JSR	ROCKMOVE	;UPDATE OBJECT MOVEMENT
   103 F886 20 98 F3			JSR	SHOTMOVE	;UPDATE SHOT MOVEMENT
   104 F889 20 92 DA			JSR	COLLIDE		;CHECK COLLISIONS
   105 F88C 20 4F DA			JSR	EXPLODE		;CHECK EXPLOSIONS
   106 F88F 20 10 F5			JSR	UFO		;UPDATE UFO
   107 F892 20 60 F2			JSR	BACKSNDS	;ADD BACKGROUND SOUNDS
   108 F895 60				RTS
   109
   110 F896			MAXROCKS:
   111 F896 08 0C 0E 10			.byte	8,12,14,16	;MAX NUM ROCKS FOR EACH DIFF
   112 F89A			UTIMES:
   113 F89A 00 A7 95 8F			.byte	0,$A7,$95,$8F
   114
   115 				** DIFFICULTY LEVEL INCREMENT ROUTINE **
   116 				** CALLED WITH TYPE OF INCREMENT IN AC, TRASHES Y **
   117 				**	   TYPES: 0 = POINTS, 1 = RACKS, 2 = MR. BILL, 3 = SLUGGO **
   118 F89E			INCLVL:
   119 F89E A8				TAY
   120 F89F B9 85 00			LDA	LVLINC,Y
   121 F8A2 A4 79			LDY	PLAYER
   122 F8A4 18				CLC
   123 F8A5 79 89 00			ADC	LEVEL,Y
   124 F8A8 C5 84			CMP	MAXLVL		;THERE IS ONLY ONE MAX FOR BOTH PLAYERS
   125 F8AA 90 02			BCC	LVLOK
   126 F8AC A5 84			LDA	MAXLVL
   127 F8AE			LVLOK:
   128 F8AE 99 89 00			STA	LEVEL,Y
   129 F8B1 60				RTS
   130
   131 				** RANDOM NUMBER ROUTINES, >NOT< PREVIOUSLY IN RANDOM.S **
   132 				* NEWRAND: A WHOLESOME RANDOM NUMBER JENERATER FROM KNUTH (NOTABLE PEDIGREE)
   133 F8B2			NEWRAND:
   134 F8B2 A4 40			LDY	RANDPTR0	;LOAD Y WITH CONTENTS OF RANDPTR0
   135 F8B4 B9 00 21			LDA	RAND,Y		;LOAD AC WITH RAND INDEXED BY Y
   136 F8B7 18				CLC			;CLEAR THE CARRY
   137 F8B8 A4 41			LDY	RANDPTR1	;LOAD Y WITH CONTENTS OF RANDPTR1
   138 F8BA 79 00 21			ADC	RAND,Y		;ADD RAND INDEXED BY Y TO AC
   139 F8BD A4 40			LDY	RANDPTR0	;GET THE DRIFT?
   140 F8BF 99 00 21			STA	RAND,Y
   141 F8C2 C6 40			DEC	RANDPTR0
   142 F8C4 10 04			BPL	ZR1
   143 F8C6 A0 36			LDY	#54
   144 F8C8 84 40			STY	RANDPTR0
   145 F8CA			ZR1:
   146 F8CA C6 41			DEC	RANDPTR1
   147 F8CC 10 04			BPL	ZR2
   148 F8CE A0 36			LDY	#54
   149 F8D0 84 41			STY	RANDPTR1
   150 F8D2			ZR2:
   151 F8D2 60				RTS
   152
   153
   154 F8D3			RANDPOS:
   155 F8D3 20 B2 F8			JSR	NEWRAND
   156 F8D6 4A				LSR
   157 F8D7 90 10			BCC	HBORDER
   158
   159 F8D9 A9 BF			LDA	#YPOSMAX
   160 F8DB 9D C8 18			STA	YPOSH,X
   161 F8DE			XRANDLOP:
   162 F8DE 20 B2 F8			JSR	NEWRAND
   163 F8E1 C9 99			CMP	#XPOSMAX-6
   164 F8E3 B0 F9			BCS	XRANDLOP
   165 F8E5 9D A4 18			STA	XPOSH,X
   166 F8E8 60				RTS
   167
   168 F8E9			HBORDER:
   169 F8E9 A9 9F			LDA	#XPOSMAX
   170 F8EB 9D A4 18			STA	XPOSH,X
   171 F8EE			YRANDLOP:
   172 F8EE 20 B2 F8			JSR	NEWRAND
   173 F8F1 C9 BF			CMP	#YPOSMAX
   174 F8F3 B0 F9			BCS	YRANDLOP
   175 F8F5 9D C8 18			STA	YPOSH,X
   176 F8F8 60				RTS
   177
   178 F8F9			RANDVEL:
   179 F8F9 20 B2 F8			JSR	NEWRAND
   180 F8FC 2A				ROL			;USE SIGN BIT FOR DIRECTION (L OR R)
   181 F8FD 90 0F			BCC	RNDVXPOS	;X VELOCITY IS POSITIVE
   182 F8FF ED 90 1A			SBC	MINXVEL		;ADD IN MINIMUM VELOCITY
   183 F902 9D 20 18			STA	XVELL,X
   184 F905 A9 FF			LDA	#$FF		;VELOCITY IS NEGATIVE
   185 F907 E9 00			SBC	#0		;TAKE AWAY THE BORROW, IF ANY
   186 F909 9D 41 18			STA	XVELH,X
   187 F90C B0 0C			BCS	RANDVY		;UNCOND. BRANCH
   188 F90E			RNDVXPOS:
   189 F90E 6D 90 1A			ADC	MINXVEL		;ADD IN MINIMUM VELOCITY
   190 F911 9D 20 18			STA	XVELL,X
   191 F914 A9 00			LDA	#0
   192 F916 2A				ROL			;ROL IN THE CARRY, IF ANY
   193 F917 9D 41 18			STA	XVELH,X
   194
   195 F91A			RANDVY:
   196 F91A 20 B2 F8			JSR	NEWRAND
   197 F91D 2A				ROL
   198 F91E 90 0F			BCC	RNDVYPOS
   199 F920 ED 91 1A			SBC	MINYVEL
   200 F923 9D 62 18			STA	YVELL,X
   201 F926 A9 FF			LDA	#$FF
   202 F928 E9 00			SBC	#0
   203 F92A 9D 83 18			STA	YVELH,X
   204 F92D B0 0C			BCS	RANDVRTS
   205 F92F			RNDVYPOS:
   206 F92F 6D 91 1A			ADC	MINYVEL
   207 F932 9D 62 18			STA	YVELL,X
   208 F935 A9 00			LDA	#0
   209 F937 2A				ROL
   210 F938 9D 83 18			STA	YVELH,X
   211
   212 F93B			RANDVRTS:
   213 F93B 60				RTS
   214
   215
   216 				* CHECK IF ANY OBJECT IS IN SAFETY BOX.
   217 				* RETURNS WITH ZERO (Z) BIT SET IF ALL IS CLEAR.
   218 				* WE DON'T WORRY ABOUT CARRIES (LOW PRECISION).
   219 				* DESTROYS: X, Y, AND FIRST 7 BYTES OF TEMP
   220 				* TEMP LAYOUT:    TEMP		    X (OBJECT INDEX)
   221 				*		  TEMP+1		  BOXR (RIGHT HAND BOUNDARY)
   222 				*		  TEMP+2		  BOXL (LEFT HAND BOUNDARY)
   223 				*		  TEMP+3		  BOXTOP (TOP BOUNDARY)
   224 				*		  TEMP+4		  BOXBOT (BOTTOM BOUNDARY)
   225 				*		  TEMP+5		  X WRAP FLAG (1 = WRAP)
   226 				*		  TEMP+6		  Y WRAP FLAG (1 = WRAP)
   227
   228 F93C			ISSAFE:
   229 F93C 86 55			STX	TEMP		;SAVE X WHERE IT MAY BE COMPARED TO Y
   230
   231 F93E A9 00			LDA	#0		;0 MEANS "NO WRAP OF BOX"
   232 F940 85 5A			STA	TEMP+5
   233 F942 85 5B			STA	TEMP+6
   234
   235 F944 BD A4 18			LDA	XPOSH,X		;CHECK RIGHT HAND SIDE OF BOX.
   236 F947 6D B3 F9			ADC	BOXWIDTH	; (SHOULD CLC HERE....)
   237 F94A 85 56			STA	TEMP+1		;BOXR
   238 F94C E9 9F			SBC	#XPOSMAX	;CHECK FOR WRAPAROUND.
   239 F94E 90 04			BCC	BOXROK		; BOX'S RIGHT HAND SIDE: NO WRAP.
   240 F950 E6 5A			INC	TEMP+5		; YES WRAP: SET FLAG
   241 F952 85 56			STA	TEMP+1
   242 F954			BOXROK:
   243
   244 F954 BD A4 18			LDA	XPOSH,X		;CHECK LEFT HAND SIDE OF BOX.
   245 F957 ED B3 F9			SBC	BOXWIDTH
   246 F95A B0 04			BCS	BOXLOK		;CHECK FOR WRAPAROUND.
   247 F95C E6 5A			INC	TEMP+5		; YES WRAP: SET FLAG
   248 F95E 69 9F			ADC	#XPOSMAX	; MOD INTO RANGE
   249 F960			BOXLOK:
   250 F960 85 57			STA	TEMP+2		;  AND SAVE IT (BOXL).
   251
   252
   253 F962 BD C8 18			LDA	YPOSH,X		;CHECK TOP OF BOX.
   254 F965 6D B4 F9			ADC	BOXHIGHT
   255 F968 85 58			STA	TEMP+3
   256 F96A E9 BF			SBC	#YPOSMAX
   257 F96C 90 04			BCC	BOXTOK
   258 F96E E6 5B			INC	TEMP+6
   259 F970 85 58			STA	TEMP+3
   260 F972			BOXTOK:
   261
   262 F972 BD C8 18			LDA	YPOSH,X		;CHECK BOTTOM OF BOX.
   263 F975 ED B4 F9			SBC	BOXHIGHT
   264 F978 B0 04			BCS	BOXBOK
   265 F97A E6 5B			INC	TEMP+6
   266 F97C 69 BF			ADC	#YPOSMAX
   267 F97E			BOXBOK:
   268 F97E 85 59			STA	TEMP+4
   269
   270
   271 F980 A2 20			LDX	#32		;START WITH LAST OBJECT (#32)
   272 F982			NEXTSAFE:
   273 F982 B5 8C			LDA	STATUS,X	;CHECK ITS STATUS:
   274 F984 30 27			BMI	SAFEOK		; IF OBJECT DOESN'T EXIST, IT IS SAFE.
   275
   276 					;FIRST CHECK X COORDS
   277 F986 A9 00			LDA	#0		;CLEAR OUT COMPARISON REGISTER "A"
   278 F988 BC A4 18			LDY	XPOSH,X		;GET OBJECT X'S HORIZ. POSITION
   279 F98B C4 56			CPY	TEMP+1		;COMPARE TO BOXR
   280 F98D 2A				ROL			;ROL BIT INTO A
   281 F98E C4 57			CPY	TEMP+2		;COMPARE TO BOXL
   282 F990 69 00			ADC	#0		;ADD BIT INTO A
   283 F992 45 5A			EOR	TEMP+5		;FLIP LOW BIT WITH X WRAP BIT
   284 F994 6A				ROR			;ROR BIT INTO CARRY
   285 F995 90 16			BCC	SAFEOK		;NO BIT MEANS SAFE (OUTSIDE OF BOX).
   286
   287 					;THEN CHECK Y COORDS
   288 F997 A9 00			LDA	#0
   289 F999 BC C8 18			LDY	YPOSH,X
   290 F99C C4 58			CPY	TEMP+3
   291 F99E 2A				ROL
   292 F99F C4 59			CPY	TEMP+4
   293 F9A1 69 00			ADC	#0
   294 F9A3 45 5B			EOR	TEMP+6
   295 F9A5 6A				ROR
   296 F9A6 90 05			BCC	SAFEOK
   297
   298 					;FINALLY, CHECK IF IT IS THE OBJECT SPECIFIED ITSELF.
   299 F9A8 E4 55			CPX	TEMP
   300 F9AA F0 01			BEQ	SAFEOK
   301
   302 					;OBJECT IN BOX!  UNSAFE TO ENTER!
   303 				;	LDY	#1		;CLEAR Z BIT TO SIGNIFY NOT CLEAR.
   304 								;NOT NEEDED (BEQ ABOVE)
   305 F9AC 60				RTS
   306
   307 F9AD			SAFEOK:
   308 F9AD CA				DEX			;GET NEXT OBJECT
   309 F9AE 10 D2			BPL	NEXTSAFE	;AND CONTINUE CHECKING
   310
   311 F9B0 A0 00			LDY	#0		;SET Z BIT TO SIGNIFY ALL CLEAR.
   312 F9B2 60				RTS
   313
   314 F9B3			BOXWIDTH:
   315 F9B3 10				.byte	$10
   316 F9B4			BOXHIGHT:
   317 F9B4 1A				.byte	$1A
   318
   319 				* ROUTINE TO PUT UP SCORES.  WHATEVER IS IN PLAYER OR HIGH SCORES GOES. *
   320 F9B5			DOSCORE:
   321 F9B5 20 F3 F9			JSR	CLSCORE		;ERASE ALL SCORES FIRST
   322
   323 F9B8 20 47 DF			JSR	PUTHISCR	;HIGH SCORE UP
   324
   325 F9BB A5 82			LDA	MODE
   326 F9BD C9 01			CMP	#1		;COMBINED SCORE
   327 F9BF D0 19			BNE	ZPLRSCOR
   328 F9C1 A9 02			LDA	#2
   329 F9C3 85 7A			STA	SCORER
   330 F9C5 20 B5 DE			JSR	PUTSCORE
   331 F9C8 20 0F DF			JSR	PUTMEN
   332 F9CB A9 00			LDA	#0
   333 F9CD 85 7A			STA	SCORER
   334 F9CF 20 B5 DE			JSR	PUTSCORE
   335 F9D2 A9 01			LDA	#1
   336 F9D4 85 7A			STA	SCORER
   337 F9D6 20 B5 DE			JSR	PUTSCORE
   338 F9D9 60				RTS
   339
   340 F9DA			ZPLRSCOR:
   341 F9DA A9 00			LDA	#0
   342 F9DC 85 7A			STA	SCORER
   343 F9DE 20 B5 DE			JSR	PUTSCORE	;PLAYER 1 SCORE UP
   344 F9E1 20 0F DF			JSR	PUTMEN
   345
   346 F9E4 A5 82			LDA	MODE
   347 F9E6 30 0A			BMI	NOP2SCOR
   348 F9E8 A9 01			LDA	#1
   349 F9EA 85 7A			STA	SCORER
   350 F9EC 20 B5 DE			JSR	PUTSCORE	;PLAYER 2 SCORE UP
   351 F9EF 20 0F DF			JSR	PUTMEN
   352
   353 F9F2			NOP2SCOR:
   354 F9F2 60				RTS
   355
   356 				* ROUTINE TO ERASE SCORES. *
   357 F9F3			CLSCORE:
   358 F9F3 A2 38			LDX	#56		;CLEAR MAPS
   359 F9F5 A9 00			LDA	#0
   360 F9F7			ZCLRLOOP:
   361 F9F7 9D 08 1B			STA	CHARMAPS,X
   362 F9FA CA				DEX
   363 F9FB			BPLOP:
   364 F9FB 10 FA			BPL	ZCLRLOOP	;LABLED TO ACCESS BPL OPCODE ($10)
   365 F9FD 60				RTS
   366
   367 				** ROUTINE USED IN GAME LOOP TO TOGGLE PLAYER BACK AND FORTH. **
   368 F9FE			FLIPPLAY:
   369 F9FE A5 79			LDA	PLAYER		;CHANGE PLAYER
   370 FA00 49 01			EOR	#1
   371 FA02 85 79			STA	PLAYER
   372 FA04 F0 02			BEQ	STOROFF		;ESTABLISH DATA OFFSET
   373 FA06 A9 08			LDA	#8		;SECOND PLAYER POINTS TO END
   374 FA08			STOROFF:
   375 FA08 85 8B			STA	OFFPLAY2
   376 FA0A 60				RTS
   377
   378 				* ROTATE THROUGH THE COLORS TO TWINKLE THE STARS.
   379 FA0B			TWINKLE:
   380 FA0B 20 B2 F8			JSR	NEWRAND		;DECIDE WHICH STARS TO TW'INC'LE
   381 FA0E 4A				LSR
   382 FA0F 90 05			BCC	NOINC2
   383 FA11 4A				LSR
   384 FA12 90 02			BCC	NOINC2
   385 FA14 E6 F6			INC	SOFTCOLR+14
   386
   387 FA16			NOINC2:
   388 FA16 4A				LSR
   389 FA17 90 05			BCC	LOGODO
   390 FA19 4A				LSR
   391 FA1A 90 02			BCC	LOGODO
   392 FA1C E6 F7			INC	SOFTCOLR+15
   393
   394 FA1E			LOGODO:
   395 FA1E A5 7B			LDA	GAMSTATE	;DON'T DO LOGOBARS WHILE PLAYING
   396 FA20 C9 05			CMP	#PLAYST
   397 FA22 F0 16			BEQ	LOGORTS
   398 FA24 C9 03			CMP	#AUTOST
   399 FA26 F0 12			BEQ	LOGORTS
   400
   401 FA28			LOGOBARS:
   402 FA28 A5 76			LDA	FRMCNT		;DO IT ONLY ON EVEN FRAMES
   403 FA2A 4A				LSR
   404 FA2B B0 0D			BCS	LOGORTS
   405 FA2D E6 60			INC	TEMP+11		;MOVE THIS!!
   406 FA2F A5 60			LDA	TEMP+11
   407 FA31 2C FB F9			BIT	BPLOP		;(BPLOP: OPCODE $10 IS BPL)
   408 FA34 D0 02			BNE	LOGOGO
   409 FA36 49 1F			EOR	#$1F
   410 FA38			LOGOGO:
   411 FA38 85 F2			STA	SOFTCOLR+10	;UPDATE HARDWARE REGISTER
   412 FA3A			LOGORTS:
   413 FA3A 60				RTS
   414
   415
   416 				* SET UP AN ICON:
   417 				*	    ON ENTRY: Y SHOULD CONTAIN ICON NUMBER
   418 				*		    X SHOULD CONTAIN INDEX NUMBER OF NEW OBJECT
   419 FA3B			DOICON:
   420 FA3B B9 34 FD			LDA	ICONACYC,Y
   421 FA3E 9D 2E 19			STA	ACYC,X
   422 FA41 B9 6E FD			LDA	ICONXPOS,Y
   423 FA44 9D A4 18			STA	XPOSH,X
   424 FA47 B9 8B FD			LDA	ICONYPOS,Y
   425 FA4A 9D C8 18			STA	YPOSH,X
   426 FA4D B9 51 FD			LDA	ICONPALS,Y
   427 FA50 9D CB 1A			STA	PALS,X
   428 FA53 A9 07			LDA	#ICON
   429 FA55 C0 16			CPY	#22		;ICONS > 22 ARE SHIPS
   430 FA57 90 02			BCC	ZISICON
   431 FA59 A9 23			LDA	#SHIP
   432 FA5B			ZISICON:
   433 FA5B 95 8C			STA	STATUS,X
   434 FA5D 60				RTS
   435
   436 				* PAINTSHP -- PAINT THE SHIP, BODY AND DEJAG AND FLAME COLORS
   437 				*	    ARGUMENTS: X CONTAINS THE PLAYER TO PAINT
   438 				*		A CONTAINS THE DESIRED LUME OF THE BODY
   439 FA5E			PAINTSHP:
   440 FA5E 29 0F			AND	#$0F		;KNOCK OFF EXTRANEOUS BITS
   441 FA60 1D 32 FD			ORA	BODYHUES,X	;OR IN THE CORRECT BODY HUE
   442 FA63 48				PHA			;PUSH BODY COLOR
   443 FA64 4A				LSR			;LOWER INTENSITY FOR DEJAG LUME
   444 FA65 29 07			AND	#$07		;KNOCK OFF EXTRANEOUS BITS
   445 FA67 1D 32 FD			ORA	BODYHUES,X	;OR IN THE CORRECT BODY HUE
   446 FA6A E0 00			CPX	#0		;WHICH PLAYER?
   447 FA6C F0 02			BEQ	ZPAINTGO	;FOR 1ST PLAYER, USE 1ST PALETTE
   448 FA6E A2 04			LDX	#4		;FOR 2ND PLAYER, USE 2ND PALETTE
   449 FA70			ZPAINTGO:
   450 FA70 95 EB			STA	SOFTCOLR+3,X	;STORE DEJAG COLOR
   451 FA72 68				PLA			;PULL BODY COLOR
   452 FA73 95 EA			STA	SOFTCOLR+2,X	;STORE BODY COLOR
   453 FA75 A9 00			LDA	#0		;TURN OFF SHIP'S THRUST FLAME
   454 FA77 95 E9			STA	SOFTCOLR+1,X
   455 FA79 60				RTS
   456
   457 				* REFRESH COLOR RAM, UPPER 4 PALETTES FROM ROM, LOWER 4 FROM RAM
   458 FA7A			REFRESH:
   459 FA7A A2 1F			LDX	#$1F
   460 FA7C			ZEFRESH:
   461 FA7C BD F1 FC			LDA	COLORS,X
   462 FA7F 95 20			STA	BACKGRND,X
   463 FA81 CA				DEX
   464 FA82 BD F1 FC			LDA	COLORS,X
   465 FA85 95 20			STA	BACKGRND,X
   466 FA87 CA				DEX
   467 FA88 BD F1 FC			LDA	COLORS,X
   468 FA8B 95 20			STA	BACKGRND,X
   469 FA8D CA				DEX
   470 FA8E CA				DEX			;SKIP OVER OTHER HARDWARE REGISTERS
   471 FA8F E0 10			CPX	#$10		;$10 - $1F FROM ROM (COLORS)
   472 FA91 B0 E9			BCS	ZEFRESH
   473 				* NOW DO RAM PART:
   474 FA93			Z2FRESH:
   475 FA93 B5 E8			LDA	SOFTCOLR,X
   476 FA95 95 20			STA	BACKGRND,X
   477 FA97 CA				DEX
   478 FA98 B5 E8			LDA	SOFTCOLR,X
   479 FA9A 95 20			STA	BACKGRND,X
   480 FA9C CA				DEX
   481 FA9D B5 E8			LDA	SOFTCOLR,X
   482 FA9F 95 20			STA	BACKGRND,X
   483 FAA1 CA				DEX
   484 FAA2 CA				DEX			;SKIP OVER OTHER HARDWARE REGISTERS
   485 FAA3 10 EE			BPL	Z2FRESH
   486 FAA5 E8				INX			;$FF + 1 = $00
   487 FAA6 86 20			STX	BACKGRND	;FORCE BLACK BACKGROUND
   488 FAA8 60				RTS
   489
   490 FAA9			WAITLOAD:
   491 FAA9 A9 01			LDA	#1		;SET LOAD FLAG
   492 FAAB 85 F9			STA	LOADFLAG
   493 FAAD			ZWAIT:
   494 FAAD A5 F9			LDA	LOADFLAG	;WAIT FOR LOADER TO FINISH
   495 FAAF F0 0E			BEQ	ZWRTS		;IF LOADER FINISHED THEN RTS
   496 FAB1 24 28			BIT	MSTAT		;IF OFF SCREEN FORCE LOAD
   497 FAB3 10 F8			BPL	ZWAIT
   498 FAB5 24 28			BIT	MSTAT		;PROTECTION
   499 FAB7 10 F4			BPL	ZWAIT
   500 FAB9 20 7A FA			JSR	REFRESH		;MAKE SURE COLORS ARE RIGHT FIRST
   501 FABC 20 C0 FA			JSR	LOADER
   502 FABF			ZWRTS:
   503 FABF 60				RTS
    45 FAC0				icl	"RASTLOAD.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\RASTLOAD.asm
     1 				*         1900    200684
     2 				*
     3 				*
     4 				** RASTLOAD.S *
     5 				** ASTEROIDS FOR THE ATARI 3600. **
     6 				** THIS FILE CONTAINS THE LOADER ASSUMING 16 HIGH ZONES. *
     7
     8 				** TRASHES ALL REGISTERS, TEMPI+0,+1,+2,+3,+4 **
     9 				** USES FREE THRU FREE+11 AS POINTERS TO NEXT FREE POSITION IN HEADER. **
    10
    11 FAC0			LOADER:
    12 FAC0 A9 04			LDA     #4		;SET POINTER PAST FIRST HEADER FOR
    13 FAC2 A2 0B			LDX     #11		; EACH DISPLAY LIST
    14 FAC4			ZAPFREE:
    15 FAC4 95 6A			STA     FREE,X
    16 FAC6 CA				DEX
    17 FAC7 10 FB			BPL     ZAPFREE
    18
    19 FAC9 A2 23			LDX     #35
    20 FACB			LOADLOOP:
    21 FACB B5 8C			LDA     STATUS,X	;CHECK STATUS OF EACH OBJECT
    22 FACD F0 49			BEQ     NEXTLOAD	;CHECK IF ZERO.
    23 FACF C9 FF			CMP     #$FF		;FORGET IF NULL, FF.
    24 FAD1 F0 45			BEQ     NEXTLOAD	;OTHERWISE, LOAD IT
    25
    26 FAD3 29 0F			AND     #$0F		;CHECK LOW NYBBLE
    27 FAD5 C9 06			CMP     #6		;IF = 6 THEN SHOT
    28 FAD7 D0 45			BNE     LOADOBJ
    29
    30 FAD9			LOADSHOT:
    31 FAD9 BD C8 18			LDA     YPOSH,X		;A <- Y POSITION OF OBJECT
    32 FADC 49 FF			EOR     #$FF		;NEGATE POSITION
    33 FADE 29 0F			AND     #$0F		;MOD 16 IS LINE IN ZONE
    34 FAE0 85 69			STA     TEMPI+4
    35 FAE2 BD C8 18			LDA     YPOSH,X		;A <- Y POSITION OF OBJECT
    36 FAE5 4A				LSR			;DIV 16 IS WHICH ZONE
    37 FAE6 4A				LSR
    38 FAE7 4A				LSR
    39 FAE8 4A				LSR
    40 FAE9 A8				TAY			;Y <- WHICH ZONE
    41 FAEA B9 6A 00			LDA     FREE,Y		;A <- FREE POINTER FOR THAT ZONE
    42 FAED 18				CLC
    43 FAEE 79 A6 FC			ADC     LOWZONE,Y
    44 FAF1 85 65			STA     TEMPI		;TEMPI = LO ADDR FOR FIRST FREE POS
    45 FAF3 B9 B2 FC			LDA     HIGHZONE,Y
    46 FAF6 85 66			STA     TEMPI+1		;TEMPI+1 = HI ADDRESS
    47 FAF8 B9 6A 00			LDA     FREE,Y		;A <- FREE POINTER FOR THAT ZONE
    48 				;	CLC			;OPTIONAL
    49 FAFB 69 04			ADC     #4		;INCREMENT FREE POINTER
    50 FAFD 99 6A 00			STA     FREE,Y
    51 FB00 A0 00			LDY     #0
    52 FB02 A9 FE			LDA     #SHOT1 & 255
    53 FB04 91 65			STA     (TEMPI),Y	;STORE LOW ADDRESS IN HEADER - 1ST BYTE
    54 FB06 C8				INY
    55 FB07 A9 7F			LDA     #$7F		;PALETTE 4, WIDTH 1
    56 FB09 91 65			STA     (TEMPI),Y	;STORE IN HEADER - 2ND BYTE
    57 FB0B C8				INY
    58 FB0C A5 69			LDA     TEMPI+4		;GET LINE IN ZONE
    59 FB0E 09 C0			ORA     #GRAPHICS >> 8	;ADD TO START OF GRAPHICS DATA
    60 FB10 91 65			STA     (TEMPI),Y	;STORE HIGH ADDR IN HEADER - 3RD BYTE
    61 FB12 C8				INY
    62 FB13 BD A4 18			LDA     XPOSH,X		;GET HORIZONTAL POSITION
    63 FB16 91 65			STA     (TEMPI),Y	;STORE IN HEADER - 4TH BYTE
    64
    65 FB18			NEXTLOAD:
    66 FB18 CA				DEX			;DECREMENT INDEX
    67 FB19 10 B0			BPL     LOADLOOP	;CONTINUE IF NOT FINISHED
    68 FB1B 4C AF FB			JMP     LOADSCOR	;LOAD SCORE AT END OF DL IF DONE
    69
    70 				* LOAD A STANDARD OBJECT INTO TWO ZONES
    71 FB1E			LOADOBJ:
    72 FB1E BD C8 18			LDA     YPOSH,X		;A <- Y POSITION OF OBJECT
    73 FB21 49 FF			EOR     #$FF		;NEGATE POSITION
    74 FB23 29 0F			AND     #$F		;MOD 16 IS LINE IN ZONE
    75 FB25 85 69			STA     TEMPI+4
    76 FB27 BD C8 18			LDA     YPOSH,X		;A <- Y POSITION OF OBJECT
    77 FB2A 4A				LSR			;DIV 16 IS WHICH ZONE
    78 FB2B 4A				LSR
    79 FB2C 4A				LSR
    80 FB2D 4A				LSR
    81 FB2E A8				TAY			;Y <- WHICH ZONE
    82 FB2F B9 6A 00			LDA     FREE,Y		;A <- FREE POINTER FOR THAT ZONE
    83 FB32 18				CLC
    84 FB33 79 A6 FC			ADC     LOWZONE,Y
    85 FB36 85 65			STA     TEMPI		;TEMPI = LO ADDR FOR FIRST FREE POS
    86 FB38 B9 B2 FC			LDA     HIGHZONE,Y
    87 FB3B 85 66			STA     TEMPI+1		;TEMPI+1 = HI ADDRESS
    88 FB3D B9 6A 00			LDA     FREE,Y		;A <- FREE POINTER FOR THAT ZONE
    89 				;	CLC			;OPTIONAL
    90 FB40 69 04			ADC     #4		;INCREMENT FREE POINTER
    91 FB42 99 6A 00			STA     FREE,Y
    92 FB45 C8				INY			;ALSO LOAD INTO HIGHER ZONE
    93 FB46 C0 0C			CPY     #12
    94 FB48 90 03			BCC     YOK		;NEW ZONE NUMBER OK?
    95 FB4A A0 00			LDY     #0		;NO, RESET TO LOWEST ZONE
    96 FB4C 18				CLC
    97 FB4D			YOK:
    98 FB4D B9 6A 00			LDA     FREE,Y		;A <- FREE POINTER FOR THAT ZONE
    99 FB50 79 A6 FC			ADC     LOWZONE,Y
   100 FB53 85 67			STA     TEMPI+2		;TEMPI = LO ADDR FOR FIRST FREE POS
   101 FB55 B9 B2 FC			LDA     HIGHZONE,Y
   102 FB58 85 68			STA     TEMPI+3		;TEMPI+1 = HI ADDRESS
   103 FB5A B9 6A 00			LDA     FREE,Y		;A <- FREE POINTER FOR THAT ZONE
   104 				;	CLC			;OPTIONAL
   105 FB5D 69 04			ADC     #4		;INCREMENT FREE POINTER
   106 FB5F 99 6A 00			STA     FREE,Y
   107 FB62 A0 00			LDY     #0
   108 FB64 BD 2E 19			LDA     ACYC,X
   109 FB67 91 65			STA     (TEMPI),Y	;STORE LO ADDR IN HEADER - 1ST BYTE
   110 FB69 91 67			STA     (TEMPI+2),Y
   111 FB6B C8				INY
   112 FB6C BD CB 1A			LDA     PALS,X
   113 FB6F 91 65			STA     (TEMPI),Y	;STORE PALETTE + WIDTH INFO - 2ND BYTE
   114 FB71 91 67			STA     (TEMPI+2),Y
   115 FB73 C8				INY
   116 FB74 B5 8C			LDA     STATUS,X	;FOR STATUS = ICON USES CHARS AS BASE
   117 FB76 C9 07			CMP     #ICON
   118 FB78 18				CLC
   119 FB79 D0 06			BNE     ZHADSTMP	;OTHERWISE USE GRAPHICS AS BASE
   120 FB7B A5 69			LDA     TEMPI+4
   121 FB7D 69 D1			ADC     #(CHARS-$0F00) >> 8
   122 FB7F D0 04			BNE     ZSTHADDR	;BNE = JMP HERE
   123 FB81			ZHADSTMP:
   124 FB81 A5 69			LDA     TEMPI+4
   125 FB83 69 B1			ADC     #(GRAPHICS-$0F00) >> 8
   126 FB85			ZSTHADDR:
   127 FB85 91 65			STA     (TEMPI),Y	;STORE HI ADDR IN HEADER - 3RD BYTE
   128 				;	CLC			;OPTIONAL
   129 FB87 69 10			ADC     #$10
   130 FB89 91 67			STA     (TEMPI+2),Y	;STORE HI ADDR IN HEADER - 3RD BYTE
   131 FB8B C8				INY
   132 FB8C BD A4 18			LDA     XPOSH,X
   133 FB8F 91 65			STA     (TEMPI),Y	;STORE HOR POS IN HEADER - 4TH BYTE
   134 FB91 91 67			STA     (TEMPI+2),Y
   135
   136 				* THIS CODE CHECKS FOR HORIZONTAL WRAP AROUND, AND LOADS THE OBJECT AGAIN
   137 				* IF IT NEEDS TO, IN ORDER TO WRAP SMOOTHLY
   138 FB93 C9 97			CMP     #XPOSMAX-8	;IS IT WITHIN A MARGIN OF THE EDGE?
   139 FB95 90 81			BCC     NEXTLOAD	;NO.  IT'S OK, GO ON TO NEXT OBJECT.
   140 FB97 E0 19			CPX     #25		;UFO IS CURRENTLY THE ONLY EXCEPTION
   141 FB99 F0 11			BEQ     STEPNEXT	; TO X-WRAPPING.
   142 FB9B C9 F0			CMP     #$F0		;HAS IT BEEN WRAPPED ALREADY?
   143 FB9D B0 08			BCS     UNWRAP		;YES.  UNWRAP IT
   144 FB9F E9 9F			SBC     #XPOSMAX	;WRAP IT: SUBTRACT OFF A SCREEN OFFSET
   145 FBA1 9D A4 18			STA     XPOSH,X		;WANTS.  WRAP IT.
   146 FBA4 4C 1E FB			JMP     LOADOBJ		;LOAD IT AGAIN
   147 FBA7			UNWRAP:
   148 FBA7 69 9F			ADC     #XPOSMAX	;UNWRAP IT: ADD BACK THE OFFSET
   149 FBA9 9D A4 18			STA     XPOSH,X
   150 FBAC			STEPNEXT:
   151 FBAC 4C 18 FB			JMP     NEXTLOAD
   152
   153
   154 FBAF			LOADSCOR:
   155
   156 				**        HIGH SCORE
   157 FBAF A0 00			LDY     #0
   158 FBB1 A5 75			LDA     FREE+11		;GET POINTER FOR TOP ZONE
   159 FBB3 18				CLC
   160 FBB4 6D B1 FC			ADC     LOWZONE+11	;GET LOW ADDR FOR DL
   161 FBB7 85 65			STA     TEMPI
   162 FBB9 AD BD FC			LDA     HIGHZONE+11	;GET HIGH ADDR FOR DL
   163 FBBC 85 66			STA     TEMPI+1
   164 FBBE A9 38			LDA     #SCORCMHS & 255	;ADD TOP SCORE
   165 FBC0 91 65			STA     (TEMPI),Y	;LOW ADDR
   166 FBC2 C8				INY
   167 FBC3 A9 60			LDA     #$60		;WRITE MODE 0, INDIRECT
   168 FBC5 91 65			STA     (TEMPI),Y
   169 FBC7 C8				INY
   170 FBC8 A9 1B			LDA     #SCORCMHS >> 8
   171 FBCA 91 65			STA     (TEMPI),Y	;HIGH ADDR
   172 FBCC C8				INY
   173 FBCD A9 78			LDA     #$78		;PALETTE 4, WIDTH 8
   174 FBCF 91 65			STA     (TEMPI),Y
   175 FBD1 C8				INY
   176 FBD2 A9 39			LDA     #$39
   177 FBD4 91 65			STA     (TEMPI),Y	;HOR POSITION 39 HEX
   178
   179 				**        COMBINED SCORE
   180 FBD6 A5 82			LDA     MODE		;ONLY DO FOR MODE 1
   181 FBD8 C9 01			CMP     #1
   182 FBDA D0 19			BNE     LOADP1S
   183
   184 FBDC C8				INY
   185 FBDD A9 28			LDA     #SCORECMC & 255
   186 FBDF 91 65			STA     (TEMPI),Y	;STORE LOW ADDRESS OF CHARS.
   187 FBE1 C8				INY
   188 FBE2 A9 60			LDA     #$60		;WRITE MODE 0, INDIRECT
   189 FBE4 91 65			STA     (TEMPI),Y
   190 FBE6 C8				INY
   191 FBE7 A9 1B			LDA     #SCORECMC >> 8
   192 FBE9 91 65			STA     (TEMPI),Y	;STORE HIGH ADDRESS OF CHARS.
   193 FBEB C8				INY
   194 FBEC A9 90			LDA     #$90		;PALETTE 4, WIDTH 16
   195 FBEE 91 65			STA     (TEMPI),Y
   196 FBF0 C8				INY
   197 FBF1 A9 39			LDA     #$39		;HOR POS 39 HEX
   198 FBF3 91 65			STA     (TEMPI),Y
   199
   200 				**        PLAYER 1 SCORE
   201 FBF5			LOADP1S:
   202 FBF5 A0 00			LDY     #0
   203 FBF7 A5 74			LDA     FREE+10		;GET POINTER FOR NEXT ZONE
   204 FBF9 18				CLC
   205 FBFA 6D B0 FC			ADC     LOWZONE+10	;GET LOW ADDR FOR DL
   206 FBFD 85 65			STA     TEMPI
   207 FBFF AD BC FC			LDA     HIGHZONE+10	;GET HIGH ADDR FOR DL
   208 FC02 85 66			STA     TEMPI+1
   209 FC04 A9 08			LDA     #SCORMAP1 & 255
   210 FC06 91 65			STA     (TEMPI),Y	;STORE LOW ADDRESS OF CHARS.
   211 FC08 C8				INY
   212 FC09 A9 60			LDA     #$60		;WRITE MODE 0, INDIRECT
   213 FC0B 91 65			STA     (TEMPI),Y
   214 FC0D C8				INY
   215 FC0E A9 1B			LDA     #SCORMAP1 >> 8
   216 FC10 91 65			STA     (TEMPI),Y	;STORE HIGH ADDRESS OF CHARS.
   217 FC12 C8				INY
   218 FC13 A9 10			LDA     #$10		;PALETTE 0, WIDTH 16
   219 FC15 91 65			STA     (TEMPI),Y
   220 FC17 C8				INY
   221 FC18 A9 07			LDA     #$7		;HOR POS 7
   222 FC1A 91 65			STA     (TEMPI),Y
   223
   224 				**        PLAYER 2 SCORE
   225 FC1C C8				INY
   226 FC1D A9 18			LDA     #SCORMAP2 & 255
   227 FC1F 91 65			STA     (TEMPI),Y	;STORE LOW ADDRESS OF CHARS.
   228 FC21 C8				INY
   229 FC22 A9 60			LDA     #$60		;WRITE MODE 0, INDIRECT
   230 FC24 91 65			STA     (TEMPI),Y
   231 FC26 C8				INY
   232 FC27 A9 1B			LDA     #SCORMAP2 >> 8
   233 FC29 91 65			STA     (TEMPI),Y	;STORE HIGH ADDRESS OF CHARS.
   234 FC2B C8				INY
   235 FC2C A9 30			LDA     #$30		;PALETTE 1, WIDTH 16
   236 FC2E 91 65			STA     (TEMPI),Y
   237 FC30 C8				INY
   238 FC31 A9 65			LDA     #$65		;HOR POS 65 HEX
   239 FC33 91 65			STA     (TEMPI),Y
   240
   241 FC35 A5 75			LDA     FREE+11		;INCREMENT POINTERS
   242 FC37 18				CLC
   243 FC38 69 05			ADC     #5
   244 FC3A 85 75			STA     FREE+11
   245
   246 FC3C A6 82			LDX     MODE
   247 FC3E E0 01			CPX     #1
   248 FC40 D0 05			BNE     ZADDZ10
   249 FC42 18				CLC
   250 FC43 69 05			ADC     #5
   251 FC45 85 75			STA     FREE+11
   252
   253 FC47			ZADDZ10:
   254 FC47 A5 74			LDA     FREE+10
   255 FC49 18				CLC
   256 FC4A 69 0A			ADC     #10
   257 FC4C 85 74			STA     FREE+10
   258
   259 FC4E			LOADZERO:
   260 FC4E A2 0B			LDX     #11		;LOAD ZEROS AT END OF DISPLAY LIST, DL
   261 FC50 A0 01			LDY     #1
   262 FC52			LOADZLP:
   263 FC52 B5 6A			LDA     FREE,X
   264 FC54 18				CLC
   265 FC55 7D A6 FC			ADC     LOWZONE,X
   266 FC58 85 65			STA     TEMPI
   267 FC5A BD B2 FC			LDA     HIGHZONE,X
   268 FC5D 85 66			STA     TEMPI+1
   269 FC5F A9 00			LDA     #0
   270 FC61 91 65			STA     (TEMPI),Y
   271 FC63 CA				DEX
   272 FC64 10 EC			BPL     LOADZLP
   273 FC66 85 F9			STA     LOADFLAG	;CLEAR FLAG SINCE DONE.
   274 FC68 60				RTS
   275
   276 FC69			LOADSTAR:
   277 FC69 A2 0B			LDX     #11
   278 FC6B			STARLOOP:
   279 FC6B BD A6 FC			LDA     LOWZONE,X	;ESTABLISH LO ADDR
   280 FC6E 85 65			STA     TEMPI
   281 FC70 BD B2 FC			LDA     HIGHZONE,X	;ESTABLISH HI ADDR
   282 FC73 85 66			STA     TEMPI+1
   283
   284 FC75 20 B2 F8			JSR     NEWRAND		;PICK A RANDOM STAR (0 TO 3)
   285 FC78 29 03			AND     #$03
   286 FC7A 18				CLC
   287 FC7B 69 63			ADC     #STARS & 255	;ADD IN BASE OF STARS
   288
   289 FC7D A0 00			LDY     #0
   290 FC7F 91 65			STA     (TEMPI),Y	;STORE LO ADDR
   291
   292 FC81 C8				INY
   293 FC82 BD 9A FC			LDA     STARPW,X
   294 FC85 91 65			STA     (TEMPI),Y	;STORE PALETTE & WIDTH INFO
   295
   296 FC87 C8				INY
   297 FC88 A9 E0			LDA     #CHARS >> 8
   298 FC8A 91 65			STA     (TEMPI),Y	;STORE HI ADDR
   299
   300 FC8C 20 B2 F8			JSR     NEWRAND	;GET A RANDOM HORIZONTAL POSITION
   301
   302 FC8F 4A				LSR			;BANG INTO RANGE
   303 FC90 69 10			ADC     #$10
   304
   305 FC92 A0 03			LDY     #3
   306 FC94 91 65			STA     (TEMPI),Y	;STORE HOR POS
   307
   308 FC96 CA				DEX
   309 FC97 10 D2			BPL     STARLOOP
   310 FC99 60				RTS
   311
   312 FC9A			STARPW:
   313 FC9A 7F 9F 7F 7F BF 7F + 	.byte	$7F,$9F,$7F,$7F,$BF,$7F,$DF,$7F,$7F,$FF,$9F,$DF
    46 FCA6				icl	"TABLES.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\TABLES.asm
     1 				*         1233    140384
     2 				*
     3 				*
     4 				** TABLES.S **
     5 				** ASTEROIDS FOR THE ATARI 3600 **
     6 				** THIS FILE CONTAINS TABLE DATA STORAGE **
     7 				*
     8 FCA6			LOWZONE:
     9 FCA6 00 80 00 80			.byte	GAMEDL12 & 255,GAMEDL11 & 255,GAMEDL10 & 255,GAMEDL09 & 255
    10 FCAA 00 80 00 80			.byte	GAMEDL08 & 255,GAMEDL07 & 255,GAMEDL06 & 255,GAMEDL05 & 255
    11 FCAE 00 80 00 80			.byte	GAMEDL04 & 255,GAMEDL03 & 255,GAMEDL02 & 255,GAMEDL01 & 255
    12 FCB2			HIGHZONE:
    13 FCB2 22 22 23 23		 	.byte	GAMEDL12 >> 8,GAMEDL11 >> 8,GAMEDL10 >> 8,GAMEDL09 >> 8
    14 FCB6 24 24 25 25			.byte	GAMEDL08 >> 8,GAMEDL07 >> 8,GAMEDL06 >> 8,GAMEDL05 >> 8
    15 FCBA 26 26 27 27			.byte	GAMEDL04 >> 8,GAMEDL03 >> 8,GAMEDL02 >> 8,GAMEDL01 >> 8
    16
    17 				*
    18 				* ROM COPY OF DISPLAY LIST LIST TABLE.  DOWNLOADED INTO RAM, WHICH IS FASTER
    19 FCBE			DLLTAB:
    20 FCBE 0F				.byte	$0F
    21 FCBF 1A 96			.byte	BLANKDL >> 8,BLANKDL & 255		;16 BLANK LINES
    22
    23 FCC1 07				.byte	$07
    24 FCC2 1A 96			.byte	BLANKDL >> 8,BLANKDL & 255		;8 BLANK LINES
    25
    26 FCC4 4F				.byte	$4F
    27 FCC5 27 80			.byte	GAMEDL01 >> 8,GAMEDL01 & 255	;START OF SCREEN
    28
    29 FCC7 4F				.byte	$4F
    30 FCC8 27 00			.byte	GAMEDL02 >> 8,GAMEDL02 & 255
    31
    32 FCCA 4F				.byte	$4F
    33 FCCB 26 80			.byte	GAMEDL03 >> 8,GAMEDL03 & 255
    34
    35 FCCD 4F				.byte	$4F
    36 FCCE 26 00			.byte	GAMEDL04 >> 8,GAMEDL04 & 255
    37
    38 FCD0 4F				.byte	$4F
    39 FCD1 25 80			.byte	GAMEDL05 >> 8,GAMEDL05 & 255
    40
    41 FCD3 4F				.byte	$4F
    42 FCD4 25 00			.byte	GAMEDL06 >> 8,GAMEDL06 & 255
    43
    44 FCD6 4F				.byte	$4F
    45 FCD7 24 80			.byte	GAMEDL07 >> 8,GAMEDL07 & 255
    46
    47 FCD9 4F				.byte	$4F
    48 FCDA 24 00			.byte	GAMEDL08 >> 8,GAMEDL08 & 255
    49
    50 FCDC 4F				.byte	$4F
    51 FCDD 23 80			.byte	GAMEDL09 >> 8,GAMEDL09 & 255
    52
    53 FCDF 4F				.byte	$4F
    54 FCE0 23 00			.byte	GAMEDL10 >> 8,GAMEDL10 & 255
    55
    56 FCE2 4F				.byte	$4F
    57 FCE3 22 80			.byte	GAMEDL11 >> 8,GAMEDL11 & 255
    58
    59 FCE5 4F				.byte	$4F
    60 FCE6 22 00			.byte	GAMEDL12 >> 8,GAMEDL12 & 255
    61
    62 FCE8 01				.byte	$01
    63 FCE9 1A 96			.byte	BLANKDL >> 8,BLANKDL & 255	;2 BLANK LINES: WAIT FOR LINE RAM
    64
    65 FCEB 8F				.byte	$8F
    66 FCEC 1A 96			.byte	BLANKDL >> 8,BLANKDL & 255	;16 BLANK LINES WITH A DLI
    67
    68 FCEE 08				.byte	$08
    69 FCEF 1A 96			.byte	BLANKDL >> 8,BLANKDL & 255	;9 BLANK LINES
    70 				*
    71 				*
    72 FCF1			COLORS:
    73 FCF1 00 00 FD F5			.byte	$00,$00,$FD,$F5		;PALLETTE 0 SHIP (0,FLAME,BODY,DJAG)
    74 FCF5 00 00 9D 95			.byte	$00,$00,$9D,$95		;PALLETTE 1 SHIP2
    75 FCF9 00 8A 71 46			.byte	$00,$8A,$71,$46		;PALLETTE 2 UFOS
    76 FCFD 00 0F 07 E5			.byte	$00,$0F,$07,$E5		;PAL 3 STARS (WHITE, GREY, GREEN)
    77 FD01 00 0A 06 04			.byte	$00,$0A,$06,$04		;PAL 4 ROCKS 1 (GREY)
    78 FD05 00 D7 D4 D1			.byte	$00,$D7,$D4,$D1		;PAL 5 ROCKS 2 (BLUE GREEN)
    79 FD09 00 39 24 21			.byte	$00,$39,$24,$21		;PAL 6 ROCKS 3 (BROWN/ORANGE)
    80 FD0D 00 B6 B3 B0			.byte	$00,$B6,$B3,$B0		;PAL 7 ROCKS 4 (BLUE)
    81
    82 FD11			PALTAB:
    83 FD11 9D BD DD FD 9D BD		.byte	$9D,$BD,$DD,$FD,$9D,$BD
    84 FD17 DD FD 9D BD DD FD		.byte	$DD,$FD,$9D,$BD,$DD,$FD
    85 FD1D 9D BD DD FD 9D BD		.byte	$9D,$BD,$DD,$FD,$9D,$BD
    86 FD23 DD FD 9D BD DD FD		.byte	$DD,$FD,$9D,$BD,$DD,$FD
    87 FD29 1E 5E 7F 7F 7F 7F		.byte	$1E,$5E,$7F,$7F,$7F,$7F
    88 FD2F 7F 7F 3E			.byte	$7F,$7F,$3E
    89
    90 				* BODY HUE OF EACH SHIP
    91 FD32			BODYHUES:
    92 FD32 F0 90			.byte	$F0,$90
    93
    94
    95
    96 				* ICON TABLE
    97 FD34			ICONACYC:
    98 FD34 3D 43 47 4B 4F 53		.byte	NAMEA&255,NAMES&255,NAMET&255,NAMEE&255,NAMER&255,NAMEO&255
    99 FD3A 57 59 5D			.byte	NAMEI&255,NAMED&255,NAMES2&255
   100 FD3D BC 67 6E D4 7C		.byte	MCOPYR&255,MNOVICE&255,MINTER&255,MADVANCE&255,MEXPERT&255
   101 FD42 84 90 9E A9			.byte	MONEPL&255,MTWOPL&255,MTEAMPL&255,MCOMPPL&255
   102 FD46 16 21 31			.byte	PLAY1MES&255,PLAY2MES&255,OVERMESS&255
   103 FD49 2C				.byte	WINSMESS&255
   104 FD4A B5 B5 B5 B5 B5 BD		.byte	SHIP1&255,SHIP1&255,SHIP1&255,SHIP1&255,SHIP1&255,SHIP5&255
   105 FD50 CD				.byte	SHIP13&255
   106 FD51			ICONPALS:
   107 FD51 5A 5C 5C 5C 5C 5C + 	.byte	$5A,$5C,$5C,$5C,$5C,$5C,$5E,$5C,$5A
   108 FD5A 68 79 72 76 78 74 + 	.byte	$68,$79,$72,$76,$78,$74,$72,$75,$6D
   109 FD63 75 75 74			.byte	$75,$75,$74
   110 FD66 75				.byte	$75
   111 FD67 1E 1E 3E 1E 3E 1E		.byte	$1E,$1E,$3E,$1E,$3E,$1E
   112 FD6D 3E				.byte	$3E
   113 FD6E			ICONXPOS:
   114 FD6E 06 1E 2D 3D 4C 5C + 	.byte	6,30,45,61,76,92,108,116,132
   115 FD77 23 06 20 50 7C 38 + 	.byte	35,6,32,80,124,56,55,60,41
   116 FD80 41 41 3F			.byte	$41,$41,$3F
   117 FD83 41				.byte	$41
   118 FD84 50 50 50 30 70 30 + 	.byte	$50,$50,$50,$30,$70,$30,$70
   119 FD8B			ICONYPOS:
   120 FD8B 72 72 72 72 72 72 + 	.byte	114,114,114,114,114,114,114,114,114
   121 FD94 00 13 13 13 13 50 + 	.byte	0,19,19,19,19,80,80,80,80
   122 FD9D 76 76 68			.byte	118,118,104
   123 FDA0 68				.byte	104
   124 FDA1 31 38 2C 31 31 31 + 	.byte	49,56,44,49,49,49,49
   125
   126 				* TABLE OF SCORE VALUES: SM, MED, LG, OPPONENT SHIP,  MR. BILL, SLUGGO
   127 FDA8			LOSCOTAB:
   128 FDA8 00 50 20 00 00 00 + 	.byte	     $00,$50,$20,$00,$00,$00,$00,$00
   129 FDB0			HISCOTAB:
   130 FDB0 01 00 00 05 10 02 + 	.byte	     $01,$00,$00,$05,$10,$02,$00,$00
   131
   132 				* COORDINATE OF SHIP'S NOSE; USED AS STARTING POS FOR SHIP'S SHOTS.
   133 				* NOTE: AS USUAL, THE Y COORDINATE IS 16-NOSEY, BECAUSE STAMPS ARE 16 HIGH,
   134 				*       AND WE MEASURE FROM THE TOP DOWN.
   135 FDB8			SHNOSEX:
   136 FDB8 03 04 05 06 06 06 + 	.byte	     3,4,5,6,6,6,5,4,3,2,1,0,0,0,1,2
   137 FDC8			SHNOSEY:
   138 FDC8 0E 0D 0C 0A 09 08 + 	.byte	     14,13,12,10,9,8,6,5,4,5,6,8,9,10,12,13
   139
   140 FDD8			UNITVECT:
   141 FDD8			UNITVCTX:
   142 FDD8 00 02 03 04 05 04 + 	.byte	     0,2,3,4,5,4,3,2,0,-2,-3,-4,-5,-4,-3,-2
   143 FDE8			UNITVCTY:
   144 FDE8 07 06 05 02 00 FE + 	.byte	     7,6,5,2,0,-2,-5,-6,-7,-6,-5,-2,0,2,5,6
   145
   146 FDF8			HUNTVECT:
   147 FDF8			HUNTVCTX:
   148 FDF8 00 00 00 00 00 00 + 	.byte	     0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1
   149 FE08			HUNTVCTY:
   150 FE08 00 00 00 00 00 FF + 	.byte	     0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0
   151
   152 FE18			MAXVECT:
   153 FE18			MAXVECTX:
   154 FE18 00 0B 18 1F 20 1F + 	.byte	     0,11,24,31,32,31,24,11,0,-11,-24,-31,-32,-31,-24,-11
   155 FE28			MAXVECTY:
   156 FE28 33 30 19 0B 00 F5 + 	.byte	     51,48,25,11,0,-11,-25,-48,-51,-48,-25,-11,0,11,25,48
   157
   158 FE38			ENDTBL:
   159 				 ;.byte 0	;;(?).DS.B		0
   160
    47 FE38				icl	"os7800.asm"
Source: C:\Users\dm\Documents\GitHub\Asteroid7800\os7800.asm
     1 				*
     2 				*
     3 				*
     4 				;	.subttl		"Remnants of old Maria OS"
     5 				*
     6 = 2300			ramcode	equ	$2300		;AREA RESERVED FOR CODE
     7 = 0480			tiaram	equ	$480
     8 				*
     9 				*
    10 				;
    11 				;  STELLA (TIA) REGISTER ADDRESSES USED BY THIS MODULE
    12 				;
    13 = 0001			VBLANK	equ	$01	; BIT	     1	VERTICAL BLANK SET-CLR
    14 = 0002			TWSYNC	equ	$02	; STROBE	WAIT FOR HORIZ BLANK
    15 = 0003			RSYNC	equ	$03	; STROBE	RESET HORIZ SYNC COUNTER
    16 = 0006			COLUP0	equ	$06	; BITS 7654321	COLOR(4)-LUM(3) PLAYER 0
    17 = 0008			COLUPF	equ	$08	; BITS 7654321	COLOR(4)-LUM(3) PLAYFIELD
    18 = 0009			COLUBK	equ	$09	; BITS 7654321	COLOR(4)-LUM(3) BACKGROUND
    19 = 000F			PF2	equ	$0F	; BITS ALL	PLAYFIELD REG BYTE 2
    20 = 0010			RESP0	equ	$10	; STROBE	RESET PLAYER 0
    21 = 0011			RESP1	equ	$11	; STROBE	RESET PLAYER 1
    22 = 001B			GRP0	equ	$1B	; BITS ALL	GRAPHICS FOR PLAYER 0
    23 = 001C			GRP1	equ	$1C	; BITS ALL	GRAPHICS FOR PLAYER 1
    24 = 002C			CXCLR	equ	$2C	; STROBE	CLEAR COLLISION LATCHES
    25 				;
    26 				;  READ ADDRESSES -	BIT 7	BIT 6 (ONLY)
    27 				;
    28 = 0032			CXP0FB	equ	$32	;	P0.PF	P0.BL
    29 = 0033			CXP1FB	equ	$33	;	P1.PF	P1.BL
    30 				*
    31 = 2700			fakedli	equ	$2700
    32 FE38			fakelist:
    33 FE38 00 40 F0 1F BB		.byte	$0,$40,$f0,$1f,$bb
    34 FE3D 00 00			.byte	0,0
    35 FE3F 8F 27 00			.byte	$8f,$27,0
    36 				*
    37 				*
    38 				*
    39 				*
    40 				*
    41 FE42			startup:
    42 FE42 78				SEI			;INITIALIZE
    43 FE43 D8				CLD
    44 				*
    45 FE44 A9 02			LDA	#$02		;PUT BASE UNIT INTO MARIA ENABLE
    46 FE46 85 01			STA	PTCTRL
    47 				*
    48 FE48 A2 FF			ldx	#$ff
    49 FE4A 9A				txs
    50 				*
    51 				*
    52 FE4B A9 7F			LDA	#$7F
    53 FE4D 85 3C			STA	CTRL		;TURN OFF DMA
    54 FE4F A9 00			LDA	#$00
    55 FE51 85 20			STA	BACKGRND	;BACKGROUND COLOR TO BLACK
    56 				*
    57 				*
    58 				*
    59 				*   copy 2600 code to tia RAM
    60 				*
    61 FE53 A2 7F			LDX	#$7F		;LOCK CART IN 2600 MODE, CART ON
    62 FE55			L2LOOP:
    63 FE55 BD 4C FF			LDA	SYNC,X		;MOVE CODE TO RAM
    64 FE58 9D 80 04			STA	tiaram,X	;MOVE INTO 6532 RAM
    65 FE5B CA				DEX
    66 FE5C 10 F7			BPL	L2LOOP
    67 				*
    68 				*
    69 				*   Copy 7800 validation code from rom to ram..
    70 				*
    71 				*
    72 FE5E A2 AD			ldx	#ROMEND-ROMCODE
    73 FE60			copylp:
    74 FE60 BD 9E FE			lda	ROMCODE-1,x
    75 FE63 9D FF 22			sta	ramcode-1,x
    76 FE66 CA				dex
    77 FE67 D0 F7			bne	copylp
    78 				*
    79 				*  Now, zero out the TIA
    80 				*
    81 FE69 A9 00			lda	#0		;zero out the TIA
    82 FE6B AA				tax
    83 FE6C			tia0loop:
    84 FE6C 95 01			sta	VBLANK,x
    85 FE6E E8				inx
    86 FE6F E0 2C			cpx	#CXCLR
    87 FE71 D0 F9			bne	tia0loop
    88 				*
    89 FE73 A9 02			LDA	#$02		;PUT BASE UNIT INTO MARIA ENABLE
    90 FE75 85 01			STA	PTCTRL
    91 				*
    92 				*
    93 				*   7800 One-on-One Basketball needs some ram initialized to $ff (for shame!!!)
    94 				*
    95 				*
    96 				*  Now make One-on-One Basketball happy
    97 				*
    98 FE77 A9 FF			lda	#$ff
    99 FE79 A2 3F			ldx	#$3f
   100 FE7B			framlp:
   101 FE7B 9D 00 20			sta	$2000,x
   102 FE7E 9D 00 21			sta	$2100,x
   103 FE81 CA				dex
   104 FE82 10 F7			bpl	framlp
   105 				*
   106 				*   Now load up some dumb display list in case maria needs some practice
   107 				*
   108 FE84 A2 09			ldx	#9
   109 FE86			fakeload:
   110 FE86 BD 38 FE			lda	fakelist,x
   111 FE89 9D 00 27			sta	fakedli,x
   112 FE8C CA				dex
   113 FE8D 10 F7			bpl	fakeload
   114 				*
   115 FE8F E8				inx			;x=0
   116 FE90 A0 50			ldy	#80
   117 FE92			fakeinc:
   118 FE92 BD 07 27			lda	fakedli+7,x
   119 FE95 9D 0A 27			sta	fakedli+10,x
   120 FE98 E8				inx
   121 FE99 88				dey
   122 FE9A D0 F6			bne	fakeinc
   123 				*
   124 FE9C 4C 07 23			jmp	ramcode+(CARTTEST-ROMCODE)	;jump in at CARTTEST
   125 				*
   126 				*
   127 				*   the following code is copied to ram for execution
   128 				*
   129 FE9F			ROMCODE:
   130 FE9F			NOCART:
   131 FE9F A9 02			lda	#2
   132 FEA1 85 01			sta	PTCTRL			;turn "security" ROM on
   133 FEA3 4C 00 D0			JMP	ASTEROID		;NO CART, do asteroids
   134 				*
   135 FEA6			CARTTEST:
   136 FEA6 A9 16			LDA	#$16			;TURN EXTERNAL CART ON
   137 FEA8 85 01			STA	PTCTRL
   138
   139 FEAA A0 FF			LDY	#$FF
   140 FEAC A2 7F			LDX	#$7F			;SEE IF A CART PLUGGED IN
   141 FEAE			CTSTLOOP:
   142 FEAE BD 00 FE			LDA	$FE00,X
   143 FEB1 D9 80 FD			CMP	$FD80,Y
   144 FEB4 D0 E9			BNE	NOCART
   145 FEB6 88				DEY
   146 FEB7 CA				DEX
   147 FEB8 10 F4			BPL	CTSTLOOP		;X LEFT = FF, Y LEFT = 7F
   148 				*
   149 FEBA AD FC FF			LDA	$FFFC			;SEE IF START AT FFFF
   150 FEBD 2D FD FF			AND	$FFFD
   151 FEC0 C9 FF			CMP	#$FF
   152 FEC2 F0 DB			BEQ	NOCART			;ALL LINES DRAWN HIGH, NO CART
   153 FEC4 AD FC FF			LDA	$FFFC			;SEE IF START AT 0000
   154 FEC7 0D FD FF			ORA	$FFFD
   155 FECA F0 D3			BEQ	NOCART			;ALL LINES DRAWN LOW, NO CART
   156 				*
   157 FECC AD F8 FF			LDA	$FFF8			;CHECK FOR REGION VERIFICATION
   158 FECF 09 FE			ORA	#$fe
   159 FED1 C9 FF			CMP	#$FF
   160 FED3 D0 67			BNE	CART26
   161 FED5 AD F8 FF		 	LDA	$FFF8			;TOP 4 BITS OF FFF8 SHOULD BE 0F0
   162 FED8 49 F0			EOR	#$F0
   163 FEDA 29 F0			AND	#$F0
   164 FEDC D0 5E			BNE	CART26
   165 FEDE AD F9 FF			LDA	$FFF9			;SEE IF MARIA SIGNATURE EXISTS
   166 FEE1 29 0B			AND	#$0B			;0X7 OR 0X3 VALID
   167 FEE3 C9 03			CMP	#$03
   168 FEE5 D0 55			BNE	CART26
   169 FEE7 AD F9 FF			LDA	$FFF9			;GET BOTTOM OF CART ADDRESS
   170 FEEA 29 F0			AND	#$F0
   171 FEEC C9 40			cmp	#$40			;not too low
   172 FEEE 90 4C			bcc	CART26
   173 FEF0 E9 01			sbc	#1
   174 FEF2 CD FD FF			cmp	$fffd
   175 FEF5 B0 45			bcs	CART26
   176 				*
   177 FEF7 AD EA 1B			lda	$1BEA		;2600 ROM responds to this address
   178 FEFA 49 FF			eor	#$FF
   179 FEFC 8D EA 1B			sta	$1BEA		;stuff some data in MARIA ram space
   180 FEFF A8				tay
   181 				*
   182 FF00 A2 05			ldx	#5		;check hardware vectors
   183 FF02			vecheck:
   184 FF02 BD FA FF			lda	$FFFA,x		;   2600 should always
   185 FF05 DD FA DF			cmp	$DFFA,x		;     read the same data
   186 FF08 D0 08			bne	SETMARIA	;       in DXXX as in FXXX
   187 FF0A CA				dex
   188 FF0B 10 F5			bpl	vecheck
   189 				*
   190 				*  Some 7800 carts get here...
   191 				*
   192 FF0D CC EA 1B			cpy	$1BEA		;does this act like 7800 ram or 2600 ROM?
   193 FF10 D0 2A			bne	CART26
   194 				*
   195 				*     We favor 7800 more than before so 2600 might get run in 7800 mode 
   196 				*     ...may need to do more 2600/7800 discrimination here...
   197 				*
   198 				*
   199 				*
   200 				*  we must be 7800 cart;  go to it...
   201 				*
   202 FF12			SETMARIA:
   203 FF12 A9 02			lda	#02
   204 FF14 85 01			sta	PTCTRL		;turn on internal rom (for NMI processing)
   205 				*
   206 FF16 20 A4 23			jsr	ramcode+(wait00-ROMCODE)	;wait for V-blank start
   207 				*
   208 FF19 A9 27			lda	#$27		;install our practice zone list
   209 FF1B 85 2C			sta	DPPH
   210 FF1D A9 07			lda	#07
   211 FF1F 85 30			sta	DPPL
   212 				*
   213 FF21 A9 43			lda	#$43
   214 FF23 85 78			sta	NMICTRL		;tell ASTEROIDS nmi routine to do nothing 
   215 FF25 85 3C			sta	CTRL		;turn maria on in 320 mode
   216 				*
   217 FF27 A2 01			ldx	#1
   218 FF29			frame2:
   219 FF29 20 A4 23			jsr	ramcode+(wait00-ROMCODE)	;wait for V-blank start
   220 FF2C CA				dex			;do 2 frames of this stuff
   221 FF2D 10 FA			bpl	frame2
   222 				*
   223 FF2F A9 60			lda	#$60
   224 FF31 85 3C			sta	CTRL		;turn maria off
   225 				*
   226 FF33 A2 16			LDX	#$16	;PUT CART IN 7800 MODE, CART ON
   227 FF35 86 01			STX	PTCTRL
   228 FF37 9A				TXS
   229 FF38 F8				SED
   230 FF39 6C FC FF			JMP	($FFFC)	;VECTOR INTO THE CART IN 3600 MODE
   231 				*
   232 				*  tests indicate we must be a 2600 cart...
   233 				*
   234 FF3C			CART26:
   235 FF3C A9 02			LDA	#$02
   236 FF3E 85 01			STA	PTCTRL			;TURN SECURITY ROM ON
   237 FF40 4C 80 04			jmp	tiaram			;perform this from tia ram
   238 				*
   239 				*
   240 				*   This is a 7800 wait-for-beginning-of V-blank routine
   241 				*
   242 FF43			wait00:
   243 FF43 24 28			bit	MSTAT
   244 FF45 30 FC			bmi	wait00
   245 FF47			wait01:
   246 FF47 24 28			bit	MSTAT
   247 FF49 10 FC			bpl	wait01
   248 FF4B 60				rts
   249 				*
   250 FF4C			ROMEND:
   251 				*
   252 				*
   253 				; First zero out TIA without doing a TWSYNC. This must be done in a loop that
   254 				; counts up so that graphics are turned off before the collision registers are
   255 				; cleared. RSYNC should turn case C into a case A. Note also that the stores
   256 				; of zero puts the system in TIA space but does not lock it there. This code
   257 				; must all run out of 6532 RAM since the memory map will change as we change
   258 				; mode.	The 6532 RAM exists in all memory maps.
   259 				*
   260 FF4C			SYNC:
   261 FF4C A9 00			LDA	#0
   262 FF4E AA				TAX
   263 FF4F 85 01			STA	VBLANK
   264 FF51			ZEROLP:
   265 FF51 95 03			STA	RSYNC,X
   266 FF53 E8				INX
   267 FF54 E0 2A			CPX	#(CXCLR-RSYNC+1)
   268 FF56 D0 F9			BNE	ZEROLP
   269
   270 				; Test now for a possible E case. In some E cases, TWSYNCs do not work properly
   271 				; and this must be detected. In an E case failure, the LDA is prefetched and
   272 				; the 04 following it is skipped over and NOP ($EA) is loaded into A causing
   273 				; the branch on minus to be taken. If this happens the E case can now be
   274 				; corrected.	NOTE: All E cases do not get trapped here and must be handled
   275 				; latter by collisions.
   276 FF58 85 02			STA	TWSYNC
   277 FF5A A9 04			LDA	#4
   278 FF5C EA				NOP
   279 FF5D 30 23			BMI	ECASE
   280
   281 				; Position player 0 on the left side of the screen and player 1 on the right
   282 				; side of the screen so that they will overlap (or not overlap as the case may
   283 				; be) playfield 2 that has a copy on both sides of the screen.	Resets occur at
   284 				; the 38th and 65th cycle.
   285 FF5F A2 04			LDX	#4
   286 FF61			STALL4:
   287 FF61 CA				DEX				;Stall loop
   288 FF62 10 FD			BPL	STALL4
   289 FF64 9A				TXS				;Set the stack to 0FF for stall JSRs
   290 FF65 8D 10 01			STA	RESP0+$100		;38th cylce
   291 FF68 20 CB 04			JSR	DUMMY+1-SYNC+$480	;12 cycle stall
   292 FF6B 20 CB 04			JSR	DUMMY+1-SYNC+$480	;Ditto
   293 FF6E 85 11			STA	RESP1	;65th cycle
   294
   295 				; Turn on graphics to cause the collisions
   296 FF70 85 1B			STA	GRP0	;68th cycle
   297 FF72 85 1C			STA	GRP1	;71st cycle
   298 FF74 85 0F			STA	PF2	;74th cycle
   299
   300 				; Stall an entire scan line to allow collisions to take place.	The E case test
   301 				; should follow all TWSYNCs to be safe.
   302 FF76 EA				NOP		;76th cycle
   303 FF77 85 02			STA	TWSYNC	;3rd cycle
   304 FF79 A9 00			LDA	#0
   305 FF7B EA				NOP
   306 FF7C 30 04			BMI	ECASE
   307
   308 				; Test now for a collision between player 1 and playfield.	If there is no
   309 				; collision, we must shift the clock once. If there is a collision, we must
   310 				; do further testing.
   311 FF7E 24 03			BIT	CXP1FB-$30
   312 FF80 30 09			BMI	NOCOL2
   313
   314 				; This section shifts the clock once.	Storing a 2 switches the system into
   315 				; MARIA MODe and the following store to 0FXXX causes a clock speed-up for one
   316 				; cycle and thus shifts the clock once.
   317 FF82			ECASE:
   318 FF82 A9 02			LDA	#2
   319 FF84 85 09			STA	COLUBK	;changes to MARIA MODe
   320 FF86 8D 12 F1			STA	$F112
   321 FF89 D0 1E			BNE	DONE	;JMP
   322
   323 				; Test now for a collision between player 0 and playfield.	If there is no
   324 				; collision, we must shift the clock twice. If there is a collision, we must
   325 				; do further testing.
   326 FF8B			NOCOL2:
   327 FF8B 24 02			BIT	CXP0FB-$30
   328 FF8D 30 0C			BMI	NOCOL0
   329
   330 				; This section shifts the clock twice.	Storing a 2 switches the system into
   331 				; MARIA MODe and the following stores to 0FXXX causes two clock speed-ups for
   332 				; one cycle and thus shifts the clock twice.
   333 FF8F A9 02			LDA	#2
   334 FF91 85 06			STA	COLUP0	;changes to MARIA MODe
   335 FF93 8D 18 F1			STA	$F118
   336 FF96			DUMMY:
   337 FF96 8D 60 F4			STA	$F460	;Note that the 060 is a RTS
   338 FF99 D0 0E			BNE	DONE
   339
   340 				; If we've fotten to this point the only possible failure left is an E case that
   341 				; was not detected by the TWSYNC trap.	Test for this by clearing the collision
   342 				; registers, shifting the graphics for player 0 to the left one pixel by
   343 				; changing GRP0 from a 4 to an 8, and then retesting for a collision.	If there
   344 				; is still a collision between player 0 and the playfield, we have an E case,
   345 				; otherwise we are done. Be careful not to test for collisions until after they
   346 				; occur (about the 40th cycle).
   347 FF9B			NOCOL0:
   348 FF9B 85 2C			STA	CXCLR			;21st cycle
   349 FF9D A9 08			LDA	#8			;23rd cycle - one pixel to the left
   350 FF9F 85 1B			STA	GRP0			;26th cycle
   351 FFA1 20 CB 04			JSR	DUMMY+1-SYNC+$480	;12 cycle stall
   352 FFA4 EA				NOP				;40th cycle - just to be safe
   353 FFA5 24 02			BIT	CXP0FB-$30		;43rd cycle
   354 FFA7 30 D9			BMI	ECASE
   355
   356 				; We are now synced and should lock ourselves into TIA mopde with the external
   357 				; cart enabled and jump to the reset vector.	Thanks for stopping by...
   358 FFA9			DONE:
   359 FFA9 A9 FD			LDA	#$FD
   360 FFAB 85 08			STA	COLUPF	;Change MODes to TIA with EXT and lock.
   361 FFAD 6C FC FF			JMP	($FFFC)
   362 FFB0			NROM:
   363 				*
   364 				*  some necessary code from HISCORE.S module that was omitted...
   365 				*
   366 FFB0			HSCSUCK:
   367 FFB0 20 44 F4			JSR	ZEROHS
   368 				*
   369 FFB3			HSCDOENT:
   370 				*
   371 				* HSCSETDM -- SET DIFF/MODE LEVEL ARGUMENT BASED ON DIFF AND MODE
   372 				*
   373 FFB3			HSCSETDM:
   374 FFB3 A5 82			LDA	MODE		;COMPUTE DIFF/MODE LEVEL VALUE BYTE
   375 FFB5 10 02			BPL	ZHSCMOK
   376 FFB7 A9 00			LDA	#0
   377 FFB9			ZHSCMOK:
   378 FFB9 0A				ASL
   379 FFBA 0A				ASL
   380 FFBB 18				CLC
   381 FFBC 65 83			ADC	DIFF
   382 FFBE 85 55			STA	TEMP		;SAVE IT WHERE WE CAN INSERT LATER
   383 FFC0			HSCSHOW:
   384 FFC0 A9 01			LDA	#1
   385 FFC2			HSCRET:
   386 FFC2 60				RTS
   387 				*
   388 				*
   389 FFC3			HSCTAB:
   390 FFC3 20 20 20 20 20 20 + 	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
   391 FFCD 4F 68 21 20 57 68 + 	.byte	$4F,$68,$21,$20,$57,$68,$61,$74,$20,$61
   392 FFD7 20 66 69 6E 65 20 + 	.byte	$20,$66,$69,$6E,$65,$20,$62,$6F,$79,$20   
   393 FFE1 69 73 20 44 61 76 + 	.byte	$69,$73,$20,$44,$61,$76,$65,$20,$53,$74   
   394 FFEB 61 75 67 61 73 2E		.byte	$61,$75,$67,$61,$73,$2E           
   395 FFF1 20 20 20 20 20 20 + 	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20
   396 				*
   397 = DB9F			CODEDIF	equ	ROMCODE-ramcode		;DIFFERENCE BETWEEN OLD AND NEW ADDRESS
   398 				*
    48 				*
    49 = FFFA			avail	equ	*
    50 				*
    51 				*
    52 				; no encryption (bios version)
    53 FFFA				org		$FFFA
    54 FFFA FC D2			.word	NMI
    55 FFFC 00 D0			.word	Asteroid	;startup	- skipped bios checks (should be .word startup)
    56 FFFE 2B D3			.word	IRQ
